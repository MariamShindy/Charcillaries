//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.10.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Charcillaries.Data.HelperClasses;
using Charcillaries.Data.FactoryClasses;
using Charcillaries.Data.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Charcillaries.Data.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'RouteFlightFeedback'.<br/><br/></summary>
	[Serializable]
	public partial class RouteFlightFeedbackEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private FlightEntity _flight;
		private PassengerEntity _passenger;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static RouteFlightFeedbackEntityStaticMetaData _staticMetaData = new RouteFlightFeedbackEntityStaticMetaData();
		private static RouteFlightFeedbackRelations _relationsFactory = new RouteFlightFeedbackRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Flight</summary>
			public static readonly string Flight = "Flight";
			/// <summary>Member name Passenger</summary>
			public static readonly string Passenger = "Passenger";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class RouteFlightFeedbackEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public RouteFlightFeedbackEntityStaticMetaData()
			{
				SetEntityCoreInfo("RouteFlightFeedbackEntity", InheritanceHierarchyType.None, false, (int)Charcillaries.Data.EntityType.RouteFlightFeedbackEntity, typeof(RouteFlightFeedbackEntity), typeof(RouteFlightFeedbackEntityFactory), false);
				AddNavigatorMetaData<RouteFlightFeedbackEntity, FlightEntity>("Flight", "RouteFlightFeedbacks", (a, b) => a._flight = b, a => a._flight, (a, b) => a.Flight = b, Charcillaries.Data.RelationClasses.StaticRouteFlightFeedbackRelations.FlightEntityUsingFlightIdStatic, ()=>new RouteFlightFeedbackRelations().FlightEntityUsingFlightId, null, new int[] { (int)RouteFlightFeedbackFieldIndex.FlightId }, null, true, (int)Charcillaries.Data.EntityType.FlightEntity);
				AddNavigatorMetaData<RouteFlightFeedbackEntity, PassengerEntity>("Passenger", "RouteFlightFeedbacks", (a, b) => a._passenger = b, a => a._passenger, (a, b) => a.Passenger = b, Charcillaries.Data.RelationClasses.StaticRouteFlightFeedbackRelations.PassengerEntityUsingPassengerIdStatic, ()=>new RouteFlightFeedbackRelations().PassengerEntityUsingPassengerId, null, new int[] { (int)RouteFlightFeedbackFieldIndex.PassengerId }, null, true, (int)Charcillaries.Data.EntityType.PassengerEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static RouteFlightFeedbackEntity()
		{
		}

		/// <summary> CTor</summary>
		public RouteFlightFeedbackEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public RouteFlightFeedbackEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this RouteFlightFeedbackEntity</param>
		public RouteFlightFeedbackEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for RouteFlightFeedback which data should be fetched into this RouteFlightFeedback object</param>
		public RouteFlightFeedbackEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for RouteFlightFeedback which data should be fetched into this RouteFlightFeedback object</param>
		/// <param name="validator">The custom validator object for this RouteFlightFeedbackEntity</param>
		public RouteFlightFeedbackEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected RouteFlightFeedbackEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Flight' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoFlight() { return CreateRelationInfoForNavigator("Flight"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Passenger' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPassenger() { return CreateRelationInfoForNavigator("Passenger"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this RouteFlightFeedbackEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static RouteFlightFeedbackRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Flight' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathFlight { get { return _staticMetaData.GetPrefetchPathElement("Flight", CommonEntityBase.CreateEntityCollection<FlightEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Passenger' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPassenger { get { return _staticMetaData.GetPrefetchPathElement("Passenger", CommonEntityBase.CreateEntityCollection<PassengerEntity>()); } }

		/// <summary>The Comment property of the Entity RouteFlightFeedback<br/><br/></summary>
		/// <remarks>Mapped on  table field: "route_flight_feedback"."comment".<br/>Table field type characteristics (type, precision, scale, length): Text, 0, 0, 1073741824.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Comment
		{
			get { return (System.String)GetValue((int)RouteFlightFeedbackFieldIndex.Comment, true); }
			set	{ SetValue((int)RouteFlightFeedbackFieldIndex.Comment, value); }
		}

		/// <summary>The DateCreated property of the Entity RouteFlightFeedback<br/><br/></summary>
		/// <remarks>Mapped on  table field: "route_flight_feedback"."date_created".<br/>Table field type characteristics (type, precision, scale, length): Timestamp, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime DateCreated
		{
			get { return (System.DateTime)GetValue((int)RouteFlightFeedbackFieldIndex.DateCreated, true); }
			set	{ SetValue((int)RouteFlightFeedbackFieldIndex.DateCreated, value); }
		}

		/// <summary>The FlightId property of the Entity RouteFlightFeedback<br/><br/></summary>
		/// <remarks>Mapped on  table field: "route_flight_feedback"."flight_id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 FlightId
		{
			get { return (System.Int32)GetValue((int)RouteFlightFeedbackFieldIndex.FlightId, true); }
			set	{ SetValue((int)RouteFlightFeedbackFieldIndex.FlightId, value); }
		}

		/// <summary>The Id property of the Entity RouteFlightFeedback<br/><br/></summary>
		/// <remarks>Mapped on  table field: "route_flight_feedback"."id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)RouteFlightFeedbackFieldIndex.Id, true); }
			set { SetValue((int)RouteFlightFeedbackFieldIndex.Id, value); }		}

		/// <summary>The ObjectStatus property of the Entity RouteFlightFeedback<br/><br/></summary>
		/// <remarks>Mapped on  table field: "route_flight_feedback"."object_status".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ObjectStatus
		{
			get { return (System.Int32)GetValue((int)RouteFlightFeedbackFieldIndex.ObjectStatus, true); }
			set	{ SetValue((int)RouteFlightFeedbackFieldIndex.ObjectStatus, value); }
		}

		/// <summary>The PassengerId property of the Entity RouteFlightFeedback<br/><br/></summary>
		/// <remarks>Mapped on  table field: "route_flight_feedback"."passenger_id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 PassengerId
		{
			get { return (System.Int32)GetValue((int)RouteFlightFeedbackFieldIndex.PassengerId, true); }
			set	{ SetValue((int)RouteFlightFeedbackFieldIndex.PassengerId, value); }
		}

		/// <summary>The Rating property of the Entity RouteFlightFeedback<br/><br/></summary>
		/// <remarks>Mapped on  table field: "route_flight_feedback"."rating".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> Rating
		{
			get { return (Nullable<System.Int32>)GetValue((int)RouteFlightFeedbackFieldIndex.Rating, false); }
			set	{ SetValue((int)RouteFlightFeedbackFieldIndex.Rating, value); }
		}

		/// <summary>Gets / sets related entity of type 'FlightEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual FlightEntity Flight
		{
			get { return _flight; }
			set { SetSingleRelatedEntityNavigator(value, "Flight"); }
		}

		/// <summary>Gets / sets related entity of type 'PassengerEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual PassengerEntity Passenger
		{
			get { return _passenger; }
			set { SetSingleRelatedEntityNavigator(value, "Passenger"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Charcillaries.Data
{
	public enum RouteFlightFeedbackFieldIndex
	{
		///<summary>Comment. </summary>
		Comment,
		///<summary>DateCreated. </summary>
		DateCreated,
		///<summary>FlightId. </summary>
		FlightId,
		///<summary>Id. </summary>
		Id,
		///<summary>ObjectStatus. </summary>
		ObjectStatus,
		///<summary>PassengerId. </summary>
		PassengerId,
		///<summary>Rating. </summary>
		Rating,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Charcillaries.Data.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: RouteFlightFeedback. </summary>
	public partial class RouteFlightFeedbackRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between RouteFlightFeedbackEntity and FlightEntity over the m:1 relation they have, using the relation between the fields: RouteFlightFeedback.FlightId - Flight.Id</summary>
		public virtual IEntityRelation FlightEntityUsingFlightId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Flight", false, new[] { FlightFields.Id, RouteFlightFeedbackFields.FlightId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RouteFlightFeedbackEntity and PassengerEntity over the m:1 relation they have, using the relation between the fields: RouteFlightFeedback.PassengerId - Passenger.Id</summary>
		public virtual IEntityRelation PassengerEntityUsingPassengerId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Passenger", false, new[] { PassengerFields.Id, RouteFlightFeedbackFields.PassengerId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticRouteFlightFeedbackRelations
	{
		internal static readonly IEntityRelation FlightEntityUsingFlightIdStatic = new RouteFlightFeedbackRelations().FlightEntityUsingFlightId;
		internal static readonly IEntityRelation PassengerEntityUsingPassengerIdStatic = new RouteFlightFeedbackRelations().PassengerEntityUsingPassengerId;

		/// <summary>CTor</summary>
		static StaticRouteFlightFeedbackRelations() { }
	}
}
