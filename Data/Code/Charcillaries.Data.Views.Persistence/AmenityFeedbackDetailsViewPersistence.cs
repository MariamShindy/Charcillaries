//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v5.10.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SD.LLBLGen.Pro.QuerySpec;
using Charcillaries.Data.HelperClasses;
using SD.LLBLGen.Pro.LinqSupportClasses;
using SD.LLBLGen.Pro.LinqSupportClasses.DTOProjectionHelpers;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Charcillaries.Data.Views.Persistence
{

	/// <summary>Static class for (extension) methods for fetching and projecting instances of Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsView from the entity model.</summary>
	public static partial class AmenityFeedbackDetailsViewPersistence
	{
		private static readonly System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.AmenityFeedbackEntity, Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsView>> _projectorExpression = CreateProjectionFunc();
		private static readonly Func<Charcillaries.Data.EntityClasses.AmenityFeedbackEntity, Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsView> _compiledProjector = CreateProjectionFunc().Compile();
		/// <summary>Linq specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToAmenityFeedbackDetailsView(System.Linq.IQueryable{Charcillaries.Data.EntityClasses.AmenityFeedbackEntity})"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="CreateProjectionFunc"/></param>
		/// <remarks>Linq specific</remarks>
		static partial void GetAdjustmentsForProjectToAmenityFeedbackDetailsView(ref System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.AmenityFeedbackEntity, Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsView>> projectionAdjustments);
		/// <summary>QuerySpec specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToAmenityFeedbackDetailsView(EntityQuery{Charcillaries.Data.EntityClasses.AmenityFeedbackEntity}, Charcillaries.Data.FactoryClasses.QueryFactory)"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="ProjectToAmenityFeedbackDetailsView(EntityQuery{Charcillaries.Data.EntityClasses.AmenityFeedbackEntity}, Charcillaries.Data.FactoryClasses.QueryFactory)"/></param>
		/// <remarks>QuerySpec specific</remarks>
		static partial void GetAdjustmentsForProjectToAmenityFeedbackDetailsViewQs(ref System.Linq.Expressions.Expression<Func<Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsView>> projectionAdjustments);
	
		/// <summary>Empty static ctor for triggering initialization of static members in a thread-safe manner</summary>
		static AmenityFeedbackDetailsViewPersistence() { }
	
		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsView which instances are projected from the results of the specified baseQuery, which returns Charcillaries.Data.EntityClasses.AmenityFeedbackEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <returns>IQueryable to retrieve Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsView instances</returns>
		public static IQueryable<Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsView> ProjectToAmenityFeedbackDetailsView(this IQueryable<Charcillaries.Data.EntityClasses.AmenityFeedbackEntity> baseQuery)
		{
			return baseQuery.Select(_projectorExpression);
		}

		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsView which instances are projected from the results of the specified baseQuery using QuerySpec, which returns Charcillaries.Data.EntityClasses.AmenityFeedbackEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="qf">The query factory used to create baseQuery.</param>
		/// <returns>DynamicQuery to retrieve Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsView instances</returns>
		public static DynamicQuery<Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsView> ProjectToAmenityFeedbackDetailsView(this EntityQuery<Charcillaries.Data.EntityClasses.AmenityFeedbackEntity> baseQuery, Charcillaries.Data.FactoryClasses.QueryFactory qf)
		{
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToAmenityFeedbackDetailsViewQs(ref projectionAdjustments);
			return qf.Create()
				.From(baseQuery.Select(Projection.Full).As("__BQ")
					.InnerJoin(qf.Amenity.As("__L0_0")).On(AmenityFeedbackFields.AmenityId.Source("__BQ").Equal(AmenityFields.Id.Source("__L0_0")))
					.InnerJoin(qf.Passenger.As("__L0_1")).On(AmenityFeedbackFields.PassengerId.Source("__BQ").Equal(PassengerFields.Id.Source("__L0_1")))
					.InnerJoin(qf.Flight.As("__L0_2")).On(PassengerFields.FlightId.Source("__L0_1").Equal(FlightFields.Id.Source("__L0_2")))
					.InnerJoin(qf.Person.As("__L0_3")).On(PassengerFields.PersonId.Source("__L0_1").Equal(PersonFields.Id.Source("__L0_3"))))
				.Select(LinqUtils.MergeProjectionAdjustmentsIntoProjection(() => new Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsView()
				{
					Amenity = new Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsViewTypes.Amenity()
						{
							AirlineId = AmenityFields.AirlineId.Source("__L0_0").ToValue<System.Int32>(),
							Description = AmenityFields.Description.Source("__L0_0").ToValue<System.String>(),
							Id = AmenityFields.Id.Source("__L0_0").ToValue<System.Int32>(),
							Name = AmenityFields.Name.Source("__L0_0").ToValue<System.String>(),
						},
					AmenityId = AmenityFeedbackFields.AmenityId.Source("__BQ").ToValue<System.Int32>(),
					Comment = AmenityFeedbackFields.Comment.Source("__BQ").ToValue<System.String>(),
					DateCreated = AmenityFeedbackFields.DateCreated.Source("__BQ").ToValue<System.DateTime>(),
					Id = AmenityFeedbackFields.Id.As("Id1").Source("__BQ").ToValue<System.Int32>(),
					Passenger = new Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsViewTypes.Passenger()
						{
							Flight = new Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsViewTypes.PassengerTypes.Flight()
								{
									ArrivalDate = FlightFields.ArrivalDate.Source("__L0_2").ToValue<System.DateTime>(),
									DepartureDate = FlightFields.DepartureDate.Source("__L0_2").ToValue<System.DateTime>(),
									FlightNumber = FlightFields.FlightNumber.Source("__L0_2").ToValue<System.String>(),
									FlightRouteId = FlightFields.FlightRouteId.Source("__L0_2").ToValue<System.Int32>(),
									Id = FlightFields.Id.As("Id2").Source("__L0_2").ToValue<System.Int32>(),
									NumberOfSeats = FlightFields.NumberOfSeats.Source("__L0_2").ToValue<System.Int32>(),
									ObjectStatus = FlightFields.ObjectStatus.Source("__L0_2").ToValue<System.Int32>(),
									TourOperatorId = FlightFields.TourOperatorId.Source("__L0_2").ToValue<System.Int32>(),
								},
							Person = new Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsViewTypes.PassengerTypes.Person()
								{
									FirstName = PersonFields.FirstName.Source("__L0_3").ToValue<System.String>(),
									Id = PersonFields.Id.As("Id3").Source("__L0_3").ToValue<System.Int32>(),
									LastName = PersonFields.LastName.Source("__L0_3").ToValue<System.String>(),
									ObjectStatus = PersonFields.ObjectStatus.As("ObjectStatus1").Source("__L0_3").ToValue<System.Int32>(),
								},
						},
					PassengerId = AmenityFeedbackFields.PassengerId.Source("__BQ").ToValue<System.Int32>(),
					Rating = AmenityFeedbackFields.Rating.Source("__BQ").ToValue<Nullable<System.Int32>>(),
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegionQS_AmenityFeedbackDetailsView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
				}, projectionAdjustments, false));
		}

		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsView which instances are projected from the Charcillaries.Data.EntityClasses.AmenityFeedbackEntity entity instance specified, the root entity of the derived element returned by this method.</summary>
		/// <param name="entity">The entity to project from.</param>
		/// <returns>Charcillaries.Data.EntityClasses.AmenityFeedbackEntity instance created from the specified entity instance</returns>
		public static Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsView ProjectToAmenityFeedbackDetailsView(this Charcillaries.Data.EntityClasses.AmenityFeedbackEntity entity)
		{
			return _compiledProjector(entity);
		}

		private static System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.AmenityFeedbackEntity, Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsView>> CreateProjectionFunc()
		{
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.AmenityFeedbackEntity, Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsView>> mainProjection = p__0 => new Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsView()
			{
				Amenity = new Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsViewTypes.Amenity()
				{
					AirlineId = p__0.Amenity.AirlineId,
					Description = p__0.Amenity.Description,
					Id = p__0.Amenity.Id,
					Name = p__0.Amenity.Name,
				},
				AmenityId = p__0.AmenityId,
				Comment = p__0.Comment,
				DateCreated = p__0.DateCreated,
				Id = p__0.Id,
				Passenger = new Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsViewTypes.Passenger()
				{
					Flight = new Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsViewTypes.PassengerTypes.Flight()
					{
						ArrivalDate = p__0.Passenger.Flight.ArrivalDate,
						DepartureDate = p__0.Passenger.Flight.DepartureDate,
						FlightNumber = p__0.Passenger.Flight.FlightNumber,
						FlightRouteId = p__0.Passenger.Flight.FlightRouteId,
						Id = p__0.Passenger.Flight.Id,
						NumberOfSeats = p__0.Passenger.Flight.NumberOfSeats,
						ObjectStatus = p__0.Passenger.Flight.ObjectStatus,
						TourOperatorId = p__0.Passenger.Flight.TourOperatorId,
					},
					Person = new Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsViewTypes.PassengerTypes.Person()
					{
						FirstName = p__0.Passenger.Person.FirstName,
						Id = p__0.Passenger.Person.Id,
						LastName = p__0.Passenger.Person.LastName,
						ObjectStatus = p__0.Passenger.Person.ObjectStatus,
					},
				},
				PassengerId = p__0.PassengerId,
				Rating = p__0.Rating,
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegion_AmenityFeedbackDetailsView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
			};
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.AmenityFeedbackEntity, Charcillaries.Data.Views.DtoClasses.AmenityFeedbackDetailsView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToAmenityFeedbackDetailsView(ref projectionAdjustments);
			return LinqUtils.MergeProjectionAdjustmentsIntoProjection(mainProjection, projectionAdjustments, true);
		}
	}
}


