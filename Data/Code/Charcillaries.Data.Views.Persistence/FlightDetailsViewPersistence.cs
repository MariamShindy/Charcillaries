//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v5.10.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SD.LLBLGen.Pro.QuerySpec;
using Charcillaries.Data.HelperClasses;
using SD.LLBLGen.Pro.LinqSupportClasses;
using SD.LLBLGen.Pro.LinqSupportClasses.DTOProjectionHelpers;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Charcillaries.Data.Views.Persistence
{

	/// <summary>Static class for (extension) methods for fetching and projecting instances of Charcillaries.Data.Views.DtoClasses.FlightDetailsView from the entity model.</summary>
	public static partial class FlightDetailsViewPersistence
	{
		private static readonly System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.FlightEntity, Charcillaries.Data.Views.DtoClasses.FlightDetailsView>> _projectorExpression = CreateProjectionFunc();
		private static readonly Func<Charcillaries.Data.EntityClasses.FlightEntity, Charcillaries.Data.Views.DtoClasses.FlightDetailsView> _compiledProjector = CreateProjectionFunc().Compile();
		/// <summary>Linq specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToFlightDetailsView(System.Linq.IQueryable{Charcillaries.Data.EntityClasses.FlightEntity})"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="CreateProjectionFunc"/></param>
		/// <remarks>Linq specific</remarks>
		static partial void GetAdjustmentsForProjectToFlightDetailsView(ref System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.FlightEntity, Charcillaries.Data.Views.DtoClasses.FlightDetailsView>> projectionAdjustments);
		/// <summary>QuerySpec specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToFlightDetailsView(EntityQuery{Charcillaries.Data.EntityClasses.FlightEntity}, Charcillaries.Data.FactoryClasses.QueryFactory)"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="ProjectToFlightDetailsView(EntityQuery{Charcillaries.Data.EntityClasses.FlightEntity}, Charcillaries.Data.FactoryClasses.QueryFactory)"/></param>
		/// <remarks>QuerySpec specific</remarks>
		static partial void GetAdjustmentsForProjectToFlightDetailsViewQs(ref System.Linq.Expressions.Expression<Func<Charcillaries.Data.Views.DtoClasses.FlightDetailsView>> projectionAdjustments);
	
		/// <summary>Empty static ctor for triggering initialization of static members in a thread-safe manner</summary>
		static FlightDetailsViewPersistence() { }
	
		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.FlightDetailsView which instances are projected from the results of the specified baseQuery, which returns Charcillaries.Data.EntityClasses.FlightEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <returns>IQueryable to retrieve Charcillaries.Data.Views.DtoClasses.FlightDetailsView instances</returns>
		public static IQueryable<Charcillaries.Data.Views.DtoClasses.FlightDetailsView> ProjectToFlightDetailsView(this IQueryable<Charcillaries.Data.EntityClasses.FlightEntity> baseQuery)
		{
			return baseQuery.Select(_projectorExpression);
		}

		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.FlightDetailsView which instances are projected from the results of the specified baseQuery using QuerySpec, which returns Charcillaries.Data.EntityClasses.FlightEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="qf">The query factory used to create baseQuery.</param>
		/// <returns>DynamicQuery to retrieve Charcillaries.Data.Views.DtoClasses.FlightDetailsView instances</returns>
		public static DynamicQuery<Charcillaries.Data.Views.DtoClasses.FlightDetailsView> ProjectToFlightDetailsView(this EntityQuery<Charcillaries.Data.EntityClasses.FlightEntity> baseQuery, Charcillaries.Data.FactoryClasses.QueryFactory qf)
		{
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.Views.DtoClasses.FlightDetailsView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToFlightDetailsViewQs(ref projectionAdjustments);
			return qf.Create()
				.From(baseQuery.Select(Projection.Full).As("__BQ")
					.InnerJoin(qf.FlightRoute.As("__L0_0")).On(FlightFields.FlightRouteId.Source("__BQ").Equal(FlightRouteFields.Id.Source("__L0_0")))
					.InnerJoin(qf.TourOperator.As("__L0_1")).On(FlightFields.TourOperatorId.Source("__BQ").Equal(TourOperatorFields.Id.Source("__L0_1"))))
				.Select(LinqUtils.MergeProjectionAdjustmentsIntoProjection(() => new Charcillaries.Data.Views.DtoClasses.FlightDetailsView()
				{
					ArrivalDate = FlightFields.ArrivalDate.Source("__BQ").ToValue<System.DateTime>(),
					DepartureDate = FlightFields.DepartureDate.Source("__BQ").ToValue<System.DateTime>(),
					FlightNumber = FlightFields.FlightNumber.Source("__BQ").ToValue<System.String>(),
					FlightRoute = new Charcillaries.Data.Views.DtoClasses.FlightDetailsViewTypes.FlightRoute()
						{
							AirlineId = FlightRouteFields.AirlineId.Source("__L0_0").ToValue<System.Int32>(),
							ArrivalAirport = FlightRouteFields.ArrivalAirport.Source("__L0_0").ToValue<System.String>(),
							DepartureAirport = FlightRouteFields.DepartureAirport.Source("__L0_0").ToValue<System.String>(),
							Id = FlightRouteFields.Id.Source("__L0_0").ToValue<System.Int32>(),
						},
					Id = FlightFields.Id.As("Id1").Source("__BQ").ToValue<System.Int32>(),
					NumberOfSeats = FlightFields.NumberOfSeats.Source("__BQ").ToValue<System.Int32>(),
					TourOperator = new Charcillaries.Data.Views.DtoClasses.FlightDetailsViewTypes.TourOperator()
						{
							ContactInfo = TourOperatorFields.ContactInfo.Source("__L0_1").ToValue<System.String>(),
							Id = TourOperatorFields.Id.As("Id2").Source("__L0_1").ToValue<System.Int32>(),
							Name = TourOperatorFields.Name.Source("__L0_1").ToValue<System.String>(),
						},
					TourOperatorId = FlightFields.TourOperatorId.Source("__BQ").ToValue<System.Int32>(),
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegionQS_FlightDetailsView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
				}, projectionAdjustments, false));
		}

		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.FlightDetailsView which instances are projected from the Charcillaries.Data.EntityClasses.FlightEntity entity instance specified, the root entity of the derived element returned by this method.</summary>
		/// <param name="entity">The entity to project from.</param>
		/// <returns>Charcillaries.Data.EntityClasses.FlightEntity instance created from the specified entity instance</returns>
		public static Charcillaries.Data.Views.DtoClasses.FlightDetailsView ProjectToFlightDetailsView(this Charcillaries.Data.EntityClasses.FlightEntity entity)
		{
			return _compiledProjector(entity);
		}

		private static System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.FlightEntity, Charcillaries.Data.Views.DtoClasses.FlightDetailsView>> CreateProjectionFunc()
		{
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.FlightEntity, Charcillaries.Data.Views.DtoClasses.FlightDetailsView>> mainProjection = p__0 => new Charcillaries.Data.Views.DtoClasses.FlightDetailsView()
			{
				ArrivalDate = p__0.ArrivalDate,
				DepartureDate = p__0.DepartureDate,
				FlightNumber = p__0.FlightNumber,
				FlightRoute = new Charcillaries.Data.Views.DtoClasses.FlightDetailsViewTypes.FlightRoute()
				{
					AirlineId = p__0.FlightRoute.AirlineId,
					ArrivalAirport = p__0.FlightRoute.ArrivalAirport,
					DepartureAirport = p__0.FlightRoute.DepartureAirport,
					Id = p__0.FlightRoute.Id,
				},
				Id = p__0.Id,
				NumberOfSeats = p__0.NumberOfSeats,
				TourOperator = new Charcillaries.Data.Views.DtoClasses.FlightDetailsViewTypes.TourOperator()
				{
					ContactInfo = p__0.TourOperator.ContactInfo,
					Id = p__0.TourOperator.Id,
					Name = p__0.TourOperator.Name,
				},
				TourOperatorId = p__0.TourOperatorId,
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegion_FlightDetailsView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
			};
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.FlightEntity, Charcillaries.Data.Views.DtoClasses.FlightDetailsView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToFlightDetailsView(ref projectionAdjustments);
			return LinqUtils.MergeProjectionAdjustmentsIntoProjection(mainProjection, projectionAdjustments, true);
		}
	}
}


