//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v5.10.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SD.LLBLGen.Pro.QuerySpec;
using Charcillaries.Data.HelperClasses;
using SD.LLBLGen.Pro.LinqSupportClasses;
using SD.LLBLGen.Pro.LinqSupportClasses.DTOProjectionHelpers;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Charcillaries.Data.Views.Persistence
{
	///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
	public partial class AmenitiesDetailsViewProjectionParams
	{
		///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
		public partial class A_AmenityFeedbacksProjectionParams_Clauses
		{
			/// <summary>QuerySpec specific. Appends a new OrderBy clause for the AmenityFeedbacks embedded set.</summary>
			/// <param name="clauseToAdd">the clause to add</param>
			public void AppendQSOrderBy(ISortClause clauseToAdd) => this.QSOrderByClauses.Add(clauseToAdd);
			/// <summary>Linq specific. Appends a new OrderBy clause for the AmenityFeedbacks embedded set.</summary>
			/// <param name="orderByClause">The order by clause to use</param>
			/// <param name="descending">if true, the order by will be descending, otherwise ascending (default)</param>
			/// <typeparam name="TField">The type of the field to sort by</typeparam>
			public void AppendLinqOrderBy<TField>(System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.AmenityFeedbackEntity, TField>> orderByClause, bool descending = false) => this.LinqOrderByClauses.Add(new SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>((System.Linq.Expressions.Expression)orderByClause, descending));
			internal List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>> LinqOrderByClauses { get; } = new List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>>();
			internal List<ISortClause> QSOrderByClauses { get; set; } = new List<ISortClause>();
			/// <summary>Linq specific. Custom where clause to be used for when the AmenityFeedbacks embedded set is fetched</summary>
			public System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.AmenityFeedbackEntity, bool>> LinqWhereClause { get; set; }
			/// <summary>QuerySpec specific. Custom where clause to be used for when the AmenityFeedbacks embedded set is fetched</summary>
			public IPredicate QSWhereClause { get; set; }
		}

		///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
		public partial class A_RouteAmenitiesProjectionParams_Clauses
		{
			///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
			public partial class A_R_PassengerAmenitySelectionsProjectionParams_Clauses
			{
				/// <summary>QuerySpec specific. Appends a new OrderBy clause for the PassengerAmenitySelections embedded set.</summary>
				/// <param name="clauseToAdd">the clause to add</param>
				public void AppendQSOrderBy(ISortClause clauseToAdd) => this.QSOrderByClauses.Add(clauseToAdd);
				/// <summary>Linq specific. Appends a new OrderBy clause for the PassengerAmenitySelections embedded set.</summary>
				/// <param name="orderByClause">The order by clause to use</param>
				/// <param name="descending">if true, the order by will be descending, otherwise ascending (default)</param>
				/// <typeparam name="TField">The type of the field to sort by</typeparam>
				public void AppendLinqOrderBy<TField>(System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity, TField>> orderByClause, bool descending = false) => this.LinqOrderByClauses.Add(new SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>((System.Linq.Expressions.Expression)orderByClause, descending));
				internal List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>> LinqOrderByClauses { get; } = new List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>>();
				internal List<ISortClause> QSOrderByClauses { get; set; } = new List<ISortClause>();
				/// <summary>Linq specific. Custom where clause to be used for when the PassengerAmenitySelections embedded set is fetched</summary>
				public System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity, bool>> LinqWhereClause { get; set; }
				/// <summary>QuerySpec specific. Custom where clause to be used for when the PassengerAmenitySelections embedded set is fetched</summary>
				public IPredicate QSWhereClause { get; set; }
			}

			/// <summary>QuerySpec specific. Appends a new OrderBy clause for the RouteAmenities embedded set.</summary>
			/// <param name="clauseToAdd">the clause to add</param>
			public void AppendQSOrderBy(ISortClause clauseToAdd) => this.QSOrderByClauses.Add(clauseToAdd);
			/// <summary>Linq specific. Appends a new OrderBy clause for the RouteAmenities embedded set.</summary>
			/// <param name="orderByClause">The order by clause to use</param>
			/// <param name="descending">if true, the order by will be descending, otherwise ascending (default)</param>
			/// <typeparam name="TField">The type of the field to sort by</typeparam>
			public void AppendLinqOrderBy<TField>(System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.RouteAmenityEntity, TField>> orderByClause, bool descending = false) => this.LinqOrderByClauses.Add(new SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>((System.Linq.Expressions.Expression)orderByClause, descending));
			internal List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>> LinqOrderByClauses { get; } = new List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>>();
			internal List<ISortClause> QSOrderByClauses { get; set; } = new List<ISortClause>();
			/// <summary>Linq specific. Custom where clause to be used for when the RouteAmenities embedded set is fetched</summary>
			public System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.RouteAmenityEntity, bool>> LinqWhereClause { get; set; }
			/// <summary>QuerySpec specific. Custom where clause to be used for when the RouteAmenities embedded set is fetched</summary>
			public IPredicate QSWhereClause { get; set; }
			/// <summary>Projection parameters to configure where / orderby clauses for the nested member 'PassengerAmenitySelections'</summary>
			public A_R_PassengerAmenitySelectionsProjectionParams_Clauses PassengerAmenitySelectionsProjectionParams { get; } = new A_R_PassengerAmenitySelectionsProjectionParams_Clauses();
		}

		/// <summary>Projection parameters to configure where / orderby clauses for the nested member 'AmenityFeedbacks'</summary>
		public A_AmenityFeedbacksProjectionParams_Clauses AmenityFeedbacksProjectionParams { get; } = new A_AmenityFeedbacksProjectionParams_Clauses();
		/// <summary>Projection parameters to configure where / orderby clauses for the nested member 'RouteAmenities'</summary>
		public A_RouteAmenitiesProjectionParams_Clauses RouteAmenitiesProjectionParams { get; } = new A_RouteAmenitiesProjectionParams_Clauses();
	}

	/// <summary>Static class for (extension) methods for fetching and projecting instances of Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView from the entity model.</summary>
	public static partial class AmenitiesDetailsViewPersistence
	{
		private static readonly System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.AmenityEntity, Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView>> _projectorExpression = CreateProjectionFunc();
		private static readonly Func<Charcillaries.Data.EntityClasses.AmenityEntity, Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView> _compiledProjector = CreateProjectionFunc().Compile();
		/// <summary>Linq specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToAmenitiesDetailsView(System.Linq.IQueryable{Charcillaries.Data.EntityClasses.AmenityEntity})"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="CreateProjectionFunc"/></param>
		/// <remarks>Linq specific</remarks>
		static partial void GetAdjustmentsForProjectToAmenitiesDetailsView(ref System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.AmenityEntity, Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView>> projectionAdjustments);
		/// <summary>QuerySpec specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToAmenitiesDetailsView(EntityQuery{Charcillaries.Data.EntityClasses.AmenityEntity}, Charcillaries.Data.FactoryClasses.QueryFactory)"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="ProjectToAmenitiesDetailsView(EntityQuery{Charcillaries.Data.EntityClasses.AmenityEntity}, Charcillaries.Data.FactoryClasses.QueryFactory)"/></param>
		/// <remarks>QuerySpec specific</remarks>
		static partial void GetAdjustmentsForProjectToAmenitiesDetailsViewQs(ref System.Linq.Expressions.Expression<Func<Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView>> projectionAdjustments);
	
		/// <summary>Empty static ctor for triggering initialization of static members in a thread-safe manner</summary>
		static AmenitiesDetailsViewPersistence() { }
	
		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView which instances are projected from the results of the specified baseQuery, which returns Charcillaries.Data.EntityClasses.AmenityEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <returns>IQueryable to retrieve Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView instances</returns>
		public static IQueryable<Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView> ProjectToAmenitiesDetailsView(this IQueryable<Charcillaries.Data.EntityClasses.AmenityEntity> baseQuery) => ProjectToAmenitiesDetailsView(baseQuery, null);
		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView which instances are projected from the results of the specified baseQuery, which returns Charcillaries.Data.EntityClasses.AmenityEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="projectionParams">The optional projection parameters with optional where/orderby clauses for nested sets in the projection</param>
		/// <returns>IQueryable to retrieve Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView instances</returns>
		public static IQueryable<Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView> ProjectToAmenitiesDetailsView(this IQueryable<Charcillaries.Data.EntityClasses.AmenityEntity> baseQuery, AmenitiesDetailsViewProjectionParams projectionParams)
		{
			if(projectionParams == null)
			{
				return baseQuery.Select(_projectorExpression);
			}
			return baseQuery.Select(CreateProjectionFunc(projectionParams));
		}

		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView which instances are projected from the results of the specified baseQuery using QuerySpec, which returns Charcillaries.Data.EntityClasses.AmenityEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="qf">The query factory used to create baseQuery.</param>
		/// <returns>DynamicQuery to retrieve Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView instances</returns>
		public static DynamicQuery<Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView> ProjectToAmenitiesDetailsView(this EntityQuery<Charcillaries.Data.EntityClasses.AmenityEntity> baseQuery, Charcillaries.Data.FactoryClasses.QueryFactory qf) => ProjectToAmenitiesDetailsView(baseQuery, qf, null);
		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView which instances are projected from the results of the specified baseQuery using QuerySpec, which returns Charcillaries.Data.EntityClasses.AmenityEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="qf">The query factory used to create baseQuery.</param>
		/// <param name="projectionParams">The optional projection parameters with optional where/orderby clauses for nested sets in the projection</param>
		/// <returns>DynamicQuery to retrieve Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView instances</returns>
		public static DynamicQuery<Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView> ProjectToAmenitiesDetailsView(this EntityQuery<Charcillaries.Data.EntityClasses.AmenityEntity> baseQuery, Charcillaries.Data.FactoryClasses.QueryFactory qf, AmenitiesDetailsViewProjectionParams projectionParams=null)
		{
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToAmenitiesDetailsViewQs(ref projectionAdjustments);
			return qf.Create()
				.From(baseQuery.Select(Projection.Full).As("__BQ")
					.InnerJoin(qf.Airline.As("__L0_0")).On(AmenityFields.AirlineId.Source("__BQ").Equal(AirlineFields.Id.Source("__L0_0"))))
				.Select(LinqUtils.MergeProjectionAdjustmentsIntoProjection(() => new Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView()
				{
					Airline = new Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsViewTypes.Airline()
						{
							ContactInfo = AirlineFields.ContactInfo.Source("__L0_0").ToValue<System.String>(),
							Email = AirlineFields.Email.Source("__L0_0").ToValue<System.String>(),
							Id = AirlineFields.Id.Source("__L0_0").ToValue<System.Int32>(),
							Name = AirlineFields.Name.Source("__L0_0").ToValue<System.String>(),
							ObjectStatus = AirlineFields.ObjectStatus.Source("__L0_0").ToValue<System.Int32>(),
						},
					AirlineId = AmenityFields.AirlineId.Source("__BQ").ToValue<System.Int32>(),
					AmenityFeedbacks = (List<Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsViewTypes.AmenityFeedback>)qf.AmenityFeedback.TargetAs("__L1_0")
						.CorrelatedOver(AmenityFields.Id.Source("__BQ").Equal(AmenityFeedbackFields.AmenityId.Source("__L1_0")))
						.Where(projectionParams==null ? null : GeneralUtils.SetAliasOnPredicate(projectionParams.AmenityFeedbacksProjectionParams.QSWhereClause, "__L1_0"))
						.OrderBy(projectionParams==null ? null : GeneralUtils.SetAliasOnSortClauses(projectionParams.AmenityFeedbacksProjectionParams.QSOrderByClauses, "__L1_0"))
						.Select(() => new Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsViewTypes.AmenityFeedback()
						{
							Comment = AmenityFeedbackFields.Comment.Source("__L1_0").ToValue<System.String>(),
							DateCreated = AmenityFeedbackFields.DateCreated.Source("__L1_0").ToValue<System.DateTime>(),
							Id = AmenityFeedbackFields.Id.Source("__L1_0").ToValue<System.Int32>(),
							ObjectStatus = AmenityFeedbackFields.ObjectStatus.Source("__L1_0").ToValue<System.Int32>(),
							PassengerId = AmenityFeedbackFields.PassengerId.Source("__L1_0").ToValue<System.Int32>(),
							Rating = AmenityFeedbackFields.Rating.Source("__L1_0").ToValue<Nullable<System.Int32>>(),
						}).ToResultset(),
					Description = AmenityFields.Description.Source("__BQ").ToValue<System.String>(),
					Icon = AmenityFields.Icon.Source("__BQ").ToValue<Nullable<System.Guid>>(),
					Id = AmenityFields.Id.As("Id1").Source("__BQ").ToValue<System.Int32>(),
					Name = AmenityFields.Name.As("Name1").Source("__BQ").ToValue<System.String>(),
					ObjectStatus = AmenityFields.ObjectStatus.As("ObjectStatus1").Source("__BQ").ToValue<System.Int32>(),
					RouteAmenities = (List<Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsViewTypes.RouteAmenity>)qf.RouteAmenity.TargetAs("__L1_0")
						.CorrelatedOver(AmenityFields.Id.Source("__BQ").Equal(RouteAmenityFields.AmenityId.Source("__L1_0")))
						.Where(projectionParams==null ? null : GeneralUtils.SetAliasOnPredicate(projectionParams.RouteAmenitiesProjectionParams.QSWhereClause, "__L1_0"))
						.OrderBy(projectionParams==null ? null : GeneralUtils.SetAliasOnSortClauses(projectionParams.RouteAmenitiesProjectionParams.QSOrderByClauses, "__L1_0"))
						.Select(() => new Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsViewTypes.RouteAmenity()
						{
							AmenityId = RouteAmenityFields.AmenityId.Source("__L1_0").ToValue<System.Int32>(),
							FlightRouteId = RouteAmenityFields.FlightRouteId.Source("__L1_0").ToValue<System.Int32>(),
							ObjectStatus = RouteAmenityFields.ObjectStatus.Source("__L1_0").ToValue<System.Int32>(),
							PassengerAmenitySelections = (List<Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsViewTypes.RouteAmenityTypes.PassengerAmenitySelection>)qf.PassengerAmenitySelection.TargetAs("__L2_0")
								.CorrelatedOver(RouteAmenityFields.Id.Source("__L1_0").Equal(PassengerAmenitySelectionFields.RouteAmenityId.Source("__L2_0")))
								.Where(projectionParams==null ? null : GeneralUtils.SetAliasOnPredicate(projectionParams.RouteAmenitiesProjectionParams.PassengerAmenitySelectionsProjectionParams.QSWhereClause, "__L2_0"))
								.OrderBy(projectionParams==null ? null : GeneralUtils.SetAliasOnSortClauses(projectionParams.RouteAmenitiesProjectionParams.PassengerAmenitySelectionsProjectionParams.QSOrderByClauses, "__L2_0"))
								.Select(() => new Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsViewTypes.RouteAmenityTypes.PassengerAmenitySelection()
								{
									Confirmed = PassengerAmenitySelectionFields.Confirmed.Source("__L2_0").ToValue<Nullable<System.Int32>>(),
									Customization = PassengerAmenitySelectionFields.Customization.Source("__L2_0").ToValue<System.String>(),
									Id = PassengerAmenitySelectionFields.Id.Source("__L2_0").ToValue<System.Int32>(),
									ObjectStatus = PassengerAmenitySelectionFields.ObjectStatus.Source("__L2_0").ToValue<System.Int32>(),
									PassengerId = PassengerAmenitySelectionFields.PassengerId.Source("__L2_0").ToValue<System.Int32>(),
									Quantity = PassengerAmenitySelectionFields.Quantity.Source("__L2_0").ToValue<Nullable<System.Int32>>(),
									RouteAmenityId = PassengerAmenitySelectionFields.RouteAmenityId.Source("__L2_0").ToValue<System.Int32>(),
								}).ToResultset(),
							Price = RouteAmenityFields.Price.Source("__L1_0").ToValue<System.Single>(),
						}).ToResultset(),
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegionQS_AmenitiesDetailsView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
				}, projectionAdjustments, false));
		}

		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView which instances are projected from the Charcillaries.Data.EntityClasses.AmenityEntity entity instance specified, the root entity of the derived element returned by this method.</summary>
		/// <param name="entity">The entity to project from.</param>
		/// <returns>Charcillaries.Data.EntityClasses.AmenityEntity instance created from the specified entity instance</returns>
		public static Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView ProjectToAmenitiesDetailsView(this Charcillaries.Data.EntityClasses.AmenityEntity entity)
		{
			return _compiledProjector(entity);
		}

		private static System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.AmenityEntity, Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView>> CreateProjectionFunc(AmenitiesDetailsViewProjectionParams projectionParams=null)
		{
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.AmenityEntity, Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView>> mainProjection = p__0 => new Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView()
			{
				Airline = new Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsViewTypes.Airline()
				{
					ContactInfo = p__0.Airline.ContactInfo,
					Email = p__0.Airline.Email,
					Id = p__0.Airline.Id,
					Name = p__0.Airline.Name,
					ObjectStatus = p__0.Airline.ObjectStatus,
				},
				AirlineId = p__0.AirlineId,
				AmenityFeedbacks = p__0.AmenityFeedbacks.AsQueryable().OptionalWhere(projectionParams.AmenityFeedbacksProjectionParams.LinqWhereClause).OptionalOrderBy(projectionParams.AmenityFeedbacksProjectionParams.LinqOrderByClauses).Select(p__1 => new Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsViewTypes.AmenityFeedback()
				{
					Comment = p__1.Comment,
					DateCreated = p__1.DateCreated,
					Id = p__1.Id,
					ObjectStatus = p__1.ObjectStatus,
					PassengerId = p__1.PassengerId,
					Rating = p__1.Rating,
				}).ToList(),
				Description = p__0.Description,
				Icon = p__0.Icon,
				Id = p__0.Id,
				Name = p__0.Name,
				ObjectStatus = p__0.ObjectStatus,
				RouteAmenities = p__0.RouteAmenities.AsQueryable().OptionalWhere(projectionParams.RouteAmenitiesProjectionParams.LinqWhereClause).OptionalOrderBy(projectionParams.RouteAmenitiesProjectionParams.LinqOrderByClauses).Select(p__1 => new Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsViewTypes.RouteAmenity()
				{
					AmenityId = p__1.AmenityId,
					FlightRouteId = p__1.FlightRouteId,
					ObjectStatus = p__1.ObjectStatus,
					PassengerAmenitySelections = p__1.PassengerAmenitySelections.AsQueryable().OptionalWhere(projectionParams.RouteAmenitiesProjectionParams.PassengerAmenitySelectionsProjectionParams.LinqWhereClause).OptionalOrderBy(projectionParams.RouteAmenitiesProjectionParams.PassengerAmenitySelectionsProjectionParams.LinqOrderByClauses).Select(p__2 => new Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsViewTypes.RouteAmenityTypes.PassengerAmenitySelection()
					{
						Confirmed = p__2.Confirmed,
						Customization = p__2.Customization,
						Id = p__2.Id,
						ObjectStatus = p__2.ObjectStatus,
						PassengerId = p__2.PassengerId,
						Quantity = p__2.Quantity,
						RouteAmenityId = p__2.RouteAmenityId,
					}).ToList(),
					Price = p__1.Price,
				}).ToList(),
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegion_AmenitiesDetailsView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
			};
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.AmenityEntity, Charcillaries.Data.Views.DtoClasses.AmenitiesDetailsView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToAmenitiesDetailsView(ref projectionAdjustments);
			return LinqUtils.MergeProjectionAdjustmentsIntoProjection(mainProjection, projectionAdjustments, true);
		}
	}
}


