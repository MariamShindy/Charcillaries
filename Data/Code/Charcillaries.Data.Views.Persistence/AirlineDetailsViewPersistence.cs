//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v5.10.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SD.LLBLGen.Pro.QuerySpec;
using Charcillaries.Data.HelperClasses;
using SD.LLBLGen.Pro.LinqSupportClasses;
using SD.LLBLGen.Pro.LinqSupportClasses.DTOProjectionHelpers;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Charcillaries.Data.Views.Persistence
{
	///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
	public partial class AirlineDetailsViewProjectionParams
	{
		///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
		public partial class A_AmenitiesProjectionParams_Clauses
		{
			/// <summary>QuerySpec specific. Appends a new OrderBy clause for the Amenities embedded set.</summary>
			/// <param name="clauseToAdd">the clause to add</param>
			public void AppendQSOrderBy(ISortClause clauseToAdd) => this.QSOrderByClauses.Add(clauseToAdd);
			/// <summary>Linq specific. Appends a new OrderBy clause for the Amenities embedded set.</summary>
			/// <param name="orderByClause">The order by clause to use</param>
			/// <param name="descending">if true, the order by will be descending, otherwise ascending (default)</param>
			/// <typeparam name="TField">The type of the field to sort by</typeparam>
			public void AppendLinqOrderBy<TField>(System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.AmenityEntity, TField>> orderByClause, bool descending = false) => this.LinqOrderByClauses.Add(new SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>((System.Linq.Expressions.Expression)orderByClause, descending));
			internal List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>> LinqOrderByClauses { get; } = new List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>>();
			internal List<ISortClause> QSOrderByClauses { get; set; } = new List<ISortClause>();
			/// <summary>Linq specific. Custom where clause to be used for when the Amenities embedded set is fetched</summary>
			public System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.AmenityEntity, bool>> LinqWhereClause { get; set; }
			/// <summary>QuerySpec specific. Custom where clause to be used for when the Amenities embedded set is fetched</summary>
			public IPredicate QSWhereClause { get; set; }
		}

		/// <summary>Projection parameters to configure where / orderby clauses for the nested member 'Amenities'</summary>
		public A_AmenitiesProjectionParams_Clauses AmenitiesProjectionParams { get; } = new A_AmenitiesProjectionParams_Clauses();
	}

	/// <summary>Static class for (extension) methods for fetching and projecting instances of Charcillaries.Data.Views.DtoClasses.AirlineDetailsView from the entity model.</summary>
	public static partial class AirlineDetailsViewPersistence
	{
		private static readonly System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.AirlineEntity, Charcillaries.Data.Views.DtoClasses.AirlineDetailsView>> _projectorExpression = CreateProjectionFunc();
		private static readonly Func<Charcillaries.Data.EntityClasses.AirlineEntity, Charcillaries.Data.Views.DtoClasses.AirlineDetailsView> _compiledProjector = CreateProjectionFunc().Compile();
		/// <summary>Linq specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToAirlineDetailsView(System.Linq.IQueryable{Charcillaries.Data.EntityClasses.AirlineEntity})"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="CreateProjectionFunc"/></param>
		/// <remarks>Linq specific</remarks>
		static partial void GetAdjustmentsForProjectToAirlineDetailsView(ref System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.AirlineEntity, Charcillaries.Data.Views.DtoClasses.AirlineDetailsView>> projectionAdjustments);
		/// <summary>QuerySpec specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToAirlineDetailsView(EntityQuery{Charcillaries.Data.EntityClasses.AirlineEntity}, Charcillaries.Data.FactoryClasses.QueryFactory)"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="ProjectToAirlineDetailsView(EntityQuery{Charcillaries.Data.EntityClasses.AirlineEntity}, Charcillaries.Data.FactoryClasses.QueryFactory)"/></param>
		/// <remarks>QuerySpec specific</remarks>
		static partial void GetAdjustmentsForProjectToAirlineDetailsViewQs(ref System.Linq.Expressions.Expression<Func<Charcillaries.Data.Views.DtoClasses.AirlineDetailsView>> projectionAdjustments);
	
		/// <summary>Empty static ctor for triggering initialization of static members in a thread-safe manner</summary>
		static AirlineDetailsViewPersistence() { }
	
		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.AirlineDetailsView which instances are projected from the results of the specified baseQuery, which returns Charcillaries.Data.EntityClasses.AirlineEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <returns>IQueryable to retrieve Charcillaries.Data.Views.DtoClasses.AirlineDetailsView instances</returns>
		public static IQueryable<Charcillaries.Data.Views.DtoClasses.AirlineDetailsView> ProjectToAirlineDetailsView(this IQueryable<Charcillaries.Data.EntityClasses.AirlineEntity> baseQuery) => ProjectToAirlineDetailsView(baseQuery, null);
		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.AirlineDetailsView which instances are projected from the results of the specified baseQuery, which returns Charcillaries.Data.EntityClasses.AirlineEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="projectionParams">The optional projection parameters with optional where/orderby clauses for nested sets in the projection</param>
		/// <returns>IQueryable to retrieve Charcillaries.Data.Views.DtoClasses.AirlineDetailsView instances</returns>
		public static IQueryable<Charcillaries.Data.Views.DtoClasses.AirlineDetailsView> ProjectToAirlineDetailsView(this IQueryable<Charcillaries.Data.EntityClasses.AirlineEntity> baseQuery, AirlineDetailsViewProjectionParams projectionParams)
		{
			if(projectionParams == null)
			{
				return baseQuery.Select(_projectorExpression);
			}
			return baseQuery.Select(CreateProjectionFunc(projectionParams));
		}

		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.AirlineDetailsView which instances are projected from the results of the specified baseQuery using QuerySpec, which returns Charcillaries.Data.EntityClasses.AirlineEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="qf">The query factory used to create baseQuery.</param>
		/// <returns>DynamicQuery to retrieve Charcillaries.Data.Views.DtoClasses.AirlineDetailsView instances</returns>
		public static DynamicQuery<Charcillaries.Data.Views.DtoClasses.AirlineDetailsView> ProjectToAirlineDetailsView(this EntityQuery<Charcillaries.Data.EntityClasses.AirlineEntity> baseQuery, Charcillaries.Data.FactoryClasses.QueryFactory qf) => ProjectToAirlineDetailsView(baseQuery, qf, null);
		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.AirlineDetailsView which instances are projected from the results of the specified baseQuery using QuerySpec, which returns Charcillaries.Data.EntityClasses.AirlineEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="qf">The query factory used to create baseQuery.</param>
		/// <param name="projectionParams">The optional projection parameters with optional where/orderby clauses for nested sets in the projection</param>
		/// <returns>DynamicQuery to retrieve Charcillaries.Data.Views.DtoClasses.AirlineDetailsView instances</returns>
		public static DynamicQuery<Charcillaries.Data.Views.DtoClasses.AirlineDetailsView> ProjectToAirlineDetailsView(this EntityQuery<Charcillaries.Data.EntityClasses.AirlineEntity> baseQuery, Charcillaries.Data.FactoryClasses.QueryFactory qf, AirlineDetailsViewProjectionParams projectionParams=null)
		{
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.Views.DtoClasses.AirlineDetailsView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToAirlineDetailsViewQs(ref projectionAdjustments);
			return qf.Create()
				.From(baseQuery.Select(Projection.Full).As("__BQ"))
				.Select(LinqUtils.MergeProjectionAdjustmentsIntoProjection(() => new Charcillaries.Data.Views.DtoClasses.AirlineDetailsView()
				{
					Amenities = (List<Charcillaries.Data.Views.DtoClasses.AirlineDetailsViewTypes.Amenity>)qf.Amenity.TargetAs("__L1_0")
						.CorrelatedOver(AirlineFields.Id.Source("__BQ").Equal(AmenityFields.AirlineId.Source("__L1_0")))
						.Where(projectionParams==null ? null : GeneralUtils.SetAliasOnPredicate(projectionParams.AmenitiesProjectionParams.QSWhereClause, "__L1_0"))
						.OrderBy(projectionParams==null ? null : GeneralUtils.SetAliasOnSortClauses(projectionParams.AmenitiesProjectionParams.QSOrderByClauses, "__L1_0"))
						.Select(() => new Charcillaries.Data.Views.DtoClasses.AirlineDetailsViewTypes.Amenity()
						{
							Name = AmenityFields.Name.Source("__L1_0").ToValue<System.String>(),
						}).ToResultset(),
					ContactInfo = AirlineFields.ContactInfo.Source("__BQ").ToValue<System.String>(),
					Email = AirlineFields.Email.Source("__BQ").ToValue<System.String>(),
					Id = AirlineFields.Id.Source("__BQ").ToValue<System.Int32>(),
					Name = AirlineFields.Name.Source("__BQ").ToValue<System.String>(),
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegionQS_AirlineDetailsView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
				}, projectionAdjustments, false));
		}

		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.AirlineDetailsView which instances are projected from the Charcillaries.Data.EntityClasses.AirlineEntity entity instance specified, the root entity of the derived element returned by this method.</summary>
		/// <param name="entity">The entity to project from.</param>
		/// <returns>Charcillaries.Data.EntityClasses.AirlineEntity instance created from the specified entity instance</returns>
		public static Charcillaries.Data.Views.DtoClasses.AirlineDetailsView ProjectToAirlineDetailsView(this Charcillaries.Data.EntityClasses.AirlineEntity entity)
		{
			return _compiledProjector(entity);
		}

		private static System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.AirlineEntity, Charcillaries.Data.Views.DtoClasses.AirlineDetailsView>> CreateProjectionFunc(AirlineDetailsViewProjectionParams projectionParams=null)
		{
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.AirlineEntity, Charcillaries.Data.Views.DtoClasses.AirlineDetailsView>> mainProjection = p__0 => new Charcillaries.Data.Views.DtoClasses.AirlineDetailsView()
			{
				Amenities = p__0.Amenities.AsQueryable().OptionalWhere(projectionParams.AmenitiesProjectionParams.LinqWhereClause).OptionalOrderBy(projectionParams.AmenitiesProjectionParams.LinqOrderByClauses).Select(p__1 => new Charcillaries.Data.Views.DtoClasses.AirlineDetailsViewTypes.Amenity()
				{
					Name = p__1.Name,
				}).ToList(),
				ContactInfo = p__0.ContactInfo,
				Email = p__0.Email,
				Id = p__0.Id,
				Name = p__0.Name,
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegion_AirlineDetailsView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
			};
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.AirlineEntity, Charcillaries.Data.Views.DtoClasses.AirlineDetailsView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToAirlineDetailsView(ref projectionAdjustments);
			return LinqUtils.MergeProjectionAdjustmentsIntoProjection(mainProjection, projectionAdjustments, true);
		}
	}
}


