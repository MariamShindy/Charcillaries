//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.10.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Charcillaries.Data.HelperClasses;
using Charcillaries.Data.FactoryClasses;
using Charcillaries.Data.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Charcillaries.Data.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Person'.<br/><br/></summary>
	[Serializable]
	public partial class PersonEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<PassengerEntity> _passengers;
		private EntityCollection<UserEntity> _users;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static PersonEntityStaticMetaData _staticMetaData = new PersonEntityStaticMetaData();
		private static PersonRelations _relationsFactory = new PersonRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Passengers</summary>
			public static readonly string Passengers = "Passengers";
			/// <summary>Member name Users</summary>
			public static readonly string Users = "Users";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class PersonEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public PersonEntityStaticMetaData()
			{
				SetEntityCoreInfo("PersonEntity", InheritanceHierarchyType.None, false, (int)Charcillaries.Data.EntityType.PersonEntity, typeof(PersonEntity), typeof(PersonEntityFactory), false);
				AddNavigatorMetaData<PersonEntity, EntityCollection<PassengerEntity>>("Passengers", a => a._passengers, (a, b) => a._passengers = b, a => a.Passengers, () => new PersonRelations().PassengerEntityUsingPersonId, typeof(PassengerEntity), (int)Charcillaries.Data.EntityType.PassengerEntity);
				AddNavigatorMetaData<PersonEntity, EntityCollection<UserEntity>>("Users", a => a._users, (a, b) => a._users = b, a => a.Users, () => new PersonRelations().UserEntityUsingPersonId, typeof(UserEntity), (int)Charcillaries.Data.EntityType.UserEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static PersonEntity()
		{
		}

		/// <summary> CTor</summary>
		public PersonEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public PersonEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this PersonEntity</param>
		public PersonEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Person which data should be fetched into this Person object</param>
		public PersonEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Person which data should be fetched into this Person object</param>
		/// <param name="validator">The custom validator object for this PersonEntity</param>
		public PersonEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected PersonEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Passenger' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPassengers() { return CreateRelationInfoForNavigator("Passengers"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUsers() { return CreateRelationInfoForNavigator("Users"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this PersonEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static PersonRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Passenger' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPassengers { get { return _staticMetaData.GetPrefetchPathElement("Passengers", CommonEntityBase.CreateEntityCollection<PassengerEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUsers { get { return _staticMetaData.GetPrefetchPathElement("Users", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>The Email property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "person"."email".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Email
		{
			get { return (System.String)GetValue((int)PersonFieldIndex.Email, true); }
			set	{ SetValue((int)PersonFieldIndex.Email, value); }
		}

		/// <summary>The FirstName property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "person"."first_name".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String FirstName
		{
			get { return (System.String)GetValue((int)PersonFieldIndex.FirstName, true); }
			set	{ SetValue((int)PersonFieldIndex.FirstName, value); }
		}

		/// <summary>The Id property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "person"."id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)PersonFieldIndex.Id, true); }
			set { SetValue((int)PersonFieldIndex.Id, value); }		}

		/// <summary>The LastName property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "person"."last_name".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String LastName
		{
			get { return (System.String)GetValue((int)PersonFieldIndex.LastName, true); }
			set	{ SetValue((int)PersonFieldIndex.LastName, value); }
		}

		/// <summary>The ObjectStatus property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "person"."object_status".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ObjectStatus
		{
			get { return (System.Int32)GetValue((int)PersonFieldIndex.ObjectStatus, true); }
			set	{ SetValue((int)PersonFieldIndex.ObjectStatus, value); }
		}

		/// <summary>The PassportNumber property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "person"."passport_number".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String PassportNumber
		{
			get { return (System.String)GetValue((int)PersonFieldIndex.PassportNumber, true); }
			set	{ SetValue((int)PersonFieldIndex.PassportNumber, value); }
		}

		/// <summary>The PhoneNumber property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "person"."phone_number".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 30.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String PhoneNumber
		{
			get { return (System.String)GetValue((int)PersonFieldIndex.PhoneNumber, true); }
			set	{ SetValue((int)PersonFieldIndex.PhoneNumber, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'PassengerEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(PassengerEntity))]
		public virtual EntityCollection<PassengerEntity> Passengers { get { return GetOrCreateEntityCollection<PassengerEntity, PassengerEntityFactory>("Person", true, false, ref _passengers); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'UserEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(UserEntity))]
		public virtual EntityCollection<UserEntity> Users { get { return GetOrCreateEntityCollection<UserEntity, UserEntityFactory>("Person", true, false, ref _users); } }

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Charcillaries.Data
{
	public enum PersonFieldIndex
	{
		///<summary>Email. </summary>
		Email,
		///<summary>FirstName. </summary>
		FirstName,
		///<summary>Id. </summary>
		Id,
		///<summary>LastName. </summary>
		LastName,
		///<summary>ObjectStatus. </summary>
		ObjectStatus,
		///<summary>PassportNumber. </summary>
		PassportNumber,
		///<summary>PhoneNumber. </summary>
		PhoneNumber,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Charcillaries.Data.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Person. </summary>
	public partial class PersonRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between PersonEntity and PassengerEntity over the 1:n relation they have, using the relation between the fields: Person.Id - Passenger.PersonId</summary>
		public virtual IEntityRelation PassengerEntityUsingPersonId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Passengers", true, new[] { PersonFields.Id, PassengerFields.PersonId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between PersonEntity and UserEntity over the 1:n relation they have, using the relation between the fields: Person.Id - User.PersonId</summary>
		public virtual IEntityRelation UserEntityUsingPersonId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Users", true, new[] { PersonFields.Id, UserFields.PersonId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticPersonRelations
	{
		internal static readonly IEntityRelation PassengerEntityUsingPersonIdStatic = new PersonRelations().PassengerEntityUsingPersonId;
		internal static readonly IEntityRelation UserEntityUsingPersonIdStatic = new PersonRelations().UserEntityUsingPersonId;

		/// <summary>CTor</summary>
		static StaticPersonRelations() { }
	}
}
