//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.10.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Charcillaries.Data.HelperClasses;
using Charcillaries.Data.FactoryClasses;
using Charcillaries.Data.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Charcillaries.Data.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Passenger'.<br/><br/></summary>
	[Serializable]
	public partial class PassengerEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<AmenityFeedbackEntity> _amenityFeedbacks;
		private EntityCollection<PassengerAmenitySelectionEntity> _passengerAmenitySelections;
		private EntityCollection<RouteFlightFeedbackEntity> _routeFlightFeedbacks;
		private FlightEntity _flight;
		private PersonEntity _person;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static PassengerEntityStaticMetaData _staticMetaData = new PassengerEntityStaticMetaData();
		private static PassengerRelations _relationsFactory = new PassengerRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Flight</summary>
			public static readonly string Flight = "Flight";
			/// <summary>Member name Person</summary>
			public static readonly string Person = "Person";
			/// <summary>Member name AmenityFeedbacks</summary>
			public static readonly string AmenityFeedbacks = "AmenityFeedbacks";
			/// <summary>Member name PassengerAmenitySelections</summary>
			public static readonly string PassengerAmenitySelections = "PassengerAmenitySelections";
			/// <summary>Member name RouteFlightFeedbacks</summary>
			public static readonly string RouteFlightFeedbacks = "RouteFlightFeedbacks";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class PassengerEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public PassengerEntityStaticMetaData()
			{
				SetEntityCoreInfo("PassengerEntity", InheritanceHierarchyType.None, false, (int)Charcillaries.Data.EntityType.PassengerEntity, typeof(PassengerEntity), typeof(PassengerEntityFactory), false);
				AddNavigatorMetaData<PassengerEntity, EntityCollection<AmenityFeedbackEntity>>("AmenityFeedbacks", a => a._amenityFeedbacks, (a, b) => a._amenityFeedbacks = b, a => a.AmenityFeedbacks, () => new PassengerRelations().AmenityFeedbackEntityUsingPassengerId, typeof(AmenityFeedbackEntity), (int)Charcillaries.Data.EntityType.AmenityFeedbackEntity);
				AddNavigatorMetaData<PassengerEntity, EntityCollection<PassengerAmenitySelectionEntity>>("PassengerAmenitySelections", a => a._passengerAmenitySelections, (a, b) => a._passengerAmenitySelections = b, a => a.PassengerAmenitySelections, () => new PassengerRelations().PassengerAmenitySelectionEntityUsingPassengerId, typeof(PassengerAmenitySelectionEntity), (int)Charcillaries.Data.EntityType.PassengerAmenitySelectionEntity);
				AddNavigatorMetaData<PassengerEntity, EntityCollection<RouteFlightFeedbackEntity>>("RouteFlightFeedbacks", a => a._routeFlightFeedbacks, (a, b) => a._routeFlightFeedbacks = b, a => a.RouteFlightFeedbacks, () => new PassengerRelations().RouteFlightFeedbackEntityUsingPassengerId, typeof(RouteFlightFeedbackEntity), (int)Charcillaries.Data.EntityType.RouteFlightFeedbackEntity);
				AddNavigatorMetaData<PassengerEntity, FlightEntity>("Flight", "Passengers", (a, b) => a._flight = b, a => a._flight, (a, b) => a.Flight = b, Charcillaries.Data.RelationClasses.StaticPassengerRelations.FlightEntityUsingFlightIdStatic, ()=>new PassengerRelations().FlightEntityUsingFlightId, null, new int[] { (int)PassengerFieldIndex.FlightId }, null, true, (int)Charcillaries.Data.EntityType.FlightEntity);
				AddNavigatorMetaData<PassengerEntity, PersonEntity>("Person", "Passengers", (a, b) => a._person = b, a => a._person, (a, b) => a.Person = b, Charcillaries.Data.RelationClasses.StaticPassengerRelations.PersonEntityUsingPersonIdStatic, ()=>new PassengerRelations().PersonEntityUsingPersonId, null, new int[] { (int)PassengerFieldIndex.PersonId }, null, true, (int)Charcillaries.Data.EntityType.PersonEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static PassengerEntity()
		{
		}

		/// <summary> CTor</summary>
		public PassengerEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public PassengerEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this PassengerEntity</param>
		public PassengerEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Passenger which data should be fetched into this Passenger object</param>
		public PassengerEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Passenger which data should be fetched into this Passenger object</param>
		/// <param name="validator">The custom validator object for this PassengerEntity</param>
		public PassengerEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected PassengerEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'AmenityFeedback' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAmenityFeedbacks() { return CreateRelationInfoForNavigator("AmenityFeedbacks"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'PassengerAmenitySelection' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPassengerAmenitySelections() { return CreateRelationInfoForNavigator("PassengerAmenitySelections"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'RouteFlightFeedback' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRouteFlightFeedbacks() { return CreateRelationInfoForNavigator("RouteFlightFeedbacks"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Flight' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoFlight() { return CreateRelationInfoForNavigator("Flight"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Person' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPerson() { return CreateRelationInfoForNavigator("Person"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this PassengerEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static PassengerRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AmenityFeedback' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAmenityFeedbacks { get { return _staticMetaData.GetPrefetchPathElement("AmenityFeedbacks", CommonEntityBase.CreateEntityCollection<AmenityFeedbackEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PassengerAmenitySelection' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPassengerAmenitySelections { get { return _staticMetaData.GetPrefetchPathElement("PassengerAmenitySelections", CommonEntityBase.CreateEntityCollection<PassengerAmenitySelectionEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'RouteFlightFeedback' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRouteFlightFeedbacks { get { return _staticMetaData.GetPrefetchPathElement("RouteFlightFeedbacks", CommonEntityBase.CreateEntityCollection<RouteFlightFeedbackEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Flight' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathFlight { get { return _staticMetaData.GetPrefetchPathElement("Flight", CommonEntityBase.CreateEntityCollection<FlightEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Person' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPerson { get { return _staticMetaData.GetPrefetchPathElement("Person", CommonEntityBase.CreateEntityCollection<PersonEntity>()); } }

		/// <summary>The FlightId property of the Entity Passenger<br/><br/></summary>
		/// <remarks>Mapped on  table field: "passenger"."flight_id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 FlightId
		{
			get { return (System.Int32)GetValue((int)PassengerFieldIndex.FlightId, true); }
			set	{ SetValue((int)PassengerFieldIndex.FlightId, value); }
		}

		/// <summary>The Id property of the Entity Passenger<br/><br/></summary>
		/// <remarks>Mapped on  table field: "passenger"."id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)PassengerFieldIndex.Id, true); }
			set { SetValue((int)PassengerFieldIndex.Id, value); }		}

		/// <summary>The ObjectStatus property of the Entity Passenger<br/><br/></summary>
		/// <remarks>Mapped on  table field: "passenger"."object_status".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ObjectStatus
		{
			get { return (System.Int32)GetValue((int)PassengerFieldIndex.ObjectStatus, true); }
			set	{ SetValue((int)PassengerFieldIndex.ObjectStatus, value); }
		}

		/// <summary>The PaymentAmount property of the Entity Passenger<br/><br/></summary>
		/// <remarks>Mapped on  table field: "passenger"."payment_amount".<br/>Table field type characteristics (type, precision, scale, length): Real, 24, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Single> PaymentAmount
		{
			get { return (Nullable<System.Single>)GetValue((int)PassengerFieldIndex.PaymentAmount, false); }
			set	{ SetValue((int)PassengerFieldIndex.PaymentAmount, value); }
		}

		/// <summary>The PaymentConfirmation property of the Entity Passenger<br/><br/></summary>
		/// <remarks>Mapped on  table field: "passenger"."payment_confirmation".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String PaymentConfirmation
		{
			get { return (System.String)GetValue((int)PassengerFieldIndex.PaymentConfirmation, true); }
			set	{ SetValue((int)PassengerFieldIndex.PaymentConfirmation, value); }
		}

		/// <summary>The PaymentConfirmationDate property of the Entity Passenger<br/><br/></summary>
		/// <remarks>Mapped on  table field: "passenger"."payment_confirmation_date".<br/>Table field type characteristics (type, precision, scale, length): Timestamp, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> PaymentConfirmationDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)PassengerFieldIndex.PaymentConfirmationDate, false); }
			set	{ SetValue((int)PassengerFieldIndex.PaymentConfirmationDate, value); }
		}

		/// <summary>The PersonId property of the Entity Passenger<br/><br/></summary>
		/// <remarks>Mapped on  table field: "passenger"."person_id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 PersonId
		{
			get { return (System.Int32)GetValue((int)PassengerFieldIndex.PersonId, true); }
			set	{ SetValue((int)PassengerFieldIndex.PersonId, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'AmenityFeedbackEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(AmenityFeedbackEntity))]
		public virtual EntityCollection<AmenityFeedbackEntity> AmenityFeedbacks { get { return GetOrCreateEntityCollection<AmenityFeedbackEntity, AmenityFeedbackEntityFactory>("Passenger", true, false, ref _amenityFeedbacks); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'PassengerAmenitySelectionEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(PassengerAmenitySelectionEntity))]
		public virtual EntityCollection<PassengerAmenitySelectionEntity> PassengerAmenitySelections { get { return GetOrCreateEntityCollection<PassengerAmenitySelectionEntity, PassengerAmenitySelectionEntityFactory>("Passenger", true, false, ref _passengerAmenitySelections); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'RouteFlightFeedbackEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(RouteFlightFeedbackEntity))]
		public virtual EntityCollection<RouteFlightFeedbackEntity> RouteFlightFeedbacks { get { return GetOrCreateEntityCollection<RouteFlightFeedbackEntity, RouteFlightFeedbackEntityFactory>("Passenger", true, false, ref _routeFlightFeedbacks); } }

		/// <summary>Gets / sets related entity of type 'FlightEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual FlightEntity Flight
		{
			get { return _flight; }
			set { SetSingleRelatedEntityNavigator(value, "Flight"); }
		}

		/// <summary>Gets / sets related entity of type 'PersonEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual PersonEntity Person
		{
			get { return _person; }
			set { SetSingleRelatedEntityNavigator(value, "Person"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Charcillaries.Data
{
	public enum PassengerFieldIndex
	{
		///<summary>FlightId. </summary>
		FlightId,
		///<summary>Id. </summary>
		Id,
		///<summary>ObjectStatus. </summary>
		ObjectStatus,
		///<summary>PaymentAmount. </summary>
		PaymentAmount,
		///<summary>PaymentConfirmation. </summary>
		PaymentConfirmation,
		///<summary>PaymentConfirmationDate. </summary>
		PaymentConfirmationDate,
		///<summary>PersonId. </summary>
		PersonId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Charcillaries.Data.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Passenger. </summary>
	public partial class PassengerRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between PassengerEntity and AmenityFeedbackEntity over the 1:n relation they have, using the relation between the fields: Passenger.Id - AmenityFeedback.PassengerId</summary>
		public virtual IEntityRelation AmenityFeedbackEntityUsingPassengerId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "AmenityFeedbacks", true, new[] { PassengerFields.Id, AmenityFeedbackFields.PassengerId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between PassengerEntity and PassengerAmenitySelectionEntity over the 1:n relation they have, using the relation between the fields: Passenger.Id - PassengerAmenitySelection.PassengerId</summary>
		public virtual IEntityRelation PassengerAmenitySelectionEntityUsingPassengerId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "PassengerAmenitySelections", true, new[] { PassengerFields.Id, PassengerAmenitySelectionFields.PassengerId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between PassengerEntity and RouteFlightFeedbackEntity over the 1:n relation they have, using the relation between the fields: Passenger.Id - RouteFlightFeedback.PassengerId</summary>
		public virtual IEntityRelation RouteFlightFeedbackEntityUsingPassengerId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "RouteFlightFeedbacks", true, new[] { PassengerFields.Id, RouteFlightFeedbackFields.PassengerId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between PassengerEntity and FlightEntity over the m:1 relation they have, using the relation between the fields: Passenger.FlightId - Flight.Id</summary>
		public virtual IEntityRelation FlightEntityUsingFlightId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Flight", false, new[] { FlightFields.Id, PassengerFields.FlightId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between PassengerEntity and PersonEntity over the m:1 relation they have, using the relation between the fields: Passenger.PersonId - Person.Id</summary>
		public virtual IEntityRelation PersonEntityUsingPersonId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Person", false, new[] { PersonFields.Id, PassengerFields.PersonId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticPassengerRelations
	{
		internal static readonly IEntityRelation AmenityFeedbackEntityUsingPassengerIdStatic = new PassengerRelations().AmenityFeedbackEntityUsingPassengerId;
		internal static readonly IEntityRelation PassengerAmenitySelectionEntityUsingPassengerIdStatic = new PassengerRelations().PassengerAmenitySelectionEntityUsingPassengerId;
		internal static readonly IEntityRelation RouteFlightFeedbackEntityUsingPassengerIdStatic = new PassengerRelations().RouteFlightFeedbackEntityUsingPassengerId;
		internal static readonly IEntityRelation FlightEntityUsingFlightIdStatic = new PassengerRelations().FlightEntityUsingFlightId;
		internal static readonly IEntityRelation PersonEntityUsingPersonIdStatic = new PassengerRelations().PersonEntityUsingPersonId;

		/// <summary>CTor</summary>
		static StaticPassengerRelations() { }
	}
}
