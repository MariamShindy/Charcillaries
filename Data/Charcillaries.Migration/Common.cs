using FluentMigrator.Builders.Alter.Table;
using FluentMigrator.Builders.Create.Table;

namespace Charcillaries.Migration;

public static class Constants
{
    public const int CreatedByUserId = 1;
}

public static class StringLength
{
    public const int One = 1;
    public const int Two = 2;
    public const int Three = 3;
    public const int Five = 5;
    public const int Twelve = 12;
    public const int Thirteen = 13;
    public const int Fourteen = 14;
    public const int Fifteen = 15;
    public const int Twenty = 20;
    public const int Forty = 40;
    public const int Fifty = 50;
    public const int FiftyFive = 55;
    public const int OneHundred = 100;
    public const int TwoHundred = 200;
    public const int TwoHundredFiftyFive = 255;
    public const int FourHundredFifty = 450;
    public const int FiveHundred = 500;
    public const int FiveHundredFifty = 550;
    public const int SevenHundredFifty = 750;
    public const int Thousand = 1000;
    public const int TwoThousand = 2000;
    public const int TenThousand = 10000;
    public const int SuperExtraLong = 30000;
    public const int Max = SuperExtraLong * 10;
    public const int TwoHundredFifty = 250;
}

public static class PostgresSpecificType
{
    public const string Geometry = "geometry";
    public const string Identity = "int GENERATED BY DEFAULT AS IDENTITY";
    public const string IdentitySmall = "smallint GENERATED BY DEFAULT AS IDENTITY";
    public const string IdentityBig = "bigint GENERATED BY DEFAULT AS IDENTITY";
    public const string Jsonb = "jsonb";
    public const string Uuid = "uuid";
    public const string Time = "time";
    public const string Timestampz = "timestamptz";
    public const string Text = "text";
}

public static class SqlServerSpecificType
{
    public const string Identity = "Int GENERATED BY DEFAULT AS IDENTITY";
    public const string VarBinaryMax = "varbinary(MAX)";

    public static string NVarChar(int? length = null)
    {
        return length == null ? "NVARCHAR(MAX)" : $"NVARCHAR({length})";
    }
}

internal static class PostgresFunction
{
    // https://www.postgresql.org/docs/8.1/static/functions-datetime.html
    public static readonly ServerFunction NowTimestampzUTC = new("(now() at time zone 'utc')");

    // https://www.postgresql.org/docs/10/static/uuid-ossp.html
    public static readonly ServerFunction GenerateRandomUuidV4 = new("gen_random_uuid()");
}

public static class FluentMigratorExtensions
{
    public static ICreateTableColumnOptionOrWithColumnSyntax AutoId(this ICreateTableWithColumnOrSchemaSyntax self)
    {
        return self.WithColumn("id").AsCustom(PostgresSpecificType.Identity).NotNullable().PrimaryKey();
    }

    internal static ICreateTableColumnOptionOrWithColumnSyntax AutoIdSmall(
        this ICreateTableWithColumnOrSchemaSyntax self)
    {
        return self.WithColumn("id").AsCustom(PostgresSpecificType.IdentitySmall).NotNullable().PrimaryKey();
    }

    internal static ICreateTableColumnOptionOrWithColumnSyntax AutoIdBig(this ICreateTableWithColumnOrSchemaSyntax self)
    {
        return self.WithColumn("id").AsCustom(PostgresSpecificType.IdentityBig).NotNullable().PrimaryKey();
    }

    internal static ICreateTableColumnOptionOrWithColumnSyntax IdUuid(this ICreateTableWithColumnOrSchemaSyntax self)
    {
        return self.WithColumn("id").AsCustom(PostgresSpecificType.Uuid).NotNullable().PrimaryKey();
    }

    public static ICreateTableColumnOptionOrWithColumnSyntax Uuid(this ICreateTableColumnOptionOrWithColumnSyntax self,
        bool withDefault = true, bool isNullable = false)
    {
        if (!withDefault)
            return isNullable
                ? self.WithColumn("uuid").AsCustom(PostgresSpecificType.Uuid).Nullable().Unique()
                : self.WithColumn("uuid").AsCustom(PostgresSpecificType.Uuid).NotNullable().Unique();
        if (isNullable)
            return self.WithColumn("uuid").AsCustom(PostgresSpecificType.Uuid).Nullable()
                .WithDefaultValue(new ServerFunction($"{PostgresFunction.GenerateRandomUuidV4}")).Unique();
        return self.WithColumn("uuid").AsCustom(PostgresSpecificType.Uuid).NotNullable()
            .WithDefaultValue(new ServerFunction($"{PostgresFunction.GenerateRandomUuidV4}")).Unique();
    }

    public static ICreateTableColumnOptionOrWithColumnSyntax Uuid(this ICreateTableColumnOptionOrWithColumnSyntax self,
        string name, bool withDefault = true, bool isNullable = false)
    {
        if (!withDefault)
            return isNullable
                ? self.WithColumn(name).AsCustom(PostgresSpecificType.Uuid).Nullable().Unique()
                : self.WithColumn(name).AsCustom(PostgresSpecificType.Uuid).NotNullable().Unique();
        if (isNullable)
            return self.WithColumn(name).AsCustom(PostgresSpecificType.Uuid).Nullable()
                .WithDefaultValue(new ServerFunction($"{PostgresFunction.GenerateRandomUuidV4}")).Unique();
        return self.WithColumn(name).AsCustom(PostgresSpecificType.Uuid).NotNullable()
            .WithDefaultValue(new ServerFunction($"{PostgresFunction.GenerateRandomUuidV4}")).Unique();
    }

    public static ICreateTableColumnOptionOrWithColumnSyntax IdSmall(this ICreateTableWithColumnOrSchemaSyntax self)
    {
        return self.WithColumn("id").AsInt16().NotNullable().PrimaryKey();
    }

    public static ICreateTableColumnOptionOrWithColumnSyntax IdInt(this ICreateTableWithColumnOrSchemaSyntax self)
    {
        return self.WithColumn("id").AsInt32().NotNullable().PrimaryKey();
    }

    public static ICreateTableColumnOptionOrWithColumnSyntax IdBig(this ICreateTableWithColumnOrSchemaSyntax self)
    {
        return self.WithColumn("id").AsInt64().NotNullable().PrimaryKey();
    }

    public static ICreateTableColumnOptionOrWithColumnSyntax ObjectStatus(
        this ICreateTableWithColumnOrSchemaSyntax self)
    {
        return self.WithColumn("object_status").AsInt32().NotNullable().WithDefaultValue(1).Indexed();
    }

    public static ICreateTableColumnOptionOrWithColumnSyntax ObjectStatus(
        this ICreateTableColumnOptionOrWithColumnSyntax self)
    {
        return self.WithColumn("object_status").AsInt32().NotNullable().WithDefaultValue(1).Indexed();
    }

    public static IAlterTableColumnOptionOrAddColumnOrAlterColumnSyntax ObjectStatus(
        this IAlterTableColumnOptionOrAddColumnOrAlterColumnSyntax self)
    {
        return self.AddColumn("object_status").AsInt32().NotNullable().WithDefaultValue(1).Indexed();
    }

    /// <summary>
    ///     If the column is not primary key, an index will be added.
    /// </summary>
    /// <param name="self"></param>
    /// <param name="name"></param>
    /// <param name="foreignTable"></param>
    /// <param name="isNullable"></param>
    /// <param name="isPK"></param>
    /// <returns></returns>
    public static ICreateTableColumnOptionOrWithColumnSyntax IntForeignKeyIndexed(
        this ICreateTableColumnOptionOrWithColumnSyntax self,
        string name, string foreignTable, bool isNullable, bool isPK)
    {
        ICreateTableColumnOptionOrWithColumnSyntax col = isNullable
            ? self.WithColumn(name).AsInt32().Nullable().ForeignKey(foreignTable, "id")
            : self.WithColumn(name).AsInt32().NotNullable().ForeignKey(foreignTable, "id");

        if (isPK)
            col.PrimaryKey();
        else
            col.Indexed();

        return self;
    }

    public static ICreateTableColumnOptionOrWithColumnSyntax SmallIntForeignKeyIndexed(
        this ICreateTableColumnOptionOrWithColumnSyntax self,
        string name, string foreignTable, bool isNullable, bool isPK)
    {
        ICreateTableColumnOptionOrWithColumnSyntax col = isNullable
            ? self.WithColumn(name).AsInt16().Nullable().ForeignKey(foreignTable, "id")
            : self.WithColumn(name).AsInt16().NotNullable().ForeignKey(foreignTable, "id");

        if (isPK)
            col.PrimaryKey();
        else
            col.Indexed();

        return self;
    }

    public static ICreateTableWithColumnOrSchemaSyntax IntForeignKeyIndexed(
        this ICreateTableWithColumnOrSchemaSyntax self,
        string name, string foreignTable, bool isNullable, bool isPK)
    {
        ICreateTableColumnOptionOrWithColumnSyntax col = isNullable
            ? self.WithColumn(name).AsInt32().Nullable().ForeignKey(foreignTable, "id")
            : self.WithColumn(name).AsInt32().NotNullable().ForeignKey(foreignTable, "id");

        if (isPK)
            col.PrimaryKey();
        else
            col.Indexed();

        return self;
    }

    public static ICreateTableWithColumnOrSchemaSyntax SmallIntForeignKeyIndexed(
        this ICreateTableWithColumnOrSchemaSyntax self,
        string name, string foreignTable, bool isNullable, bool isPK)
    {
        ICreateTableColumnOptionOrWithColumnSyntax col = isNullable
            ? self.WithColumn(name).AsInt16().Nullable().ForeignKey(foreignTable, "id")
            : self.WithColumn(name).AsInt16().NotNullable().ForeignKey(foreignTable, "id");

        if (isPK)
            col.PrimaryKey();
        else
            col.Indexed();

        return self;
    }

    public static IAlterTableAddColumnOrAlterColumnOrSchemaOrDescriptionSyntax SmallIntForeignKeyIndexed(
        this IAlterTableAddColumnOrAlterColumnOrSchemaOrDescriptionSyntax self,
        string name, string foreignTable, bool isNullable, bool isPK)
    {
        IAlterTableColumnOptionOrAddColumnOrAlterColumnSyntax col = isNullable
            ? self.AddColumn(name).AsInt16().Nullable().ForeignKey(foreignTable, "id")
            : self.AddColumn(name).AsInt16().NotNullable().ForeignKey(foreignTable, "id");

        if (isPK)
            col.PrimaryKey();
        else
            col.Indexed();

        return self;
    }

    public static IAlterTableAddColumnOrAlterColumnOrSchemaOrDescriptionSyntax IntForeignKeyIndexed(
        this IAlterTableAddColumnOrAlterColumnOrSchemaOrDescriptionSyntax self,
        string name, string foreignTable, bool isNullable, bool isPK)
    {
        IAlterTableColumnOptionOrAddColumnOrAlterColumnSyntax col = isNullable
            ? self.AddColumn(name).AsInt32().Nullable().ForeignKey(foreignTable, "id")
            : self.AddColumn(name).AsInt32().NotNullable().ForeignKey(foreignTable, "id");

        if (isPK)
            col.PrimaryKey();
        else
            col.Indexed();

        return self;
    }

    public static ICreateTableColumnOptionOrWithColumnSyntax BigIntForeignKeyIndexed(
        this ICreateTableColumnOptionOrWithColumnSyntax self,
        string name, string foreignTable, bool isNullable, bool isPK)
    {
        ICreateTableColumnOptionOrWithColumnSyntax col = isNullable
            ? self.WithColumn(name).AsInt64().Nullable().ForeignKey(foreignTable, "id")
            : self.WithColumn(name).AsInt64().NotNullable().ForeignKey(foreignTable, "id");

        if (isPK)
            col.PrimaryKey();
        else
            col.Indexed();

        return self;
    }

    public static ICreateTableColumnOptionOrWithColumnSyntax StringForeignKeyIndexed(
        this ICreateTableColumnOptionOrWithColumnSyntax self,
        string name, int stringLength, string foreignTable, bool isNullable, bool isPK)
    {
        ICreateTableColumnOptionOrWithColumnSyntax col = isNullable
            ? self.WithColumn(name).AsString(stringLength).Nullable().ForeignKey(foreignTable, "id")
            : self.WithColumn(name).AsString(stringLength).NotNullable().ForeignKey(foreignTable, "id");

        if (isPK)
            col.PrimaryKey();
        else
            col.Indexed();

        return self;
    }

    public static ICreateTableColumnOptionOrWithColumnSyntax TimestampzAndDefault(
        this ICreateTableColumnOptionOrWithColumnSyntax self, string name, bool isNullable)
    {
        if (isNullable)
            self.WithColumn(name).AsCustom(PostgresSpecificType.Timestampz).Nullable();
        else
            self.WithColumn(name).AsCustom(PostgresSpecificType.Timestampz).NotNullable()
                .WithDefaultValue(PostgresFunction.NowTimestampzUTC);

        return self;
    }

    public static ICreateTableWithColumnOrSchemaSyntax TimestampzAndDefault(
        this ICreateTableWithColumnOrSchemaSyntax self, string name, bool isNullable)
    {
        if (isNullable)
            self.WithColumn(name).AsCustom(PostgresSpecificType.Timestampz).Nullable();
        else
            self.WithColumn(name).AsCustom(PostgresSpecificType.Timestampz).NotNullable()
                .WithDefaultValue(PostgresFunction.NowTimestampzUTC);

        return self;
    }

    public static IAlterTableAddColumnOrAlterColumnSyntax TimestampzAndDefault(
        this IAlterTableAddColumnOrAlterColumnSyntax self, string name, bool isNullable)
    {
        if (isNullable)
            self.AddColumn(name).AsCustom(PostgresSpecificType.Timestampz).Nullable();
        else
            self.AddColumn(name).AsCustom(PostgresSpecificType.Timestampz).NotNullable()
                .WithDefaultValue(PostgresFunction.NowTimestampzUTC);

        return self;
    }

    public static ICreateTableColumnOptionOrWithColumnSyntax Text(this ICreateTableColumnOptionOrWithColumnSyntax self,
        string name, bool isNullable)
    {
        if (isNullable)
            self.WithColumn(name).AsCustom(PostgresSpecificType.Text).Nullable();
        else
            self.WithColumn(name).AsCustom(PostgresSpecificType.Text).NotNullable();

        return self;
    }

    public static ICreateTableWithColumnOrSchemaSyntax Text(this ICreateTableWithColumnOrSchemaSyntax self, string name,
        bool isNullable)
    {
        if (isNullable)
            self.WithColumn(name).AsCustom(PostgresSpecificType.Text).Nullable();
        else
            self.WithColumn(name).AsCustom(PostgresSpecificType.Text).NotNullable();

        return self;
    }

    public static ICreateTableColumnOptionOrWithColumnSyntax Jsonb(this ICreateTableColumnOptionOrWithColumnSyntax self,
        string name, bool isNullable)
    {
        if (isNullable)
            self.WithColumn(name).AsCustom(PostgresSpecificType.Jsonb).Nullable();
        else
            self.WithColumn(name).AsCustom(PostgresSpecificType.Jsonb).NotNullable();

        return self;
    }

    public static ICreateTableColumnOptionOrWithColumnSyntax IsActive(this ICreateTableWithColumnOrSchemaSyntax self,
        bool defaultValue = true)
    {
        return self.WithColumn("is_active").AsBoolean().NotNullable().WithDefaultValue(defaultValue);
    }

    public static ICreateTableColumnOptionOrWithColumnSyntax IsActive(
        this ICreateTableColumnOptionOrWithColumnSyntax self, bool defaultValue = true)
    {
        return self.WithColumn("is_active").AsBoolean().NotNullable().WithDefaultValue(defaultValue);
    }

    public static ICreateTableColumnOptionOrWithColumnSyntax IsTest(this ICreateTableWithColumnOrSchemaSyntax self,
        bool defaultValue = false)
    {
        return self.WithColumn("is_test").AsBoolean().NotNullable().WithDefaultValue(defaultValue);
    }

    public static ICreateTableColumnOptionOrWithColumnSyntax IsTest(
        this ICreateTableColumnOptionOrWithColumnSyntax self, bool defaultValue = false)
    {
        return self.WithColumn("is_test").AsBoolean().NotNullable().WithDefaultValue(defaultValue);
    }

    /// <summary>
    ///     Create required boolean type#2
    /// </summary>
    /// <param name="self"></param>
    /// <param name="name"></param>
    /// <param name="defaultValue"></param>
    /// <returns></returns>
    public static ICreateTableColumnOptionOrWithColumnSyntax Bool(this ICreateTableColumnOptionOrWithColumnSyntax self,
        string name, bool? defaultValue)
    {
        if (defaultValue.HasValue)
            self.WithColumn(name).AsBoolean().WithDefaultValue(defaultValue).NotNullable();
        else
            self.WithColumn(name).AsBoolean().NotNullable();

        return self;
    }
}

internal class ServerFunction
{
    private readonly string _functionName;

    public ServerFunction(string functionName)
    {
        _functionName = functionName;
    }

    public override string ToString()
    {
        return _functionName;
    }
}

public static class FluentMigratorCompositeExtensions
{
    public static ICreateTableColumnOptionOrWithColumnSyntax MultiString(
        this ICreateTableColumnOptionOrWithColumnSyntax self,
        string neutralName, int length, bool isEnglishNullable = false, bool isArabicNullable = false)
    {
        var english = self.WithColumn($"{neutralName}_en").AsString(length);
        if (isEnglishNullable)
            english.Nullable();
        else
            english.NotNullable();

        var arabic = self.WithColumn($"{neutralName}_ar").AsString(length);
        if (isArabicNullable)
            arabic.Nullable();
        else
            arabic.NotNullable();

        return self;
    }

    public static ICreateTableColumnOptionOrWithColumnSyntax MultiText(
        this ICreateTableColumnOptionOrWithColumnSyntax self,
        string neutralName, bool isEnglishNullable = true, bool isArabicNullable = true)
    {
        self.Text($"{neutralName}_en", isEnglishNullable);
        self.Text($"{neutralName}_ar", isArabicNullable);

        return self;
    }

    public static void CreateInfo(this ICreateTableColumnOptionOrWithColumnSyntax self)
    {
        self.TimestampzAndDefault("date_created_utc", false)
            .WithColumn("created_by_user_id").AsInt32().Nullable().ForeignKey(Tables.User, "id").Indexed();
    }

    public static void ChangeInfo(this ICreateTableColumnOptionOrWithColumnSyntax self)
    {
        self.TimestampzAndDefault("date_created_utc", false)
            .WithColumn("created_by_user_id").AsInt32().Nullable().ForeignKey(Tables.User, "id").Indexed();

        self.TimestampzAndDefault("last_modified_utc", true)
            .WithColumn("last_modified_by_user_id").AsInt32().Nullable().ForeignKey(Tables.User, "id").Indexed();
    }

    public static void ChangeInfo(this IAlterTableAddColumnOrAlterColumnSyntax self)
    {
        self.TimestampzAndDefault("date_created_utc", false)
            .AddColumn("created_by_user_id").AsInt32().Nullable().ForeignKey(Tables.User, "id").Indexed();

        self.TimestampzAndDefault("last_modified_utc", true)
            .AddColumn("last_modified_by_user_id").AsInt32().Nullable().ForeignKey(Tables.User, "id").Indexed();
    }

    /// <summary>
    ///     Create a lookup name table using identity (short type)
    /// </summary>
    /// <param name="self"></param>
    /// <param name="tableName"></param>
    /// <param name="length"></param>
    /// <returns></returns>
    internal static ICreateTableColumnOptionOrWithColumnSyntax CreateNameLookupTableWithAutoIdSmall(
        this AutoReversingMigration self, string tableName, int length = StringLength.Fifty)
    {
        return self.Create.Table(tableName)
            .AutoIdSmall()
            .WithColumn("name_en").AsString(length).NotNullable()
            .WithColumn("name_ar").AsString(length).Nullable()
            .IsActive();
    }

    /// <summary>
    ///     Create a lookup name table using short type (without identity)
    /// </summary>
    /// <param name="self"></param>
    /// <param name="tableName"></param>
    /// <param name="length"></param>
    /// <returns></returns>
    internal static ICreateTableColumnOptionOrWithColumnSyntax CreateNameLookupTableWithIdSmall(
        this AutoReversingMigration self, string tableName, int length = StringLength.Fifty)
    {
        return self.Create.Table(tableName)
            .IdSmall()
            .WithColumn("name_en").AsString(length).NotNullable()
            .WithColumn("name_ar").AsString(length).Nullable()
            .IsActive();
    }
}