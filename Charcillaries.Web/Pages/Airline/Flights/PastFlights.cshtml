@page "/airline/flights/past"
@inject IStringLocalizer<AirlineLocalization> LA
@inject IStringLocalizer<FlightLocalization> LF
@inject IStringLocalizer<ServiceLocalization> LS
@inject IStringLocalizer<TourOperatorLocalization> LT
@inject IStringLocalizer<Global> L
@using System.Globalization
@using Charcillaries.Core
@using Charcillaries.Core.Features.Airline
@using Charcillaries.Core.Features.Flight
@using Charcillaries.Core.Features.Service
@using Charcillaries.Core.Features.TourOperator
@using Charcillaries.Web.HtmlHelpers
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.Extensions.Localization
@model Charcillaries.Web.Pages.Airline.Flights.PastFlightsModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = "_AirlineLayout";
    ViewData["Title"] = @LF["past-flights"];
}
<div class="container mt-5">
    <div class="text-center mb-4">
        <div class="d-flex justify-content-center mb-4">
            <a href="upcoming" class="btn grey-button mb-2 me-2">@LF["upcoming-flights"]</a>
            <a href="past" class="btn blue-button mb-2 me-2">@LF["past-flights"]</a>
        </div>
    </div>

    <form method="get" id="filterForm" class="container">
        <div class="row mb-4">
            <div class="col-12 col-sm-4 col-md-2 mb-3 mb-md-0">
                <label for="number" class="form-label">@L["sort-by"]</label>
                <div class="dropdown">
                    <button name="number" class="form-control form-control-sm border rounded p-2 border-dark dropdown-toggle w-100" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                        @if (Request.Query.ContainsKey("sort"))
                        {
                            @if (Request.Query["sort"] == "flightNumberAsc")
                            {
                                <text>@L["flightNumberAsc"]</text>
                            }
                            else if (Request.Query["sort"] == "flightNumberDes")
                            {
                                <text>@L["flightNumberDsc"]</text>
                            }
                        }
                        else
                        {
                            <text>@LF["flight-number"]</text>
                        }
                    </button>
                    <div class="dropdown-menu w-100" aria-labelledby="dropdownMenuButton">
                        <a class="dropdown-item" href="?sort=flightNumberAsc">@L["flightNumberAsc"]</a>
                        <a class="dropdown-item" href="?sort=flightNumberDes">@L["flightNumberDsc"]</a>
                    </div>
                </div>
            </div>
            <div class="col-12 col-sm-4 col-md-2 mb-3 mb-md-0">
                <label for="departureAirport" class="form-label">@L["departure-airport"]</label>
                <div class="dropdown">
                    <button name="departureAirport" class="form-control form-control-sm border rounded p-2 border-dark dropdown-toggle w-100" type="button" id="dropdownDepartureAirport" data-bs-toggle="dropdown" aria-expanded="false">
                        @if (Request.Query.ContainsKey("departureAirport"))
                        {
                            <text>@Request.Query["departureAirport"]</text>
                        }
                        else
                        {
                            <text>@L["select"] @LF["departure-airport"]</text>
                        }
                    </button>
                    <div class="dropdown-menu overflow-auto" style="max-height: 50vh;" aria-labelledby="dropdownDepartureAirport">
                        <a class="dropdown-item" href="?departureAirport=">@L["clear"]</a>
                        @foreach (var route in Model.AirlineRoutes.OrderBy(f => f.DepartureAirport).Select(r => r.DepartureAirport).Distinct())
                        {
                            <a class="dropdown-item" href="?departureAirport=@route">@route</a>
                        }
                    </div>
                </div>
            </div>

            <!-- Arrival Airport Filter -->
            <div class="col-12 col-sm-4 col-md-2 mb-3 mb-md-0">
                <label for="arrivalAirport" class="form-label">@L["arrival-airport"]</label>
                <div class="dropdown">
                    <button name="arrivalAirport" class="form-control form-control-sm border rounded p-2 border-dark dropdown-toggle w-100" type="button" id="dropdownArrivalAirport" data-bs-toggle="dropdown" aria-expanded="false">
                        @if (Request.Query.ContainsKey("arrivalAirport"))
                        {
                            <text>@Request.Query["arrivalAirport"]</text>
                        }
                        else
                        {
                            <text>@L["select"] @LF["arrival-airport"]</text>
                        }
                    </button>
                    <div class="dropdown-menu overflow-auto" style="max-height: 50vh;" aria-labelledby="dropdownArrivalAirport">
                        <a class="dropdown-item" href="?arrivalAirport=">@L["clear"]</a>
                        @foreach (var route in Model.AirlineRoutes.OrderBy(f => f.ArrivalAirport).Select(r => r.ArrivalAirport).Distinct())
                        {
                            <a class="dropdown-item" href="?arrivalAirport=@route">@route</a>
                        }
                    </div>
                </div>
            </div>

            <div class="col-12 col-sm-4 col-md-2 mb-3 mb-md-0">
                <label for="departureAfter" class="form-label">@LF["flights-after"]</label>
                <input type="date" name="departureAfter" id="departureAfter" class="form-control form-control-sm border rounded p-2 border-dark" placeholder=@L["after"] value="@Request.Query["departureAfter"]" />
            </div>
            <div class="col-12 col-sm-4 col-md-2 mb-3 mb-md-0">
                <label for="departureBefore" class="form-label">@LF["flights-before"]</label>
                <input type="date" name="departureBefore" id="departureBefore" class="form-control form-control-sm border rounded p-2 border-dark" placeholder=@L["before"] value="@Request.Query["departureBefore"]" />
            </div>
        </div>
    </form>
    <div class="row">
        @if (Model.Flights.Any())
        {
            @foreach (var flight in Model.Flights)
            {
                <div class="col-12 mb-4">

                    <div class="card h-100 card-silver shadow-sm">
                        <div class="card-header fs-5 fw-bold blue-text">
                            @flight.FlightNumber
                        </div>
                        <div class="card-body">
                            <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center">
                                <div>
                                    <div class="fs-4 d-flex align-items-center">
                                        <i class="fa-solid fa-plane-departure me-2"></i>
                                        <span class="me-3">
                                            @flight.FlightRoute.DepartureAirport
                                        </span> | |
                                        <i class="fa-solid fa-plane-arrival mx-2"></i>
                                        <span>
                                            @flight.FlightRoute.ArrivalAirport
                                        </span>
                                    </div>
                                    <p class="card-text">
                                        <strong>
                                            @L["departure"]
                                            :
                                        </strong>@Arabic.ConvertToArabicDigitsByCulture(flight.DepartureDate.ToString(CultureInfo.CurrentCulture), CultureInfo.CurrentCulture.Name)
                                        <strong>
                                            @L["arrival"]
                                            :
                                        </strong>@Arabic.ConvertToArabicDigitsByCulture(flight.ArrivalDate.ToString(CultureInfo.CurrentCulture), CultureInfo.CurrentCulture.Name)
                                    </p>
                                </div>
                                <div class="flex-grow-1 d-flex justify-content-end mt-3 mt-md-0">
                                    <a href="/airline/flights/@Hash.EncodeInt(flight.Id)"
                                       class="btn btn-light mb-2 me-2 border-dark">
                                        @L["view-details"]
                                    </a>
                                    <a href="/airline/flights/feedback/@Hash.EncodeInt(flight.Id)"
                                       class="btn blue-button mb-2 me-2">
                                        @L["view-feedback"]
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <p>@LF["no-flights-available"]</p>
        }
    </div>
</div>

@section Scripts {
    <script>
        document.getElementById('departureAfter').addEventListener('change', function () {
            updateQueryParam('departureAfter', this.value);
        });

        document.getElementById('departureBefore').addEventListener('change', function () {
            updateQueryParam('departureBefore', this.value);
        });

        document.querySelectorAll('#dropdownMenuButton + .dropdown-menu a').forEach(item => {
            item.addEventListener('click', function (event) {
                event.preventDefault();
                const sortValue = new URL(this.href).searchParams.get('sort');
                updateQueryParam('sort', sortValue);
            });
        });

        document.querySelectorAll('#dropdownDepartureAirport + .dropdown-menu a').forEach(item => {
            item.addEventListener('click', function (event) {
                event.preventDefault();
                const departureAirport = new URL(this.href).searchParams.get('departureAirport');
                updateQueryParam('departureAirport', departureAirport);
            });
        });

        document.querySelectorAll('#dropdownArrivalAirport + .dropdown-menu a').forEach(item => {
            item.addEventListener('click', function (event) {
                event.preventDefault();
                const arrivalAirport = new URL(this.href).searchParams.get('arrivalAirport');
                updateQueryParam('arrivalAirport', arrivalAirport);
            });
        });

        function updateQueryParam(key, value) {
            const url = new URL(window.location.href);
            const params = new URLSearchParams(url.search);
            if (value) {
                params.set(key, value);
            } else {
                params.delete(key);
            }
            url.search = params.toString();
            history.pushState(null, '', url);
            window.location.reload();
        }
    </script>
}