//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v5.10.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SD.LLBLGen.Pro.QuerySpec;
using Charcillaries.Data.HelperClasses;
using SD.LLBLGen.Pro.LinqSupportClasses;
using SD.LLBLGen.Pro.LinqSupportClasses.DTOProjectionHelpers;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Charcillaries.Data.Views.Persistence
{
	///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
	public partial class PassengerAmenityListViewProjectionParams
	{
		///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
		public partial class P_PassengerProjectionParams_Clauses
		{
			///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
			public partial class P_P_PassengerAmenitySelectionsProjectionParams_Clauses
			{
				/// <summary>QuerySpec specific. Appends a new OrderBy clause for the PassengerAmenitySelections embedded set.</summary>
				/// <param name="clauseToAdd">the clause to add</param>
				public void AppendQSOrderBy(ISortClause clauseToAdd) => this.QSOrderByClauses.Add(clauseToAdd);
				/// <summary>Linq specific. Appends a new OrderBy clause for the PassengerAmenitySelections embedded set.</summary>
				/// <param name="orderByClause">The order by clause to use</param>
				/// <param name="descending">if true, the order by will be descending, otherwise ascending (default)</param>
				/// <typeparam name="TField">The type of the field to sort by</typeparam>
				public void AppendLinqOrderBy<TField>(System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity, TField>> orderByClause, bool descending = false) => this.LinqOrderByClauses.Add(new SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>((System.Linq.Expressions.Expression)orderByClause, descending));
				internal List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>> LinqOrderByClauses { get; } = new List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>>();
				internal List<ISortClause> QSOrderByClauses { get; set; } = new List<ISortClause>();
				/// <summary>Linq specific. Custom where clause to be used for when the PassengerAmenitySelections embedded set is fetched</summary>
				public System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity, bool>> LinqWhereClause { get; set; }
				/// <summary>QuerySpec specific. Custom where clause to be used for when the PassengerAmenitySelections embedded set is fetched</summary>
				public IPredicate QSWhereClause { get; set; }
			}

			/// <summary>Projection parameters to configure where / orderby clauses for the nested member 'PassengerAmenitySelections'</summary>
			public P_P_PassengerAmenitySelectionsProjectionParams_Clauses PassengerAmenitySelectionsProjectionParams { get; } = new P_P_PassengerAmenitySelectionsProjectionParams_Clauses();
		}

		/// <summary>Projection parameters to configure where / orderby clauses for the nested member 'Passenger'</summary>
		public P_PassengerProjectionParams_Clauses PassengerProjectionParams { get; } = new P_PassengerProjectionParams_Clauses();
	}

	/// <summary>Static class for (extension) methods for fetching and projecting instances of Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView from the entity model.</summary>
	public static partial class PassengerAmenityListViewPersistence
	{
		private static readonly System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity, Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView>> _projectorExpression = CreateProjectionFunc();
		private static readonly Func<Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity, Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView> _compiledProjector = CreateProjectionFunc().Compile();
		/// <summary>Linq specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToPassengerAmenityListView(System.Linq.IQueryable{Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity})"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="CreateProjectionFunc"/></param>
		/// <remarks>Linq specific</remarks>
		static partial void GetAdjustmentsForProjectToPassengerAmenityListView(ref System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity, Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView>> projectionAdjustments);
		/// <summary>QuerySpec specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToPassengerAmenityListView(EntityQuery{Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity}, Charcillaries.Data.FactoryClasses.QueryFactory)"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="ProjectToPassengerAmenityListView(EntityQuery{Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity}, Charcillaries.Data.FactoryClasses.QueryFactory)"/></param>
		/// <remarks>QuerySpec specific</remarks>
		static partial void GetAdjustmentsForProjectToPassengerAmenityListViewQs(ref System.Linq.Expressions.Expression<Func<Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView>> projectionAdjustments);
	
		/// <summary>Empty static ctor for triggering initialization of static members in a thread-safe manner</summary>
		static PassengerAmenityListViewPersistence() { }
	
		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView which instances are projected from the results of the specified baseQuery, which returns Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <returns>IQueryable to retrieve Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView instances</returns>
		public static IQueryable<Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView> ProjectToPassengerAmenityListView(this IQueryable<Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity> baseQuery) => ProjectToPassengerAmenityListView(baseQuery, null);
		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView which instances are projected from the results of the specified baseQuery, which returns Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="projectionParams">The optional projection parameters with optional where/orderby clauses for nested sets in the projection</param>
		/// <returns>IQueryable to retrieve Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView instances</returns>
		public static IQueryable<Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView> ProjectToPassengerAmenityListView(this IQueryable<Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity> baseQuery, PassengerAmenityListViewProjectionParams projectionParams)
		{
			if(projectionParams == null)
			{
				return baseQuery.Select(_projectorExpression);
			}
			return baseQuery.Select(CreateProjectionFunc(projectionParams));
		}

		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView which instances are projected from the results of the specified baseQuery using QuerySpec, which returns Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="qf">The query factory used to create baseQuery.</param>
		/// <returns>DynamicQuery to retrieve Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView instances</returns>
		public static DynamicQuery<Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView> ProjectToPassengerAmenityListView(this EntityQuery<Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity> baseQuery, Charcillaries.Data.FactoryClasses.QueryFactory qf) => ProjectToPassengerAmenityListView(baseQuery, qf, null);
		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView which instances are projected from the results of the specified baseQuery using QuerySpec, which returns Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="qf">The query factory used to create baseQuery.</param>
		/// <param name="projectionParams">The optional projection parameters with optional where/orderby clauses for nested sets in the projection</param>
		/// <returns>DynamicQuery to retrieve Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView instances</returns>
		public static DynamicQuery<Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView> ProjectToPassengerAmenityListView(this EntityQuery<Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity> baseQuery, Charcillaries.Data.FactoryClasses.QueryFactory qf, PassengerAmenityListViewProjectionParams projectionParams=null)
		{
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToPassengerAmenityListViewQs(ref projectionAdjustments);
			return qf.Create()
				.From(baseQuery.Select(Projection.Full).As("__BQ")
					.InnerJoin(qf.Passenger.As("__L0_0")).On(PassengerAmenitySelectionFields.PassengerId.Source("__BQ").Equal(PassengerFields.Id.Source("__L0_0")))
					.InnerJoin(qf.Flight.As("__L0_1")).On(PassengerFields.FlightId.Source("__L0_0").Equal(FlightFields.Id.Source("__L0_1")))
					.InnerJoin(qf.FlightRoute.As("__L0_2")).On(FlightFields.FlightRouteId.Source("__L0_1").Equal(FlightRouteFields.Id.Source("__L0_2")))
					.InnerJoin(qf.Person.As("__L0_3")).On(PassengerFields.PersonId.Source("__L0_0").Equal(PersonFields.Id.Source("__L0_3")))
					.InnerJoin(qf.RouteAmenity.As("__L0_4")).On(PassengerAmenitySelectionFields.RouteAmenityId.Source("__BQ").Equal(RouteAmenityFields.Id.Source("__L0_4")))
					.InnerJoin(qf.Amenity.As("__L0_5")).On(RouteAmenityFields.AmenityId.Source("__L0_4").Equal(AmenityFields.Id.Source("__L0_5"))))
				.Select(LinqUtils.MergeProjectionAdjustmentsIntoProjection(() => new Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView()
				{
					AmenityId = PassengerAmenitySelectionFields.RouteAmenityId.Source("__BQ").ToValue<System.Int32>(),
					Confirmed = PassengerAmenitySelectionFields.Confirmed.Source("__BQ").ToValue<Nullable<System.Int32>>(),
					Id = PassengerAmenitySelectionFields.Id.Source("__BQ").ToValue<System.Int32>(),
					ObjectStatus = PassengerAmenitySelectionFields.ObjectStatus.Source("__BQ").ToValue<System.Int32>(),
					Passenger = new Charcillaries.Data.Views.DtoClasses.PassengerAmenityListViewTypes.Passenger()
						{
							Flight = new Charcillaries.Data.Views.DtoClasses.PassengerAmenityListViewTypes.PassengerTypes.Flight()
								{
									ArrivalDate = FlightFields.ArrivalDate.Source("__L0_1").ToValue<System.DateTime>(),
									DepartureDate = FlightFields.DepartureDate.Source("__L0_1").ToValue<System.DateTime>(),
									FlightNumber = FlightFields.FlightNumber.Source("__L0_1").ToValue<System.String>(),
									FlightRoute = new Charcillaries.Data.Views.DtoClasses.PassengerAmenityListViewTypes.PassengerTypes.FlightTypes.FlightRoute()
										{
											AirlineId = FlightRouteFields.AirlineId.Source("__L0_2").ToValue<System.Int32>(),
											ArrivalAirport = FlightRouteFields.ArrivalAirport.Source("__L0_2").ToValue<System.String>(),
											DepartureAirport = FlightRouteFields.DepartureAirport.Source("__L0_2").ToValue<System.String>(),
											Id = FlightRouteFields.Id.As("Id1").Source("__L0_2").ToValue<System.Int32>(),
											ObjectStatus = FlightRouteFields.ObjectStatus.As("ObjectStatus1").Source("__L0_2").ToValue<System.Int32>(),
										},
									FlightRouteId = FlightFields.FlightRouteId.Source("__L0_1").ToValue<System.Int32>(),
									Id = FlightFields.Id.As("Id2").Source("__L0_1").ToValue<System.Int32>(),
									NumberOfSeats = FlightFields.NumberOfSeats.Source("__L0_1").ToValue<System.Int32>(),
									ObjectStatus = FlightFields.ObjectStatus.As("ObjectStatus2").Source("__L0_1").ToValue<System.Int32>(),
									TourOperatorId = FlightFields.TourOperatorId.Source("__L0_1").ToValue<System.Int32>(),
								},
							PassengerAmenitySelections = (List<Charcillaries.Data.Views.DtoClasses.PassengerAmenityListViewTypes.PassengerTypes.PassengerAmenitySelection>)qf.PassengerAmenitySelection.TargetAs("__L1_0")
								.CorrelatedOver(PassengerFields.Id.Source("__L0_0").Equal(PassengerAmenitySelectionFields.PassengerId.Source("__L1_0")))
								.Where(projectionParams==null ? null : GeneralUtils.SetAliasOnPredicate(projectionParams.PassengerProjectionParams.PassengerAmenitySelectionsProjectionParams.QSWhereClause, "__L1_0"))
								.OrderBy(projectionParams==null ? null : GeneralUtils.SetAliasOnSortClauses(projectionParams.PassengerProjectionParams.PassengerAmenitySelectionsProjectionParams.QSOrderByClauses, "__L1_0"))
								.Select(() => new Charcillaries.Data.Views.DtoClasses.PassengerAmenityListViewTypes.PassengerTypes.PassengerAmenitySelection()
								{
									AmenityId = PassengerAmenitySelectionFields.RouteAmenityId.Source("__L1_0").ToValue<System.Int32>(),
									Confirmed = PassengerAmenitySelectionFields.Confirmed.Source("__L1_0").ToValue<Nullable<System.Int32>>(),
									Customization = PassengerAmenitySelectionFields.Customization.Source("__L1_0").ToValue<System.String>(),
									Id = PassengerAmenitySelectionFields.Id.Source("__L1_0").ToValue<System.Int32>(),
									ObjectStatus = PassengerAmenitySelectionFields.ObjectStatus.Source("__L1_0").ToValue<System.Int32>(),
									PassengerId = PassengerAmenitySelectionFields.PassengerId.Source("__L1_0").ToValue<System.Int32>(),
									Quantity = PassengerAmenitySelectionFields.Quantity.Source("__L1_0").ToValue<Nullable<System.Int32>>(),
								}).ToResultset(),
							Person = new Charcillaries.Data.Views.DtoClasses.PassengerAmenityListViewTypes.PassengerTypes.Person()
								{
									Email = PersonFields.Email.Source("__L0_3").ToValue<System.String>(),
									FirstName = PersonFields.FirstName.Source("__L0_3").ToValue<System.String>(),
									Id = PersonFields.Id.As("Id3").Source("__L0_3").ToValue<System.Int32>(),
									LastName = PersonFields.LastName.Source("__L0_3").ToValue<System.String>(),
									ObjectStatus = PersonFields.ObjectStatus.As("ObjectStatus3").Source("__L0_3").ToValue<System.Int32>(),
									PassportNumber = PersonFields.PassportNumber.Source("__L0_3").ToValue<System.String>(),
									PhoneNumber = PersonFields.PhoneNumber.Source("__L0_3").ToValue<System.String>(),
								},
						},
					PassengerId = PassengerAmenitySelectionFields.PassengerId.Source("__BQ").ToValue<System.Int32>(),
					Quantity = PassengerAmenitySelectionFields.Quantity.Source("__BQ").ToValue<Nullable<System.Int32>>(),
					RouteAmenity = new Charcillaries.Data.Views.DtoClasses.PassengerAmenityListViewTypes.RouteAmenity()
						{
							Amenity = new Charcillaries.Data.Views.DtoClasses.PassengerAmenityListViewTypes.RouteAmenityTypes.Amenity()
								{
									Name = AmenityFields.Name.Source("__L0_5").ToValue<System.String>(),
								},
							AmenityId = RouteAmenityFields.AmenityId.Source("__L0_4").ToValue<System.Int32>(),
							FlightRouteId = RouteAmenityFields.FlightRouteId.As("FlightRouteId1").Source("__L0_4").ToValue<System.Int32>(),
							Id = RouteAmenityFields.Id.As("Id4").Source("__L0_4").ToValue<System.Int32>(),
							ObjectStatus = RouteAmenityFields.ObjectStatus.As("ObjectStatus4").Source("__L0_4").ToValue<System.Int32>(),
							Price = RouteAmenityFields.Price.Source("__L0_4").ToValue<System.Single>(),
							Quantity = RouteAmenityFields.Quantity.As("Quantity1").Source("__L0_4").ToValue<Nullable<System.Int32>>(),
						},
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegionQS_PassengerAmenityListView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
				}, projectionAdjustments, false));
		}

		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView which instances are projected from the Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity entity instance specified, the root entity of the derived element returned by this method.</summary>
		/// <param name="entity">The entity to project from.</param>
		/// <returns>Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity instance created from the specified entity instance</returns>
		public static Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView ProjectToPassengerAmenityListView(this Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity entity)
		{
			return _compiledProjector(entity);
		}

		private static System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity, Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView>> CreateProjectionFunc(PassengerAmenityListViewProjectionParams projectionParams=null)
		{
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity, Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView>> mainProjection = p__0 => new Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView()
			{
				AmenityId = p__0.RouteAmenityId,
				Confirmed = p__0.Confirmed,
				Id = p__0.Id,
				ObjectStatus = p__0.ObjectStatus,
				Passenger = new Charcillaries.Data.Views.DtoClasses.PassengerAmenityListViewTypes.Passenger()
				{
					Flight = new Charcillaries.Data.Views.DtoClasses.PassengerAmenityListViewTypes.PassengerTypes.Flight()
					{
						ArrivalDate = p__0.Passenger.Flight.ArrivalDate,
						DepartureDate = p__0.Passenger.Flight.DepartureDate,
						FlightNumber = p__0.Passenger.Flight.FlightNumber,
						FlightRoute = new Charcillaries.Data.Views.DtoClasses.PassengerAmenityListViewTypes.PassengerTypes.FlightTypes.FlightRoute()
						{
							AirlineId = p__0.Passenger.Flight.FlightRoute.AirlineId,
							ArrivalAirport = p__0.Passenger.Flight.FlightRoute.ArrivalAirport,
							DepartureAirport = p__0.Passenger.Flight.FlightRoute.DepartureAirport,
							Id = p__0.Passenger.Flight.FlightRoute.Id,
							ObjectStatus = p__0.Passenger.Flight.FlightRoute.ObjectStatus,
						},
						FlightRouteId = p__0.Passenger.Flight.FlightRouteId,
						Id = p__0.Passenger.Flight.Id,
						NumberOfSeats = p__0.Passenger.Flight.NumberOfSeats,
						ObjectStatus = p__0.Passenger.Flight.ObjectStatus,
						TourOperatorId = p__0.Passenger.Flight.TourOperatorId,
					},
					PassengerAmenitySelections = p__0.Passenger.PassengerAmenitySelections.AsQueryable().OptionalWhere(projectionParams.PassengerProjectionParams.PassengerAmenitySelectionsProjectionParams.LinqWhereClause).OptionalOrderBy(projectionParams.PassengerProjectionParams.PassengerAmenitySelectionsProjectionParams.LinqOrderByClauses).Select(p__1 => new Charcillaries.Data.Views.DtoClasses.PassengerAmenityListViewTypes.PassengerTypes.PassengerAmenitySelection()
					{
						AmenityId = p__1.RouteAmenityId,
						Confirmed = p__1.Confirmed,
						Customization = p__1.Customization,
						Id = p__1.Id,
						ObjectStatus = p__1.ObjectStatus,
						PassengerId = p__1.PassengerId,
						Quantity = p__1.Quantity,
					}).ToList(),
					Person = new Charcillaries.Data.Views.DtoClasses.PassengerAmenityListViewTypes.PassengerTypes.Person()
					{
						Email = p__0.Passenger.Person.Email,
						FirstName = p__0.Passenger.Person.FirstName,
						Id = p__0.Passenger.Person.Id,
						LastName = p__0.Passenger.Person.LastName,
						ObjectStatus = p__0.Passenger.Person.ObjectStatus,
						PassportNumber = p__0.Passenger.Person.PassportNumber,
						PhoneNumber = p__0.Passenger.Person.PhoneNumber,
					},
				},
				PassengerId = p__0.PassengerId,
				Quantity = p__0.Quantity,
				RouteAmenity = new Charcillaries.Data.Views.DtoClasses.PassengerAmenityListViewTypes.RouteAmenity()
				{
					Amenity = new Charcillaries.Data.Views.DtoClasses.PassengerAmenityListViewTypes.RouteAmenityTypes.Amenity()
					{
						Name = p__0.RouteAmenity.Amenity.Name,
					},
					AmenityId = p__0.RouteAmenity.AmenityId,
					FlightRouteId = p__0.RouteAmenity.FlightRouteId,
					Id = p__0.RouteAmenity.Id,
					ObjectStatus = p__0.RouteAmenity.ObjectStatus,
					Price = p__0.RouteAmenity.Price,
					Quantity = p__0.RouteAmenity.Quantity,
				},
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegion_PassengerAmenityListView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
			};
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity, Charcillaries.Data.Views.DtoClasses.PassengerAmenityListView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToPassengerAmenityListView(ref projectionAdjustments);
			return LinqUtils.MergeProjectionAdjustmentsIntoProjection(mainProjection, projectionAdjustments, true);
		}
	}
}


