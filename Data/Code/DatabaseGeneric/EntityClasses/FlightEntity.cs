//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.10.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Charcillaries.Data.HelperClasses;
using Charcillaries.Data.FactoryClasses;
using Charcillaries.Data.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Charcillaries.Data.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Flight'.<br/><br/></summary>
	[Serializable]
	public partial class FlightEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<PassengerEntity> _passengers;
		private EntityCollection<RouteFlightFeedbackEntity> _routeFlightFeedbacks;
		private FlightRouteEntity _flightRoute;
		private TourOperatorEntity _tourOperator;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static FlightEntityStaticMetaData _staticMetaData = new FlightEntityStaticMetaData();
		private static FlightRelations _relationsFactory = new FlightRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name FlightRoute</summary>
			public static readonly string FlightRoute = "FlightRoute";
			/// <summary>Member name TourOperator</summary>
			public static readonly string TourOperator = "TourOperator";
			/// <summary>Member name Passengers</summary>
			public static readonly string Passengers = "Passengers";
			/// <summary>Member name RouteFlightFeedbacks</summary>
			public static readonly string RouteFlightFeedbacks = "RouteFlightFeedbacks";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class FlightEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public FlightEntityStaticMetaData()
			{
				SetEntityCoreInfo("FlightEntity", InheritanceHierarchyType.None, false, (int)Charcillaries.Data.EntityType.FlightEntity, typeof(FlightEntity), typeof(FlightEntityFactory), false);
				AddNavigatorMetaData<FlightEntity, EntityCollection<PassengerEntity>>("Passengers", a => a._passengers, (a, b) => a._passengers = b, a => a.Passengers, () => new FlightRelations().PassengerEntityUsingFlightId, typeof(PassengerEntity), (int)Charcillaries.Data.EntityType.PassengerEntity);
				AddNavigatorMetaData<FlightEntity, EntityCollection<RouteFlightFeedbackEntity>>("RouteFlightFeedbacks", a => a._routeFlightFeedbacks, (a, b) => a._routeFlightFeedbacks = b, a => a.RouteFlightFeedbacks, () => new FlightRelations().RouteFlightFeedbackEntityUsingFlightId, typeof(RouteFlightFeedbackEntity), (int)Charcillaries.Data.EntityType.RouteFlightFeedbackEntity);
				AddNavigatorMetaData<FlightEntity, FlightRouteEntity>("FlightRoute", "Flights", (a, b) => a._flightRoute = b, a => a._flightRoute, (a, b) => a.FlightRoute = b, Charcillaries.Data.RelationClasses.StaticFlightRelations.FlightRouteEntityUsingFlightRouteIdStatic, ()=>new FlightRelations().FlightRouteEntityUsingFlightRouteId, null, new int[] { (int)FlightFieldIndex.FlightRouteId }, null, true, (int)Charcillaries.Data.EntityType.FlightRouteEntity);
				AddNavigatorMetaData<FlightEntity, TourOperatorEntity>("TourOperator", "Flights", (a, b) => a._tourOperator = b, a => a._tourOperator, (a, b) => a.TourOperator = b, Charcillaries.Data.RelationClasses.StaticFlightRelations.TourOperatorEntityUsingTourOperatorIdStatic, ()=>new FlightRelations().TourOperatorEntityUsingTourOperatorId, null, new int[] { (int)FlightFieldIndex.TourOperatorId }, null, true, (int)Charcillaries.Data.EntityType.TourOperatorEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static FlightEntity()
		{
		}

		/// <summary> CTor</summary>
		public FlightEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public FlightEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this FlightEntity</param>
		public FlightEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Flight which data should be fetched into this Flight object</param>
		public FlightEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Flight which data should be fetched into this Flight object</param>
		/// <param name="validator">The custom validator object for this FlightEntity</param>
		public FlightEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected FlightEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Passenger' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPassengers() { return CreateRelationInfoForNavigator("Passengers"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'RouteFlightFeedback' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRouteFlightFeedbacks() { return CreateRelationInfoForNavigator("RouteFlightFeedbacks"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'FlightRoute' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoFlightRoute() { return CreateRelationInfoForNavigator("FlightRoute"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'TourOperator' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTourOperator() { return CreateRelationInfoForNavigator("TourOperator"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this FlightEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static FlightRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Passenger' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPassengers { get { return _staticMetaData.GetPrefetchPathElement("Passengers", CommonEntityBase.CreateEntityCollection<PassengerEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'RouteFlightFeedback' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRouteFlightFeedbacks { get { return _staticMetaData.GetPrefetchPathElement("RouteFlightFeedbacks", CommonEntityBase.CreateEntityCollection<RouteFlightFeedbackEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'FlightRoute' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathFlightRoute { get { return _staticMetaData.GetPrefetchPathElement("FlightRoute", CommonEntityBase.CreateEntityCollection<FlightRouteEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'TourOperator' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTourOperator { get { return _staticMetaData.GetPrefetchPathElement("TourOperator", CommonEntityBase.CreateEntityCollection<TourOperatorEntity>()); } }

		/// <summary>The ArrivalDate property of the Entity Flight<br/><br/></summary>
		/// <remarks>Mapped on  table field: "flight"."arrival_date".<br/>Table field type characteristics (type, precision, scale, length): Timestamp, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ArrivalDate
		{
			get { return (System.DateTime)GetValue((int)FlightFieldIndex.ArrivalDate, true); }
			set	{ SetValue((int)FlightFieldIndex.ArrivalDate, value); }
		}

		/// <summary>The DepartureDate property of the Entity Flight<br/><br/></summary>
		/// <remarks>Mapped on  table field: "flight"."departure_date".<br/>Table field type characteristics (type, precision, scale, length): Timestamp, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime DepartureDate
		{
			get { return (System.DateTime)GetValue((int)FlightFieldIndex.DepartureDate, true); }
			set	{ SetValue((int)FlightFieldIndex.DepartureDate, value); }
		}

		/// <summary>The FlightNumber property of the Entity Flight<br/><br/></summary>
		/// <remarks>Mapped on  table field: "flight"."flight_number".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 10.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String FlightNumber
		{
			get { return (System.String)GetValue((int)FlightFieldIndex.FlightNumber, true); }
			set	{ SetValue((int)FlightFieldIndex.FlightNumber, value); }
		}

		/// <summary>The FlightRouteId property of the Entity Flight<br/><br/></summary>
		/// <remarks>Mapped on  table field: "flight"."flight_route_id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 FlightRouteId
		{
			get { return (System.Int32)GetValue((int)FlightFieldIndex.FlightRouteId, true); }
			set	{ SetValue((int)FlightFieldIndex.FlightRouteId, value); }
		}

		/// <summary>The Id property of the Entity Flight<br/><br/></summary>
		/// <remarks>Mapped on  table field: "flight"."id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)FlightFieldIndex.Id, true); }
			set { SetValue((int)FlightFieldIndex.Id, value); }		}

		/// <summary>The NumberOfSeats property of the Entity Flight<br/><br/></summary>
		/// <remarks>Mapped on  table field: "flight"."number_of_seats".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 NumberOfSeats
		{
			get { return (System.Int32)GetValue((int)FlightFieldIndex.NumberOfSeats, true); }
			set	{ SetValue((int)FlightFieldIndex.NumberOfSeats, value); }
		}

		/// <summary>The ObjectStatus property of the Entity Flight<br/><br/></summary>
		/// <remarks>Mapped on  table field: "flight"."object_status".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ObjectStatus
		{
			get { return (System.Int32)GetValue((int)FlightFieldIndex.ObjectStatus, true); }
			set	{ SetValue((int)FlightFieldIndex.ObjectStatus, value); }
		}

		/// <summary>The TourOperatorId property of the Entity Flight<br/><br/></summary>
		/// <remarks>Mapped on  table field: "flight"."tour_operator_id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 TourOperatorId
		{
			get { return (System.Int32)GetValue((int)FlightFieldIndex.TourOperatorId, true); }
			set	{ SetValue((int)FlightFieldIndex.TourOperatorId, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'PassengerEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(PassengerEntity))]
		public virtual EntityCollection<PassengerEntity> Passengers { get { return GetOrCreateEntityCollection<PassengerEntity, PassengerEntityFactory>("Flight", true, false, ref _passengers); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'RouteFlightFeedbackEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(RouteFlightFeedbackEntity))]
		public virtual EntityCollection<RouteFlightFeedbackEntity> RouteFlightFeedbacks { get { return GetOrCreateEntityCollection<RouteFlightFeedbackEntity, RouteFlightFeedbackEntityFactory>("Flight", true, false, ref _routeFlightFeedbacks); } }

		/// <summary>Gets / sets related entity of type 'FlightRouteEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual FlightRouteEntity FlightRoute
		{
			get { return _flightRoute; }
			set { SetSingleRelatedEntityNavigator(value, "FlightRoute"); }
		}

		/// <summary>Gets / sets related entity of type 'TourOperatorEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual TourOperatorEntity TourOperator
		{
			get { return _tourOperator; }
			set { SetSingleRelatedEntityNavigator(value, "TourOperator"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Charcillaries.Data
{
	public enum FlightFieldIndex
	{
		///<summary>ArrivalDate. </summary>
		ArrivalDate,
		///<summary>DepartureDate. </summary>
		DepartureDate,
		///<summary>FlightNumber. </summary>
		FlightNumber,
		///<summary>FlightRouteId. </summary>
		FlightRouteId,
		///<summary>Id. </summary>
		Id,
		///<summary>NumberOfSeats. </summary>
		NumberOfSeats,
		///<summary>ObjectStatus. </summary>
		ObjectStatus,
		///<summary>TourOperatorId. </summary>
		TourOperatorId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Charcillaries.Data.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Flight. </summary>
	public partial class FlightRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between FlightEntity and PassengerEntity over the 1:n relation they have, using the relation between the fields: Flight.Id - Passenger.FlightId</summary>
		public virtual IEntityRelation PassengerEntityUsingFlightId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Passengers", true, new[] { FlightFields.Id, PassengerFields.FlightId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between FlightEntity and RouteFlightFeedbackEntity over the 1:n relation they have, using the relation between the fields: Flight.Id - RouteFlightFeedback.FlightId</summary>
		public virtual IEntityRelation RouteFlightFeedbackEntityUsingFlightId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "RouteFlightFeedbacks", true, new[] { FlightFields.Id, RouteFlightFeedbackFields.FlightId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between FlightEntity and FlightRouteEntity over the m:1 relation they have, using the relation between the fields: Flight.FlightRouteId - FlightRoute.Id</summary>
		public virtual IEntityRelation FlightRouteEntityUsingFlightRouteId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "FlightRoute", false, new[] { FlightRouteFields.Id, FlightFields.FlightRouteId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between FlightEntity and TourOperatorEntity over the m:1 relation they have, using the relation between the fields: Flight.TourOperatorId - TourOperator.Id</summary>
		public virtual IEntityRelation TourOperatorEntityUsingTourOperatorId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "TourOperator", false, new[] { TourOperatorFields.Id, FlightFields.TourOperatorId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticFlightRelations
	{
		internal static readonly IEntityRelation PassengerEntityUsingFlightIdStatic = new FlightRelations().PassengerEntityUsingFlightId;
		internal static readonly IEntityRelation RouteFlightFeedbackEntityUsingFlightIdStatic = new FlightRelations().RouteFlightFeedbackEntityUsingFlightId;
		internal static readonly IEntityRelation FlightRouteEntityUsingFlightRouteIdStatic = new FlightRelations().FlightRouteEntityUsingFlightRouteId;
		internal static readonly IEntityRelation TourOperatorEntityUsingTourOperatorIdStatic = new FlightRelations().TourOperatorEntityUsingTourOperatorId;

		/// <summary>CTor</summary>
		static StaticFlightRelations() { }
	}
}
