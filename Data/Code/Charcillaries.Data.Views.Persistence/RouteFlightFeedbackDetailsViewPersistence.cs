//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v5.10.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SD.LLBLGen.Pro.QuerySpec;
using Charcillaries.Data.HelperClasses;
using SD.LLBLGen.Pro.LinqSupportClasses;
using SD.LLBLGen.Pro.LinqSupportClasses.DTOProjectionHelpers;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Charcillaries.Data.Views.Persistence
{
	///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
	public partial class RouteFlightFeedbackDetailsViewProjectionParams
	{
		///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
		public partial class R_FlightProjectionParams_Clauses
		{
			///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
			public partial class R_F_PassengersProjectionParams_Clauses
			{
				///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
				public partial class R_F_P_AmenityFeedbacksProjectionParams_Clauses
				{
					/// <summary>QuerySpec specific. Appends a new OrderBy clause for the AmenityFeedbacks embedded set.</summary>
					/// <param name="clauseToAdd">the clause to add</param>
					public void AppendQSOrderBy(ISortClause clauseToAdd) => this.QSOrderByClauses.Add(clauseToAdd);
					/// <summary>Linq specific. Appends a new OrderBy clause for the AmenityFeedbacks embedded set.</summary>
					/// <param name="orderByClause">The order by clause to use</param>
					/// <param name="descending">if true, the order by will be descending, otherwise ascending (default)</param>
					/// <typeparam name="TField">The type of the field to sort by</typeparam>
					public void AppendLinqOrderBy<TField>(System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.AmenityFeedbackEntity, TField>> orderByClause, bool descending = false) => this.LinqOrderByClauses.Add(new SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>((System.Linq.Expressions.Expression)orderByClause, descending));
					internal List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>> LinqOrderByClauses { get; } = new List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>>();
					internal List<ISortClause> QSOrderByClauses { get; set; } = new List<ISortClause>();
					/// <summary>Linq specific. Custom where clause to be used for when the AmenityFeedbacks embedded set is fetched</summary>
					public System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.AmenityFeedbackEntity, bool>> LinqWhereClause { get; set; }
					/// <summary>QuerySpec specific. Custom where clause to be used for when the AmenityFeedbacks embedded set is fetched</summary>
					public IPredicate QSWhereClause { get; set; }
				}

				///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
				public partial class R_F_P_PassengerAmenitySelectionsProjectionParams_Clauses
				{
					///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
					public partial class R_F_P_P_RouteAmenityProjectionParams_Clauses
					{
						///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
						public partial class R_F_P_P_R_PassengerAmenitySelectionsProjectionParams_Clauses
						{
							/// <summary>QuerySpec specific. Appends a new OrderBy clause for the PassengerAmenitySelections embedded set.</summary>
							/// <param name="clauseToAdd">the clause to add</param>
							public void AppendQSOrderBy(ISortClause clauseToAdd) => this.QSOrderByClauses.Add(clauseToAdd);
							/// <summary>Linq specific. Appends a new OrderBy clause for the PassengerAmenitySelections embedded set.</summary>
							/// <param name="orderByClause">The order by clause to use</param>
							/// <param name="descending">if true, the order by will be descending, otherwise ascending (default)</param>
							/// <typeparam name="TField">The type of the field to sort by</typeparam>
							public void AppendLinqOrderBy<TField>(System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity, TField>> orderByClause, bool descending = false) => this.LinqOrderByClauses.Add(new SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>((System.Linq.Expressions.Expression)orderByClause, descending));
							internal List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>> LinqOrderByClauses { get; } = new List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>>();
							internal List<ISortClause> QSOrderByClauses { get; set; } = new List<ISortClause>();
							/// <summary>Linq specific. Custom where clause to be used for when the PassengerAmenitySelections embedded set is fetched</summary>
							public System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity, bool>> LinqWhereClause { get; set; }
							/// <summary>QuerySpec specific. Custom where clause to be used for when the PassengerAmenitySelections embedded set is fetched</summary>
							public IPredicate QSWhereClause { get; set; }
						}

						/// <summary>Projection parameters to configure where / orderby clauses for the nested member 'PassengerAmenitySelections'</summary>
						public R_F_P_P_R_PassengerAmenitySelectionsProjectionParams_Clauses PassengerAmenitySelectionsProjectionParams { get; } = new R_F_P_P_R_PassengerAmenitySelectionsProjectionParams_Clauses();
					}

					/// <summary>QuerySpec specific. Appends a new OrderBy clause for the PassengerAmenitySelections embedded set.</summary>
					/// <param name="clauseToAdd">the clause to add</param>
					public void AppendQSOrderBy(ISortClause clauseToAdd) => this.QSOrderByClauses.Add(clauseToAdd);
					/// <summary>Linq specific. Appends a new OrderBy clause for the PassengerAmenitySelections embedded set.</summary>
					/// <param name="orderByClause">The order by clause to use</param>
					/// <param name="descending">if true, the order by will be descending, otherwise ascending (default)</param>
					/// <typeparam name="TField">The type of the field to sort by</typeparam>
					public void AppendLinqOrderBy<TField>(System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity, TField>> orderByClause, bool descending = false) => this.LinqOrderByClauses.Add(new SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>((System.Linq.Expressions.Expression)orderByClause, descending));
					internal List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>> LinqOrderByClauses { get; } = new List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>>();
					internal List<ISortClause> QSOrderByClauses { get; set; } = new List<ISortClause>();
					/// <summary>Linq specific. Custom where clause to be used for when the PassengerAmenitySelections embedded set is fetched</summary>
					public System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity, bool>> LinqWhereClause { get; set; }
					/// <summary>QuerySpec specific. Custom where clause to be used for when the PassengerAmenitySelections embedded set is fetched</summary>
					public IPredicate QSWhereClause { get; set; }
					/// <summary>Projection parameters to configure where / orderby clauses for the nested member 'RouteAmenity'</summary>
					public R_F_P_P_RouteAmenityProjectionParams_Clauses RouteAmenityProjectionParams { get; } = new R_F_P_P_RouteAmenityProjectionParams_Clauses();
				}

				///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
				public partial class R_F_P_RouteFlightFeedbacksProjectionParams_Clauses
				{
					/// <summary>QuerySpec specific. Appends a new OrderBy clause for the RouteFlightFeedbacks embedded set.</summary>
					/// <param name="clauseToAdd">the clause to add</param>
					public void AppendQSOrderBy(ISortClause clauseToAdd) => this.QSOrderByClauses.Add(clauseToAdd);
					/// <summary>Linq specific. Appends a new OrderBy clause for the RouteFlightFeedbacks embedded set.</summary>
					/// <param name="orderByClause">The order by clause to use</param>
					/// <param name="descending">if true, the order by will be descending, otherwise ascending (default)</param>
					/// <typeparam name="TField">The type of the field to sort by</typeparam>
					public void AppendLinqOrderBy<TField>(System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.RouteFlightFeedbackEntity, TField>> orderByClause, bool descending = false) => this.LinqOrderByClauses.Add(new SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>((System.Linq.Expressions.Expression)orderByClause, descending));
					internal List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>> LinqOrderByClauses { get; } = new List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>>();
					internal List<ISortClause> QSOrderByClauses { get; set; } = new List<ISortClause>();
					/// <summary>Linq specific. Custom where clause to be used for when the RouteFlightFeedbacks embedded set is fetched</summary>
					public System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.RouteFlightFeedbackEntity, bool>> LinqWhereClause { get; set; }
					/// <summary>QuerySpec specific. Custom where clause to be used for when the RouteFlightFeedbacks embedded set is fetched</summary>
					public IPredicate QSWhereClause { get; set; }
				}

				/// <summary>QuerySpec specific. Appends a new OrderBy clause for the Passengers embedded set.</summary>
				/// <param name="clauseToAdd">the clause to add</param>
				public void AppendQSOrderBy(ISortClause clauseToAdd) => this.QSOrderByClauses.Add(clauseToAdd);
				/// <summary>Linq specific. Appends a new OrderBy clause for the Passengers embedded set.</summary>
				/// <param name="orderByClause">The order by clause to use</param>
				/// <param name="descending">if true, the order by will be descending, otherwise ascending (default)</param>
				/// <typeparam name="TField">The type of the field to sort by</typeparam>
				public void AppendLinqOrderBy<TField>(System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.PassengerEntity, TField>> orderByClause, bool descending = false) => this.LinqOrderByClauses.Add(new SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>((System.Linq.Expressions.Expression)orderByClause, descending));
				internal List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>> LinqOrderByClauses { get; } = new List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>>();
				internal List<ISortClause> QSOrderByClauses { get; set; } = new List<ISortClause>();
				/// <summary>Linq specific. Custom where clause to be used for when the Passengers embedded set is fetched</summary>
				public System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.PassengerEntity, bool>> LinqWhereClause { get; set; }
				/// <summary>QuerySpec specific. Custom where clause to be used for when the Passengers embedded set is fetched</summary>
				public IPredicate QSWhereClause { get; set; }
				/// <summary>Projection parameters to configure where / orderby clauses for the nested member 'AmenityFeedbacks'</summary>
				public R_F_P_AmenityFeedbacksProjectionParams_Clauses AmenityFeedbacksProjectionParams { get; } = new R_F_P_AmenityFeedbacksProjectionParams_Clauses();
				/// <summary>Projection parameters to configure where / orderby clauses for the nested member 'PassengerAmenitySelections'</summary>
				public R_F_P_PassengerAmenitySelectionsProjectionParams_Clauses PassengerAmenitySelectionsProjectionParams { get; } = new R_F_P_PassengerAmenitySelectionsProjectionParams_Clauses();
				/// <summary>Projection parameters to configure where / orderby clauses for the nested member 'RouteFlightFeedbacks'</summary>
				public R_F_P_RouteFlightFeedbacksProjectionParams_Clauses RouteFlightFeedbacksProjectionParams { get; } = new R_F_P_RouteFlightFeedbacksProjectionParams_Clauses();
			}

			/// <summary>Projection parameters to configure where / orderby clauses for the nested member 'Passengers'</summary>
			public R_F_PassengersProjectionParams_Clauses PassengersProjectionParams { get; } = new R_F_PassengersProjectionParams_Clauses();
		}

		///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
		public partial class R_PassengerProjectionParams_Clauses
		{
			///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
			public partial class R_P_AmenityFeedbacksProjectionParams_Clauses
			{
				/// <summary>QuerySpec specific. Appends a new OrderBy clause for the AmenityFeedbacks embedded set.</summary>
				/// <param name="clauseToAdd">the clause to add</param>
				public void AppendQSOrderBy(ISortClause clauseToAdd) => this.QSOrderByClauses.Add(clauseToAdd);
				/// <summary>Linq specific. Appends a new OrderBy clause for the AmenityFeedbacks embedded set.</summary>
				/// <param name="orderByClause">The order by clause to use</param>
				/// <param name="descending">if true, the order by will be descending, otherwise ascending (default)</param>
				/// <typeparam name="TField">The type of the field to sort by</typeparam>
				public void AppendLinqOrderBy<TField>(System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.AmenityFeedbackEntity, TField>> orderByClause, bool descending = false) => this.LinqOrderByClauses.Add(new SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>((System.Linq.Expressions.Expression)orderByClause, descending));
				internal List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>> LinqOrderByClauses { get; } = new List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>>();
				internal List<ISortClause> QSOrderByClauses { get; set; } = new List<ISortClause>();
				/// <summary>Linq specific. Custom where clause to be used for when the AmenityFeedbacks embedded set is fetched</summary>
				public System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.AmenityFeedbackEntity, bool>> LinqWhereClause { get; set; }
				/// <summary>QuerySpec specific. Custom where clause to be used for when the AmenityFeedbacks embedded set is fetched</summary>
				public IPredicate QSWhereClause { get; set; }
			}

			/// <summary>Projection parameters to configure where / orderby clauses for the nested member 'AmenityFeedbacks'</summary>
			public R_P_AmenityFeedbacksProjectionParams_Clauses AmenityFeedbacksProjectionParams { get; } = new R_P_AmenityFeedbacksProjectionParams_Clauses();
		}

		/// <summary>Projection parameters to configure where / orderby clauses for the nested member 'Flight'</summary>
		public R_FlightProjectionParams_Clauses FlightProjectionParams { get; } = new R_FlightProjectionParams_Clauses();
		/// <summary>Projection parameters to configure where / orderby clauses for the nested member 'Passenger'</summary>
		public R_PassengerProjectionParams_Clauses PassengerProjectionParams { get; } = new R_PassengerProjectionParams_Clauses();
	}

	/// <summary>Static class for (extension) methods for fetching and projecting instances of Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView from the entity model.</summary>
	public static partial class RouteFlightFeedbackDetailsViewPersistence
	{
		private static readonly System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.RouteFlightFeedbackEntity, Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView>> _projectorExpression = CreateProjectionFunc();
		private static readonly Func<Charcillaries.Data.EntityClasses.RouteFlightFeedbackEntity, Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView> _compiledProjector = CreateProjectionFunc().Compile();
		/// <summary>Linq specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToRouteFlightFeedbackDetailsView(System.Linq.IQueryable{Charcillaries.Data.EntityClasses.RouteFlightFeedbackEntity})"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="CreateProjectionFunc"/></param>
		/// <remarks>Linq specific</remarks>
		static partial void GetAdjustmentsForProjectToRouteFlightFeedbackDetailsView(ref System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.RouteFlightFeedbackEntity, Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView>> projectionAdjustments);
		/// <summary>QuerySpec specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToRouteFlightFeedbackDetailsView(EntityQuery{Charcillaries.Data.EntityClasses.RouteFlightFeedbackEntity}, Charcillaries.Data.FactoryClasses.QueryFactory)"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="ProjectToRouteFlightFeedbackDetailsView(EntityQuery{Charcillaries.Data.EntityClasses.RouteFlightFeedbackEntity}, Charcillaries.Data.FactoryClasses.QueryFactory)"/></param>
		/// <remarks>QuerySpec specific</remarks>
		static partial void GetAdjustmentsForProjectToRouteFlightFeedbackDetailsViewQs(ref System.Linq.Expressions.Expression<Func<Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView>> projectionAdjustments);
	
		/// <summary>Empty static ctor for triggering initialization of static members in a thread-safe manner</summary>
		static RouteFlightFeedbackDetailsViewPersistence() { }
	
		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView which instances are projected from the results of the specified baseQuery, which returns Charcillaries.Data.EntityClasses.RouteFlightFeedbackEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <returns>IQueryable to retrieve Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView instances</returns>
		public static IQueryable<Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView> ProjectToRouteFlightFeedbackDetailsView(this IQueryable<Charcillaries.Data.EntityClasses.RouteFlightFeedbackEntity> baseQuery) => ProjectToRouteFlightFeedbackDetailsView(baseQuery, null);
		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView which instances are projected from the results of the specified baseQuery, which returns Charcillaries.Data.EntityClasses.RouteFlightFeedbackEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="projectionParams">The optional projection parameters with optional where/orderby clauses for nested sets in the projection</param>
		/// <returns>IQueryable to retrieve Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView instances</returns>
		public static IQueryable<Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView> ProjectToRouteFlightFeedbackDetailsView(this IQueryable<Charcillaries.Data.EntityClasses.RouteFlightFeedbackEntity> baseQuery, RouteFlightFeedbackDetailsViewProjectionParams projectionParams)
		{
			if(projectionParams == null)
			{
				return baseQuery.Select(_projectorExpression);
			}
			return baseQuery.Select(CreateProjectionFunc(projectionParams));
		}

		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView which instances are projected from the results of the specified baseQuery using QuerySpec, which returns Charcillaries.Data.EntityClasses.RouteFlightFeedbackEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="qf">The query factory used to create baseQuery.</param>
		/// <returns>DynamicQuery to retrieve Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView instances</returns>
		public static DynamicQuery<Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView> ProjectToRouteFlightFeedbackDetailsView(this EntityQuery<Charcillaries.Data.EntityClasses.RouteFlightFeedbackEntity> baseQuery, Charcillaries.Data.FactoryClasses.QueryFactory qf) => ProjectToRouteFlightFeedbackDetailsView(baseQuery, qf, null);
		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView which instances are projected from the results of the specified baseQuery using QuerySpec, which returns Charcillaries.Data.EntityClasses.RouteFlightFeedbackEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="qf">The query factory used to create baseQuery.</param>
		/// <param name="projectionParams">The optional projection parameters with optional where/orderby clauses for nested sets in the projection</param>
		/// <returns>DynamicQuery to retrieve Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView instances</returns>
		public static DynamicQuery<Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView> ProjectToRouteFlightFeedbackDetailsView(this EntityQuery<Charcillaries.Data.EntityClasses.RouteFlightFeedbackEntity> baseQuery, Charcillaries.Data.FactoryClasses.QueryFactory qf, RouteFlightFeedbackDetailsViewProjectionParams projectionParams=null)
		{
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToRouteFlightFeedbackDetailsViewQs(ref projectionAdjustments);
			return qf.Create()
				.From(baseQuery.Select(Projection.Full).As("__BQ")
					.InnerJoin(qf.Flight.As("__L0_0")).On(RouteFlightFeedbackFields.FlightId.Source("__BQ").Equal(FlightFields.Id.Source("__L0_0")))
					.InnerJoin(qf.FlightRoute.As("__L0_1")).On(FlightFields.FlightRouteId.Source("__L0_0").Equal(FlightRouteFields.Id.Source("__L0_1")))
					.InnerJoin(qf.Passenger.As("__L0_2")).On(RouteFlightFeedbackFields.PassengerId.Source("__BQ").Equal(PassengerFields.Id.Source("__L0_2")))
					.InnerJoin(qf.Person.As("__L0_3")).On(PassengerFields.PersonId.Source("__L0_2").Equal(PersonFields.Id.Source("__L0_3"))))
				.Select(LinqUtils.MergeProjectionAdjustmentsIntoProjection(() => new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView()
				{
					Comment = RouteFlightFeedbackFields.Comment.Source("__BQ").ToValue<System.String>(),
					DateCreated = RouteFlightFeedbackFields.DateCreated.Source("__BQ").ToValue<System.DateTime>(),
					Flight = new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.Flight()
						{
							ArrivalDate = FlightFields.ArrivalDate.Source("__L0_0").ToValue<System.DateTime>(),
							DepartureDate = FlightFields.DepartureDate.Source("__L0_0").ToValue<System.DateTime>(),
							FlightNumber = FlightFields.FlightNumber.Source("__L0_0").ToValue<System.String>(),
							FlightRoute = new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.FlightTypes.FlightRoute()
								{
									AirlineId = FlightRouteFields.AirlineId.Source("__L0_1").ToValue<System.Int32>(),
									ArrivalAirport = FlightRouteFields.ArrivalAirport.Source("__L0_1").ToValue<System.String>(),
									DepartureAirport = FlightRouteFields.DepartureAirport.Source("__L0_1").ToValue<System.String>(),
								},
							Passengers = (List<Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.FlightTypes.Passenger>)qf.RouteFlightFeedback.TargetAs("__L1_0")
								.CorrelatedOver(FlightFields.Id.Source("__L0_0").Equal(PassengerFields.FlightId.Source("__L1_0")))
								.From(QueryTarget
									.InnerJoin(qf.Flight.As("__L1_1")).On(RouteFlightFeedbackFields.FlightId.Source("__L1_0").Equal(FlightFields.Id.Source("__L1_1")))
									.LeftJoin(qf.Passenger.As("__L1_2")).On(PassengerFields.FlightId.Source("__L1_2").Equal(FlightFields.Id.Source("__L1_1")))
									.InnerJoin(qf.Person.As("__L1_3")).On(PassengerFields.PersonId.Source("__L1_2").Equal(PersonFields.Id.Source("__L1_3"))))
								.Where(projectionParams==null ? null : GeneralUtils.SetAliasOnPredicate(projectionParams.FlightProjectionParams.PassengersProjectionParams.QSWhereClause, "__L1_0"))
								.OrderBy(projectionParams==null ? null : GeneralUtils.SetAliasOnSortClauses(projectionParams.FlightProjectionParams.PassengersProjectionParams.QSOrderByClauses, "__L1_0"))
								.Select(() => new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.FlightTypes.Passenger()
								{
									AmenityFeedbacks = (List<Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.FlightTypes.PassengerTypes.AmenityFeedback>)qf.AmenityFeedback.TargetAs("__L2_0")
										.CorrelatedOver(PassengerFields.Id.Source("__L1_2").Equal(AmenityFeedbackFields.PassengerId.Source("__L2_0")))
										.Where(projectionParams==null ? null : GeneralUtils.SetAliasOnPredicate(projectionParams.FlightProjectionParams.PassengersProjectionParams.AmenityFeedbacksProjectionParams.QSWhereClause, "__L2_0"))
										.OrderBy(projectionParams==null ? null : GeneralUtils.SetAliasOnSortClauses(projectionParams.FlightProjectionParams.PassengersProjectionParams.AmenityFeedbacksProjectionParams.QSOrderByClauses, "__L2_0"))
										.Select(() => new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.FlightTypes.PassengerTypes.AmenityFeedback()
										{
											AmenityId = AmenityFeedbackFields.AmenityId.Source("__L2_0").ToValue<System.Int32>(),
											Comment = AmenityFeedbackFields.Comment.Source("__L2_0").ToValue<System.String>(),
											DateCreated = AmenityFeedbackFields.DateCreated.Source("__L2_0").ToValue<System.DateTime>(),
											Id = AmenityFeedbackFields.Id.Source("__L2_0").ToValue<System.Int32>(),
											ObjectStatus = AmenityFeedbackFields.ObjectStatus.Source("__L2_0").ToValue<System.Int32>(),
											PassengerId = AmenityFeedbackFields.PassengerId.Source("__L2_0").ToValue<System.Int32>(),
											Rating = AmenityFeedbackFields.Rating.Source("__L2_0").ToValue<Nullable<System.Int32>>(),
										}).ToResultset(),
									FlightId = PassengerFields.FlightId.Source("__L1_0").ToValue<System.Int32>(),
									Id = PassengerFields.Id.Source("__L1_0").ToValue<System.Int32>(),
									ObjectStatus = PassengerFields.ObjectStatus.Source("__L1_0").ToValue<System.Int32>(),
									PassengerAmenitySelections = (List<Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.FlightTypes.PassengerTypes.PassengerAmenitySelection>)qf.RouteFlightFeedback.TargetAs("__L2_0")
										.CorrelatedOver(PassengerFields.Id.Source("__L1_2").Equal(PassengerAmenitySelectionFields.PassengerId.Source("__L2_0")))
										.From(QueryTarget
											.InnerJoin(qf.Flight.As("__L2_1")).On(RouteFlightFeedbackFields.FlightId.Source("__L2_0").Equal(FlightFields.Id.Source("__L2_1")))
											.LeftJoin(qf.Passenger.As("__L2_2")).On(PassengerFields.FlightId.Source("__L2_2").Equal(FlightFields.Id.Source("__L2_1")))
											.LeftJoin(qf.PassengerAmenitySelection.As("__L2_3")).On(PassengerAmenitySelectionFields.PassengerId.Source("__L2_3").Equal(PassengerFields.Id.Source("__L2_2")))
											.InnerJoin(qf.RouteAmenity.As("__L2_4")).On(PassengerAmenitySelectionFields.RouteAmenityId.Source("__L2_3").Equal(RouteAmenityFields.Id.Source("__L2_4")))
											.InnerJoin(qf.Amenity.As("__L2_5")).On(RouteAmenityFields.AmenityId.Source("__L2_4").Equal(AmenityFields.Id.Source("__L2_5"))))
										.Where(projectionParams==null ? null : GeneralUtils.SetAliasOnPredicate(projectionParams.FlightProjectionParams.PassengersProjectionParams.PassengerAmenitySelectionsProjectionParams.QSWhereClause, "__L2_0"))
										.OrderBy(projectionParams==null ? null : GeneralUtils.SetAliasOnSortClauses(projectionParams.FlightProjectionParams.PassengersProjectionParams.PassengerAmenitySelectionsProjectionParams.QSOrderByClauses, "__L2_0"))
										.Select(() => new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.FlightTypes.PassengerTypes.PassengerAmenitySelection()
										{
											AmenityId = PassengerAmenitySelectionFields.RouteAmenityId.Source("__L2_0").ToValue<System.Int32>(),
											Confirmed = PassengerAmenitySelectionFields.Confirmed.Source("__L2_0").ToValue<Nullable<System.Int32>>(),
											Customization = PassengerAmenitySelectionFields.Customization.Source("__L2_0").ToValue<System.String>(),
											Id = PassengerAmenitySelectionFields.Id.Source("__L2_0").ToValue<System.Int32>(),
											ObjectStatus = PassengerAmenitySelectionFields.ObjectStatus.Source("__L2_0").ToValue<System.Int32>(),
											PassengerId = PassengerAmenitySelectionFields.PassengerId.Source("__L2_0").ToValue<System.Int32>(),
											Quantity = PassengerAmenitySelectionFields.Quantity.Source("__L2_0").ToValue<Nullable<System.Int32>>(),
											RouteAmenity = new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.FlightTypes.PassengerTypes.PassengerAmenitySelectionTypes.RouteAmenity()
												{
													Amenity = new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.FlightTypes.PassengerTypes.PassengerAmenitySelectionTypes.RouteAmenityTypes.Amenity()
														{
															AirlineId = AmenityFields.AirlineId.Source("__L2_5").ToValue<System.Int32>(),
															Description = AmenityFields.Description.Source("__L2_5").ToValue<System.String>(),
															Id = AmenityFields.Id.As("Id1").Source("__L2_5").ToValue<System.Int32>(),
															Name = AmenityFields.Name.Source("__L2_5").ToValue<System.String>(),
															ObjectStatus = AmenityFields.ObjectStatus.As("ObjectStatus1").Source("__L2_5").ToValue<System.Int32>(),
														},
													AmenityId = RouteAmenityFields.AmenityId.Source("__L2_4").ToValue<System.Int32>(),
													PassengerAmenitySelections = (List<Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.FlightTypes.PassengerTypes.PassengerAmenitySelectionTypes.RouteAmenityTypes.PassengerAmenitySelection>)qf.PassengerAmenitySelection.TargetAs("__L3_0")
														.CorrelatedOver(RouteAmenityFields.Id.Source("__L2_4").Equal(PassengerAmenitySelectionFields.RouteAmenityId.Source("__L3_0")))
														.Where(projectionParams==null ? null : GeneralUtils.SetAliasOnPredicate(projectionParams.FlightProjectionParams.PassengersProjectionParams.PassengerAmenitySelectionsProjectionParams.RouteAmenityProjectionParams.PassengerAmenitySelectionsProjectionParams.QSWhereClause, "__L3_0"))
														.OrderBy(projectionParams==null ? null : GeneralUtils.SetAliasOnSortClauses(projectionParams.FlightProjectionParams.PassengersProjectionParams.PassengerAmenitySelectionsProjectionParams.RouteAmenityProjectionParams.PassengerAmenitySelectionsProjectionParams.QSOrderByClauses, "__L3_0"))
														.Select(() => new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.FlightTypes.PassengerTypes.PassengerAmenitySelectionTypes.RouteAmenityTypes.PassengerAmenitySelection()
														{
															Confirmed = PassengerAmenitySelectionFields.Confirmed.Source("__L3_0").ToValue<Nullable<System.Int32>>(),
															Customization = PassengerAmenitySelectionFields.Customization.Source("__L3_0").ToValue<System.String>(),
															Id = PassengerAmenitySelectionFields.Id.Source("__L3_0").ToValue<System.Int32>(),
															ObjectStatus = PassengerAmenitySelectionFields.ObjectStatus.Source("__L3_0").ToValue<System.Int32>(),
															PassengerId = PassengerAmenitySelectionFields.PassengerId.Source("__L3_0").ToValue<System.Int32>(),
															Quantity = PassengerAmenitySelectionFields.Quantity.Source("__L3_0").ToValue<Nullable<System.Int32>>(),
															RouteAmenityId = PassengerAmenitySelectionFields.RouteAmenityId.Source("__L3_0").ToValue<System.Int32>(),
														}).ToResultset(),
												},
										}).ToResultset(),
									PaymentAmount = PassengerFields.PaymentAmount.Source("__L1_0").ToValue<Nullable<System.Single>>(),
									PaymentConfirmation = PassengerFields.PaymentConfirmation.Source("__L1_0").ToValue<System.String>(),
									PaymentConfirmationDate = PassengerFields.PaymentConfirmationDate.Source("__L1_0").ToValue<Nullable<System.DateTime>>(),
									Person = new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.FlightTypes.PassengerTypes.Person()
										{
											Email = PersonFields.Email.Source("__L1_3").ToValue<System.String>(),
											FirstName = PersonFields.FirstName.Source("__L1_3").ToValue<System.String>(),
											Id = PersonFields.Id.As("Id1").Source("__L1_3").ToValue<System.Int32>(),
											LastName = PersonFields.LastName.Source("__L1_3").ToValue<System.String>(),
											ObjectStatus = PersonFields.ObjectStatus.As("ObjectStatus1").Source("__L1_3").ToValue<System.Int32>(),
											PassportNumber = PersonFields.PassportNumber.Source("__L1_3").ToValue<System.String>(),
											PhoneNumber = PersonFields.PhoneNumber.Source("__L1_3").ToValue<System.String>(),
										},
									PersonId = PassengerFields.PersonId.Source("__L1_0").ToValue<System.Int32>(),
									RouteFlightFeedbacks = (List<Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.FlightTypes.PassengerTypes.RouteFlightFeedback>)qf.RouteFlightFeedback.TargetAs("__L2_0")
										.CorrelatedOver(PassengerFields.Id.Source("__L1_2").Equal(RouteFlightFeedbackFields.PassengerId.Source("__L2_0")))
										.Where(projectionParams==null ? null : GeneralUtils.SetAliasOnPredicate(projectionParams.FlightProjectionParams.PassengersProjectionParams.RouteFlightFeedbacksProjectionParams.QSWhereClause, "__L2_0"))
										.OrderBy(projectionParams==null ? null : GeneralUtils.SetAliasOnSortClauses(projectionParams.FlightProjectionParams.PassengersProjectionParams.RouteFlightFeedbacksProjectionParams.QSOrderByClauses, "__L2_0"))
										.Select(() => new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.FlightTypes.PassengerTypes.RouteFlightFeedback()
										{
											Comment = RouteFlightFeedbackFields.Comment.Source("__L2_0").ToValue<System.String>(),
											DateCreated = RouteFlightFeedbackFields.DateCreated.Source("__L2_0").ToValue<System.DateTime>(),
											FlightId = RouteFlightFeedbackFields.FlightId.Source("__L2_0").ToValue<System.Int32>(),
											Id = RouteFlightFeedbackFields.Id.Source("__L2_0").ToValue<System.Int32>(),
											ObjectStatus = RouteFlightFeedbackFields.ObjectStatus.Source("__L2_0").ToValue<System.Int32>(),
											PassengerId = RouteFlightFeedbackFields.PassengerId.Source("__L2_0").ToValue<System.Int32>(),
											Rating = RouteFlightFeedbackFields.Rating.Source("__L2_0").ToValue<Nullable<System.Int32>>(),
										}).ToResultset(),
								}).ToResultset(),
						},
					Passenger = new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.Passenger()
						{
							AmenityFeedbacks = (List<Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.PassengerTypes.AmenityFeedback>)qf.Passenger.TargetAs("__L1_3")
								.CorrelatedOver(RouteFlightFeedbackFields.PassengerId.Source("__L0_2").Equal(PassengerFields.Id.Source("__L1_0")))
								.From(QueryTarget
									.LeftJoin(qf.AmenityFeedback.As("__L1_1")).On(AmenityFeedbackFields.PassengerId.Source("__L1_1").Equal(PassengerFields.Id.Source("__L1_0")))
									.InnerJoin(qf.Amenity.As("__L1_2")).On(AmenityFeedbackFields.AmenityId.Source("__L1_1").Equal(AmenityFields.Id.Source("__L1_2")))
									.LeftJoin(qf.AmenityFeedback.As("__L1_3")).On(AmenityFeedbackFields.PassengerId.Source("__L1_3").Equal(PassengerFields.Id.Source("__L1_3")))
									.InnerJoin(qf.Passenger.As("__L1_4")).On(AmenityFeedbackFields.PassengerId.Source("__L1_1").Equal(PassengerFields.Id.Source("__L1_4"))))
								.Where(projectionParams==null ? null : GeneralUtils.SetAliasOnPredicate(projectionParams.PassengerProjectionParams.AmenityFeedbacksProjectionParams.QSWhereClause, "__L1_3"))
								.OrderBy(projectionParams==null ? null : GeneralUtils.SetAliasOnSortClauses(projectionParams.PassengerProjectionParams.AmenityFeedbacksProjectionParams.QSOrderByClauses, "__L1_3"))
								.Select(() => new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.PassengerTypes.AmenityFeedback()
								{
									Amenity = new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.PassengerTypes.AmenityFeedbackTypes.Amenity()
										{
											Name = AmenityFields.Name.Source("__L1_2").ToValue<System.String>(),
										},
									AmenityId = AmenityFeedbackFields.AmenityId.Source("__L1_3").ToValue<System.Int32>(),
									Comment = AmenityFeedbackFields.Comment.Source("__L1_3").ToValue<System.String>(),
									DateCreated = AmenityFeedbackFields.DateCreated.Source("__L1_3").ToValue<System.DateTime>(),
									Id = AmenityFeedbackFields.Id.Source("__L1_3").ToValue<System.Int32>(),
									ObjectStatus = AmenityFeedbackFields.ObjectStatus.Source("__L1_3").ToValue<System.Int32>(),
									Passenger = new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.PassengerTypes.AmenityFeedbackTypes.Passenger()
										{
											FlightId = PassengerFields.FlightId.Source("__L1_4").ToValue<System.Int32>(),
											Id = PassengerFields.Id.As("Id1").Source("__L1_4").ToValue<System.Int32>(),
											ObjectStatus = PassengerFields.ObjectStatus.As("ObjectStatus1").Source("__L1_4").ToValue<System.Int32>(),
											PaymentAmount = PassengerFields.PaymentAmount.Source("__L1_4").ToValue<Nullable<System.Single>>(),
											PaymentConfirmation = PassengerFields.PaymentConfirmation.Source("__L1_4").ToValue<System.String>(),
											PaymentConfirmationDate = PassengerFields.PaymentConfirmationDate.Source("__L1_4").ToValue<Nullable<System.DateTime>>(),
											PersonId = PassengerFields.PersonId.Source("__L1_4").ToValue<System.Int32>(),
										},
									PassengerId = AmenityFeedbackFields.PassengerId.Source("__L1_3").ToValue<System.Int32>(),
									Rating = AmenityFeedbackFields.Rating.Source("__L1_3").ToValue<Nullable<System.Int32>>(),
								}).ToResultset(),
							Person = new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.PassengerTypes.Person()
								{
									FirstName = PersonFields.FirstName.Source("__L0_3").ToValue<System.String>(),
									LastName = PersonFields.LastName.Source("__L0_3").ToValue<System.String>(),
								},
						},
					Rating = RouteFlightFeedbackFields.Rating.Source("__BQ").ToValue<Nullable<System.Int32>>(),
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegionQS_RouteFlightFeedbackDetailsView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
				}, projectionAdjustments, false));
		}

		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView which instances are projected from the Charcillaries.Data.EntityClasses.RouteFlightFeedbackEntity entity instance specified, the root entity of the derived element returned by this method.</summary>
		/// <param name="entity">The entity to project from.</param>
		/// <returns>Charcillaries.Data.EntityClasses.RouteFlightFeedbackEntity instance created from the specified entity instance</returns>
		public static Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView ProjectToRouteFlightFeedbackDetailsView(this Charcillaries.Data.EntityClasses.RouteFlightFeedbackEntity entity)
		{
			return _compiledProjector(entity);
		}

		private static System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.RouteFlightFeedbackEntity, Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView>> CreateProjectionFunc(RouteFlightFeedbackDetailsViewProjectionParams projectionParams=null)
		{
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.RouteFlightFeedbackEntity, Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView>> mainProjection = p__0 => new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView()
			{
				Comment = p__0.Comment,
				DateCreated = p__0.DateCreated,
				Flight = new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.Flight()
				{
					ArrivalDate = p__0.Flight.ArrivalDate,
					DepartureDate = p__0.Flight.DepartureDate,
					FlightNumber = p__0.Flight.FlightNumber,
					FlightRoute = new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.FlightTypes.FlightRoute()
					{
						AirlineId = p__0.Flight.FlightRoute.AirlineId,
						ArrivalAirport = p__0.Flight.FlightRoute.ArrivalAirport,
						DepartureAirport = p__0.Flight.FlightRoute.DepartureAirport,
					},
					Passengers = p__0.Flight.Passengers.AsQueryable().OptionalWhere(projectionParams.FlightProjectionParams.PassengersProjectionParams.LinqWhereClause).OptionalOrderBy(projectionParams.FlightProjectionParams.PassengersProjectionParams.LinqOrderByClauses).Select(p__1 => new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.FlightTypes.Passenger()
					{
						AmenityFeedbacks = p__1.AmenityFeedbacks.AsQueryable().OptionalWhere(projectionParams.FlightProjectionParams.PassengersProjectionParams.AmenityFeedbacksProjectionParams.LinqWhereClause).OptionalOrderBy(projectionParams.FlightProjectionParams.PassengersProjectionParams.AmenityFeedbacksProjectionParams.LinqOrderByClauses).Select(p__2 => new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.FlightTypes.PassengerTypes.AmenityFeedback()
						{
							AmenityId = p__2.AmenityId,
							Comment = p__2.Comment,
							DateCreated = p__2.DateCreated,
							Id = p__2.Id,
							ObjectStatus = p__2.ObjectStatus,
							PassengerId = p__2.PassengerId,
							Rating = p__2.Rating,
						}).ToList(),
						FlightId = p__1.FlightId,
						Id = p__1.Id,
						ObjectStatus = p__1.ObjectStatus,
						PassengerAmenitySelections = p__1.PassengerAmenitySelections.AsQueryable().OptionalWhere(projectionParams.FlightProjectionParams.PassengersProjectionParams.PassengerAmenitySelectionsProjectionParams.LinqWhereClause).OptionalOrderBy(projectionParams.FlightProjectionParams.PassengersProjectionParams.PassengerAmenitySelectionsProjectionParams.LinqOrderByClauses).Select(p__2 => new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.FlightTypes.PassengerTypes.PassengerAmenitySelection()
						{
							AmenityId = p__2.RouteAmenityId,
							Confirmed = p__2.Confirmed,
							Customization = p__2.Customization,
							Id = p__2.Id,
							ObjectStatus = p__2.ObjectStatus,
							PassengerId = p__2.PassengerId,
							Quantity = p__2.Quantity,
							RouteAmenity = new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.FlightTypes.PassengerTypes.PassengerAmenitySelectionTypes.RouteAmenity()
							{
								Amenity = new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.FlightTypes.PassengerTypes.PassengerAmenitySelectionTypes.RouteAmenityTypes.Amenity()
								{
									AirlineId = p__2.RouteAmenity.Amenity.AirlineId,
									Description = p__2.RouteAmenity.Amenity.Description,
									Id = p__2.RouteAmenity.Amenity.Id,
									Name = p__2.RouteAmenity.Amenity.Name,
									ObjectStatus = p__2.RouteAmenity.Amenity.ObjectStatus,
								},
								AmenityId = p__2.RouteAmenity.AmenityId,
								PassengerAmenitySelections = p__2.RouteAmenity.PassengerAmenitySelections.AsQueryable().OptionalWhere(projectionParams.FlightProjectionParams.PassengersProjectionParams.PassengerAmenitySelectionsProjectionParams.RouteAmenityProjectionParams.PassengerAmenitySelectionsProjectionParams.LinqWhereClause).OptionalOrderBy(projectionParams.FlightProjectionParams.PassengersProjectionParams.PassengerAmenitySelectionsProjectionParams.RouteAmenityProjectionParams.PassengerAmenitySelectionsProjectionParams.LinqOrderByClauses).Select(p__3 => new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.FlightTypes.PassengerTypes.PassengerAmenitySelectionTypes.RouteAmenityTypes.PassengerAmenitySelection()
								{
									Confirmed = p__3.Confirmed,
									Customization = p__3.Customization,
									Id = p__3.Id,
									ObjectStatus = p__3.ObjectStatus,
									PassengerId = p__3.PassengerId,
									Quantity = p__3.Quantity,
									RouteAmenityId = p__3.RouteAmenityId,
								}).ToList(),
							},
						}).ToList(),
						PaymentAmount = p__1.PaymentAmount,
						PaymentConfirmation = p__1.PaymentConfirmation,
						PaymentConfirmationDate = p__1.PaymentConfirmationDate,
						Person = new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.FlightTypes.PassengerTypes.Person()
						{
							Email = p__1.Person.Email,
							FirstName = p__1.Person.FirstName,
							Id = p__1.Person.Id,
							LastName = p__1.Person.LastName,
							ObjectStatus = p__1.Person.ObjectStatus,
							PassportNumber = p__1.Person.PassportNumber,
							PhoneNumber = p__1.Person.PhoneNumber,
						},
						PersonId = p__1.PersonId,
						RouteFlightFeedbacks = p__1.RouteFlightFeedbacks.AsQueryable().OptionalWhere(projectionParams.FlightProjectionParams.PassengersProjectionParams.RouteFlightFeedbacksProjectionParams.LinqWhereClause).OptionalOrderBy(projectionParams.FlightProjectionParams.PassengersProjectionParams.RouteFlightFeedbacksProjectionParams.LinqOrderByClauses).Select(p__2 => new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.FlightTypes.PassengerTypes.RouteFlightFeedback()
						{
							Comment = p__2.Comment,
							DateCreated = p__2.DateCreated,
							FlightId = p__2.FlightId,
							Id = p__2.Id,
							ObjectStatus = p__2.ObjectStatus,
							PassengerId = p__2.PassengerId,
							Rating = p__2.Rating,
						}).ToList(),
					}).ToList(),
				},
				Passenger = new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.Passenger()
				{
					AmenityFeedbacks = p__0.Passenger.AmenityFeedbacks.AsQueryable().OptionalWhere(projectionParams.PassengerProjectionParams.AmenityFeedbacksProjectionParams.LinqWhereClause).OptionalOrderBy(projectionParams.PassengerProjectionParams.AmenityFeedbacksProjectionParams.LinqOrderByClauses).Select(p__1 => new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.PassengerTypes.AmenityFeedback()
					{
						Amenity = new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.PassengerTypes.AmenityFeedbackTypes.Amenity()
						{
							Name = p__1.Amenity.Name,
						},
						AmenityId = p__1.AmenityId,
						Comment = p__1.Comment,
						DateCreated = p__1.DateCreated,
						Id = p__1.Id,
						ObjectStatus = p__1.ObjectStatus,
						Passenger = new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.PassengerTypes.AmenityFeedbackTypes.Passenger()
						{
							FlightId = p__1.Passenger.FlightId,
							Id = p__1.Passenger.Id,
							ObjectStatus = p__1.Passenger.ObjectStatus,
							PaymentAmount = p__1.Passenger.PaymentAmount,
							PaymentConfirmation = p__1.Passenger.PaymentConfirmation,
							PaymentConfirmationDate = p__1.Passenger.PaymentConfirmationDate,
							PersonId = p__1.Passenger.PersonId,
						},
						PassengerId = p__1.PassengerId,
						Rating = p__1.Rating,
					}).ToList(),
					Person = new Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsViewTypes.PassengerTypes.Person()
					{
						FirstName = p__0.Passenger.Person.FirstName,
						LastName = p__0.Passenger.Person.LastName,
					},
				},
				Rating = p__0.Rating,
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegion_RouteFlightFeedbackDetailsView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
			};
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.RouteFlightFeedbackEntity, Charcillaries.Data.Views.DtoClasses.RouteFlightFeedbackDetailsView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToRouteFlightFeedbackDetailsView(ref projectionAdjustments);
			return LinqUtils.MergeProjectionAdjustmentsIntoProjection(mainProjection, projectionAdjustments, true);
		}
	}
}


