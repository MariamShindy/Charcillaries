//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.10.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Charcillaries.Data.HelperClasses;
using Charcillaries.Data.FactoryClasses;
using Charcillaries.Data.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Charcillaries.Data.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'RouteAmenity'.<br/><br/></summary>
	[Serializable]
	public partial class RouteAmenityEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<PassengerAmenitySelectionEntity> _passengerAmenitySelections;
		private AmenityEntity _amenity;
		private FlightRouteEntity _flightRoute;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static RouteAmenityEntityStaticMetaData _staticMetaData = new RouteAmenityEntityStaticMetaData();
		private static RouteAmenityRelations _relationsFactory = new RouteAmenityRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Amenity</summary>
			public static readonly string Amenity = "Amenity";
			/// <summary>Member name FlightRoute</summary>
			public static readonly string FlightRoute = "FlightRoute";
			/// <summary>Member name PassengerAmenitySelections</summary>
			public static readonly string PassengerAmenitySelections = "PassengerAmenitySelections";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class RouteAmenityEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public RouteAmenityEntityStaticMetaData()
			{
				SetEntityCoreInfo("RouteAmenityEntity", InheritanceHierarchyType.None, false, (int)Charcillaries.Data.EntityType.RouteAmenityEntity, typeof(RouteAmenityEntity), typeof(RouteAmenityEntityFactory), false);
				AddNavigatorMetaData<RouteAmenityEntity, EntityCollection<PassengerAmenitySelectionEntity>>("PassengerAmenitySelections", a => a._passengerAmenitySelections, (a, b) => a._passengerAmenitySelections = b, a => a.PassengerAmenitySelections, () => new RouteAmenityRelations().PassengerAmenitySelectionEntityUsingRouteAmenityId, typeof(PassengerAmenitySelectionEntity), (int)Charcillaries.Data.EntityType.PassengerAmenitySelectionEntity);
				AddNavigatorMetaData<RouteAmenityEntity, AmenityEntity>("Amenity", "RouteAmenities", (a, b) => a._amenity = b, a => a._amenity, (a, b) => a.Amenity = b, Charcillaries.Data.RelationClasses.StaticRouteAmenityRelations.AmenityEntityUsingAmenityIdStatic, ()=>new RouteAmenityRelations().AmenityEntityUsingAmenityId, null, new int[] { (int)RouteAmenityFieldIndex.AmenityId }, null, true, (int)Charcillaries.Data.EntityType.AmenityEntity);
				AddNavigatorMetaData<RouteAmenityEntity, FlightRouteEntity>("FlightRoute", "RouteAmenities", (a, b) => a._flightRoute = b, a => a._flightRoute, (a, b) => a.FlightRoute = b, Charcillaries.Data.RelationClasses.StaticRouteAmenityRelations.FlightRouteEntityUsingFlightRouteIdStatic, ()=>new RouteAmenityRelations().FlightRouteEntityUsingFlightRouteId, null, new int[] { (int)RouteAmenityFieldIndex.FlightRouteId }, null, true, (int)Charcillaries.Data.EntityType.FlightRouteEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static RouteAmenityEntity()
		{
		}

		/// <summary> CTor</summary>
		public RouteAmenityEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public RouteAmenityEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this RouteAmenityEntity</param>
		public RouteAmenityEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for RouteAmenity which data should be fetched into this RouteAmenity object</param>
		public RouteAmenityEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for RouteAmenity which data should be fetched into this RouteAmenity object</param>
		/// <param name="validator">The custom validator object for this RouteAmenityEntity</param>
		public RouteAmenityEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected RouteAmenityEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Method which will construct a filter (predicate expression) for the unique constraint defined on the fields: AmenityId , FlightRouteId .</summary>
		/// <returns>true if succeeded and the contents is read, false otherwise</returns>
		public IPredicateExpression ConstructFilterForUCAmenityIdFlightRouteId()
		{
			var filter = new PredicateExpression();
			filter.Add(Charcillaries.Data.HelperClasses.RouteAmenityFields.AmenityId == this.Fields.GetCurrentValue((int)RouteAmenityFieldIndex.AmenityId));
			filter.Add(Charcillaries.Data.HelperClasses.RouteAmenityFields.FlightRouteId == this.Fields.GetCurrentValue((int)RouteAmenityFieldIndex.FlightRouteId));
 			return filter;
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'PassengerAmenitySelection' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPassengerAmenitySelections() { return CreateRelationInfoForNavigator("PassengerAmenitySelections"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Amenity' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAmenity() { return CreateRelationInfoForNavigator("Amenity"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'FlightRoute' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoFlightRoute() { return CreateRelationInfoForNavigator("FlightRoute"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this RouteAmenityEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static RouteAmenityRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PassengerAmenitySelection' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPassengerAmenitySelections { get { return _staticMetaData.GetPrefetchPathElement("PassengerAmenitySelections", CommonEntityBase.CreateEntityCollection<PassengerAmenitySelectionEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Amenity' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAmenity { get { return _staticMetaData.GetPrefetchPathElement("Amenity", CommonEntityBase.CreateEntityCollection<AmenityEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'FlightRoute' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathFlightRoute { get { return _staticMetaData.GetPrefetchPathElement("FlightRoute", CommonEntityBase.CreateEntityCollection<FlightRouteEntity>()); } }

		/// <summary>The AmenityId property of the Entity RouteAmenity<br/><br/></summary>
		/// <remarks>Mapped on  table field: "route_amenity"."amenity_id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 AmenityId
		{
			get { return (System.Int32)GetValue((int)RouteAmenityFieldIndex.AmenityId, true); }
			set	{ SetValue((int)RouteAmenityFieldIndex.AmenityId, value); }
		}

		/// <summary>The FlightRouteId property of the Entity RouteAmenity<br/><br/></summary>
		/// <remarks>Mapped on  table field: "route_amenity"."flight_route_id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 FlightRouteId
		{
			get { return (System.Int32)GetValue((int)RouteAmenityFieldIndex.FlightRouteId, true); }
			set	{ SetValue((int)RouteAmenityFieldIndex.FlightRouteId, value); }
		}

		/// <summary>The Id property of the Entity RouteAmenity<br/><br/></summary>
		/// <remarks>Mapped on  table field: "route_amenity"."id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)RouteAmenityFieldIndex.Id, true); }
			set { SetValue((int)RouteAmenityFieldIndex.Id, value); }		}

		/// <summary>The ObjectStatus property of the Entity RouteAmenity<br/><br/></summary>
		/// <remarks>Mapped on  table field: "route_amenity"."object_status".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ObjectStatus
		{
			get { return (System.Int32)GetValue((int)RouteAmenityFieldIndex.ObjectStatus, true); }
			set	{ SetValue((int)RouteAmenityFieldIndex.ObjectStatus, value); }
		}

		/// <summary>The Price property of the Entity RouteAmenity<br/><br/></summary>
		/// <remarks>Mapped on  table field: "route_amenity"."price".<br/>Table field type characteristics (type, precision, scale, length): Real, 24, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Single Price
		{
			get { return (System.Single)GetValue((int)RouteAmenityFieldIndex.Price, true); }
			set	{ SetValue((int)RouteAmenityFieldIndex.Price, value); }
		}

		/// <summary>The Quantity property of the Entity RouteAmenity<br/><br/></summary>
		/// <remarks>Mapped on  table field: "route_amenity"."quantity".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> Quantity
		{
			get { return (Nullable<System.Int32>)GetValue((int)RouteAmenityFieldIndex.Quantity, false); }
			set	{ SetValue((int)RouteAmenityFieldIndex.Quantity, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'PassengerAmenitySelectionEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(PassengerAmenitySelectionEntity))]
		public virtual EntityCollection<PassengerAmenitySelectionEntity> PassengerAmenitySelections { get { return GetOrCreateEntityCollection<PassengerAmenitySelectionEntity, PassengerAmenitySelectionEntityFactory>("RouteAmenity", true, false, ref _passengerAmenitySelections); } }

		/// <summary>Gets / sets related entity of type 'AmenityEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual AmenityEntity Amenity
		{
			get { return _amenity; }
			set { SetSingleRelatedEntityNavigator(value, "Amenity"); }
		}

		/// <summary>Gets / sets related entity of type 'FlightRouteEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual FlightRouteEntity FlightRoute
		{
			get { return _flightRoute; }
			set { SetSingleRelatedEntityNavigator(value, "FlightRoute"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Charcillaries.Data
{
	public enum RouteAmenityFieldIndex
	{
		///<summary>AmenityId. </summary>
		AmenityId,
		///<summary>FlightRouteId. </summary>
		FlightRouteId,
		///<summary>Id. </summary>
		Id,
		///<summary>ObjectStatus. </summary>
		ObjectStatus,
		///<summary>Price. </summary>
		Price,
		///<summary>Quantity. </summary>
		Quantity,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Charcillaries.Data.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: RouteAmenity. </summary>
	public partial class RouteAmenityRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between RouteAmenityEntity and PassengerAmenitySelectionEntity over the 1:n relation they have, using the relation between the fields: RouteAmenity.Id - PassengerAmenitySelection.RouteAmenityId</summary>
		public virtual IEntityRelation PassengerAmenitySelectionEntityUsingRouteAmenityId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "PassengerAmenitySelections", true, new[] { RouteAmenityFields.Id, PassengerAmenitySelectionFields.RouteAmenityId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RouteAmenityEntity and AmenityEntity over the m:1 relation they have, using the relation between the fields: RouteAmenity.AmenityId - Amenity.Id</summary>
		public virtual IEntityRelation AmenityEntityUsingAmenityId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Amenity", false, new[] { AmenityFields.Id, RouteAmenityFields.AmenityId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RouteAmenityEntity and FlightRouteEntity over the m:1 relation they have, using the relation between the fields: RouteAmenity.FlightRouteId - FlightRoute.Id</summary>
		public virtual IEntityRelation FlightRouteEntityUsingFlightRouteId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "FlightRoute", false, new[] { FlightRouteFields.Id, RouteAmenityFields.FlightRouteId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticRouteAmenityRelations
	{
		internal static readonly IEntityRelation PassengerAmenitySelectionEntityUsingRouteAmenityIdStatic = new RouteAmenityRelations().PassengerAmenitySelectionEntityUsingRouteAmenityId;
		internal static readonly IEntityRelation AmenityEntityUsingAmenityIdStatic = new RouteAmenityRelations().AmenityEntityUsingAmenityId;
		internal static readonly IEntityRelation FlightRouteEntityUsingFlightRouteIdStatic = new RouteAmenityRelations().FlightRouteEntityUsingFlightRouteId;

		/// <summary>CTor</summary>
		static StaticRouteAmenityRelations() { }
	}
}
