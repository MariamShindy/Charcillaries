//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.10.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Charcillaries.Data.HelperClasses;
using Charcillaries.Data.FactoryClasses;
using Charcillaries.Data.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Charcillaries.Data.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Airline'.<br/><br/></summary>
	[Serializable]
	public partial class AirlineEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<AmenityEntity> _amenities;
		private EntityCollection<FlightRouteEntity> _flightRoutes;
		private EntityCollection<TourOperatorAirlineEntity> _tourOperatorAirlines;
		private EntityCollection<UserEntity> _users;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static AirlineEntityStaticMetaData _staticMetaData = new AirlineEntityStaticMetaData();
		private static AirlineRelations _relationsFactory = new AirlineRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Amenities</summary>
			public static readonly string Amenities = "Amenities";
			/// <summary>Member name FlightRoutes</summary>
			public static readonly string FlightRoutes = "FlightRoutes";
			/// <summary>Member name TourOperatorAirlines</summary>
			public static readonly string TourOperatorAirlines = "TourOperatorAirlines";
			/// <summary>Member name Users</summary>
			public static readonly string Users = "Users";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class AirlineEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public AirlineEntityStaticMetaData()
			{
				SetEntityCoreInfo("AirlineEntity", InheritanceHierarchyType.None, false, (int)Charcillaries.Data.EntityType.AirlineEntity, typeof(AirlineEntity), typeof(AirlineEntityFactory), false);
				AddNavigatorMetaData<AirlineEntity, EntityCollection<AmenityEntity>>("Amenities", a => a._amenities, (a, b) => a._amenities = b, a => a.Amenities, () => new AirlineRelations().AmenityEntityUsingAirlineId, typeof(AmenityEntity), (int)Charcillaries.Data.EntityType.AmenityEntity);
				AddNavigatorMetaData<AirlineEntity, EntityCollection<FlightRouteEntity>>("FlightRoutes", a => a._flightRoutes, (a, b) => a._flightRoutes = b, a => a.FlightRoutes, () => new AirlineRelations().FlightRouteEntityUsingAirlineId, typeof(FlightRouteEntity), (int)Charcillaries.Data.EntityType.FlightRouteEntity);
				AddNavigatorMetaData<AirlineEntity, EntityCollection<TourOperatorAirlineEntity>>("TourOperatorAirlines", a => a._tourOperatorAirlines, (a, b) => a._tourOperatorAirlines = b, a => a.TourOperatorAirlines, () => new AirlineRelations().TourOperatorAirlineEntityUsingAirlineId, typeof(TourOperatorAirlineEntity), (int)Charcillaries.Data.EntityType.TourOperatorAirlineEntity);
				AddNavigatorMetaData<AirlineEntity, EntityCollection<UserEntity>>("Users", a => a._users, (a, b) => a._users = b, a => a.Users, () => new AirlineRelations().UserEntityUsingAirlineId, typeof(UserEntity), (int)Charcillaries.Data.EntityType.UserEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static AirlineEntity()
		{
		}

		/// <summary> CTor</summary>
		public AirlineEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public AirlineEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this AirlineEntity</param>
		public AirlineEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Airline which data should be fetched into this Airline object</param>
		public AirlineEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Airline which data should be fetched into this Airline object</param>
		/// <param name="validator">The custom validator object for this AirlineEntity</param>
		public AirlineEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected AirlineEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Amenity' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAmenities() { return CreateRelationInfoForNavigator("Amenities"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'FlightRoute' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoFlightRoutes() { return CreateRelationInfoForNavigator("FlightRoutes"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'TourOperatorAirline' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTourOperatorAirlines() { return CreateRelationInfoForNavigator("TourOperatorAirlines"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUsers() { return CreateRelationInfoForNavigator("Users"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this AirlineEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static AirlineRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Amenity' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAmenities { get { return _staticMetaData.GetPrefetchPathElement("Amenities", CommonEntityBase.CreateEntityCollection<AmenityEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'FlightRoute' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathFlightRoutes { get { return _staticMetaData.GetPrefetchPathElement("FlightRoutes", CommonEntityBase.CreateEntityCollection<FlightRouteEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'TourOperatorAirline' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTourOperatorAirlines { get { return _staticMetaData.GetPrefetchPathElement("TourOperatorAirlines", CommonEntityBase.CreateEntityCollection<TourOperatorAirlineEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUsers { get { return _staticMetaData.GetPrefetchPathElement("Users", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>The ContactInfo property of the Entity Airline<br/><br/></summary>
		/// <remarks>Mapped on  table field: "airline"."contact_info".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String ContactInfo
		{
			get { return (System.String)GetValue((int)AirlineFieldIndex.ContactInfo, true); }
			set	{ SetValue((int)AirlineFieldIndex.ContactInfo, value); }
		}

		/// <summary>The Email property of the Entity Airline<br/><br/></summary>
		/// <remarks>Mapped on  table field: "airline"."email".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Email
		{
			get { return (System.String)GetValue((int)AirlineFieldIndex.Email, true); }
			set	{ SetValue((int)AirlineFieldIndex.Email, value); }
		}

		/// <summary>The Id property of the Entity Airline<br/><br/></summary>
		/// <remarks>Mapped on  table field: "airline"."id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)AirlineFieldIndex.Id, true); }
			set { SetValue((int)AirlineFieldIndex.Id, value); }		}

		/// <summary>The Name property of the Entity Airline<br/><br/></summary>
		/// <remarks>Mapped on  table field: "airline"."name".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Name
		{
			get { return (System.String)GetValue((int)AirlineFieldIndex.Name, true); }
			set	{ SetValue((int)AirlineFieldIndex.Name, value); }
		}

		/// <summary>The ObjectStatus property of the Entity Airline<br/><br/></summary>
		/// <remarks>Mapped on  table field: "airline"."object_status".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ObjectStatus
		{
			get { return (System.Int32)GetValue((int)AirlineFieldIndex.ObjectStatus, true); }
			set	{ SetValue((int)AirlineFieldIndex.ObjectStatus, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'AmenityEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(AmenityEntity))]
		public virtual EntityCollection<AmenityEntity> Amenities { get { return GetOrCreateEntityCollection<AmenityEntity, AmenityEntityFactory>("Airline", true, false, ref _amenities); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'FlightRouteEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(FlightRouteEntity))]
		public virtual EntityCollection<FlightRouteEntity> FlightRoutes { get { return GetOrCreateEntityCollection<FlightRouteEntity, FlightRouteEntityFactory>("Airline", true, false, ref _flightRoutes); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'TourOperatorAirlineEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(TourOperatorAirlineEntity))]
		public virtual EntityCollection<TourOperatorAirlineEntity> TourOperatorAirlines { get { return GetOrCreateEntityCollection<TourOperatorAirlineEntity, TourOperatorAirlineEntityFactory>("Airline", true, false, ref _tourOperatorAirlines); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'UserEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(UserEntity))]
		public virtual EntityCollection<UserEntity> Users { get { return GetOrCreateEntityCollection<UserEntity, UserEntityFactory>("Airline", true, false, ref _users); } }

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Charcillaries.Data
{
	public enum AirlineFieldIndex
	{
		///<summary>ContactInfo. </summary>
		ContactInfo,
		///<summary>Email. </summary>
		Email,
		///<summary>Id. </summary>
		Id,
		///<summary>Name. </summary>
		Name,
		///<summary>ObjectStatus. </summary>
		ObjectStatus,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Charcillaries.Data.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Airline. </summary>
	public partial class AirlineRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between AirlineEntity and AmenityEntity over the 1:n relation they have, using the relation between the fields: Airline.Id - Amenity.AirlineId</summary>
		public virtual IEntityRelation AmenityEntityUsingAirlineId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Amenities", true, new[] { AirlineFields.Id, AmenityFields.AirlineId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AirlineEntity and FlightRouteEntity over the 1:n relation they have, using the relation between the fields: Airline.Id - FlightRoute.AirlineId</summary>
		public virtual IEntityRelation FlightRouteEntityUsingAirlineId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "FlightRoutes", true, new[] { AirlineFields.Id, FlightRouteFields.AirlineId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AirlineEntity and TourOperatorAirlineEntity over the 1:n relation they have, using the relation between the fields: Airline.Id - TourOperatorAirline.AirlineId</summary>
		public virtual IEntityRelation TourOperatorAirlineEntityUsingAirlineId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "TourOperatorAirlines", true, new[] { AirlineFields.Id, TourOperatorAirlineFields.AirlineId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AirlineEntity and UserEntity over the 1:n relation they have, using the relation between the fields: Airline.Id - User.AirlineId</summary>
		public virtual IEntityRelation UserEntityUsingAirlineId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Users", true, new[] { AirlineFields.Id, UserFields.AirlineId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticAirlineRelations
	{
		internal static readonly IEntityRelation AmenityEntityUsingAirlineIdStatic = new AirlineRelations().AmenityEntityUsingAirlineId;
		internal static readonly IEntityRelation FlightRouteEntityUsingAirlineIdStatic = new AirlineRelations().FlightRouteEntityUsingAirlineId;
		internal static readonly IEntityRelation TourOperatorAirlineEntityUsingAirlineIdStatic = new AirlineRelations().TourOperatorAirlineEntityUsingAirlineId;
		internal static readonly IEntityRelation UserEntityUsingAirlineIdStatic = new AirlineRelations().UserEntityUsingAirlineId;

		/// <summary>CTor</summary>
		static StaticAirlineRelations() { }
	}
}
