//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v5.10.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SD.LLBLGen.Pro.QuerySpec;
using Charcillaries.Data.HelperClasses;
using SD.LLBLGen.Pro.LinqSupportClasses;
using SD.LLBLGen.Pro.LinqSupportClasses.DTOProjectionHelpers;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Charcillaries.Data.Views.Persistence
{
	///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
	public partial class PassengerFlightListViewProjectionParams
	{
		///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
		public partial class P_FlightProjectionParams_Clauses
		{
			///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
			public partial class P_F_FlightRouteProjectionParams_Clauses
			{
				///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
				public partial class P_F_F_RouteAmenitiesProjectionParams_Clauses
				{
					/// <summary>QuerySpec specific. Appends a new OrderBy clause for the RouteAmenities embedded set.</summary>
					/// <param name="clauseToAdd">the clause to add</param>
					public void AppendQSOrderBy(ISortClause clauseToAdd) => this.QSOrderByClauses.Add(clauseToAdd);
					/// <summary>Linq specific. Appends a new OrderBy clause for the RouteAmenities embedded set.</summary>
					/// <param name="orderByClause">The order by clause to use</param>
					/// <param name="descending">if true, the order by will be descending, otherwise ascending (default)</param>
					/// <typeparam name="TField">The type of the field to sort by</typeparam>
					public void AppendLinqOrderBy<TField>(System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.RouteAmenityEntity, TField>> orderByClause, bool descending = false) => this.LinqOrderByClauses.Add(new SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>((System.Linq.Expressions.Expression)orderByClause, descending));
					internal List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>> LinqOrderByClauses { get; } = new List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>>();
					internal List<ISortClause> QSOrderByClauses { get; set; } = new List<ISortClause>();
					/// <summary>Linq specific. Custom where clause to be used for when the RouteAmenities embedded set is fetched</summary>
					public System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.RouteAmenityEntity, bool>> LinqWhereClause { get; set; }
					/// <summary>QuerySpec specific. Custom where clause to be used for when the RouteAmenities embedded set is fetched</summary>
					public IPredicate QSWhereClause { get; set; }
				}

				/// <summary>Projection parameters to configure where / orderby clauses for the nested member 'RouteAmenities'</summary>
				public P_F_F_RouteAmenitiesProjectionParams_Clauses RouteAmenitiesProjectionParams { get; } = new P_F_F_RouteAmenitiesProjectionParams_Clauses();
			}

			/// <summary>Projection parameters to configure where / orderby clauses for the nested member 'FlightRoute'</summary>
			public P_F_FlightRouteProjectionParams_Clauses FlightRouteProjectionParams { get; } = new P_F_FlightRouteProjectionParams_Clauses();
		}

		///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
		public partial class P_PassengerAmenitySelectionsProjectionParams_Clauses
		{
			/// <summary>QuerySpec specific. Appends a new OrderBy clause for the PassengerAmenitySelections embedded set.</summary>
			/// <param name="clauseToAdd">the clause to add</param>
			public void AppendQSOrderBy(ISortClause clauseToAdd) => this.QSOrderByClauses.Add(clauseToAdd);
			/// <summary>Linq specific. Appends a new OrderBy clause for the PassengerAmenitySelections embedded set.</summary>
			/// <param name="orderByClause">The order by clause to use</param>
			/// <param name="descending">if true, the order by will be descending, otherwise ascending (default)</param>
			/// <typeparam name="TField">The type of the field to sort by</typeparam>
			public void AppendLinqOrderBy<TField>(System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity, TField>> orderByClause, bool descending = false) => this.LinqOrderByClauses.Add(new SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>((System.Linq.Expressions.Expression)orderByClause, descending));
			internal List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>> LinqOrderByClauses { get; } = new List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>>();
			internal List<ISortClause> QSOrderByClauses { get; set; } = new List<ISortClause>();
			/// <summary>Linq specific. Custom where clause to be used for when the PassengerAmenitySelections embedded set is fetched</summary>
			public System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.PassengerAmenitySelectionEntity, bool>> LinqWhereClause { get; set; }
			/// <summary>QuerySpec specific. Custom where clause to be used for when the PassengerAmenitySelections embedded set is fetched</summary>
			public IPredicate QSWhereClause { get; set; }
		}

		/// <summary>Projection parameters to configure where / orderby clauses for the nested member 'Flight'</summary>
		public P_FlightProjectionParams_Clauses FlightProjectionParams { get; } = new P_FlightProjectionParams_Clauses();
		/// <summary>Projection parameters to configure where / orderby clauses for the nested member 'PassengerAmenitySelections'</summary>
		public P_PassengerAmenitySelectionsProjectionParams_Clauses PassengerAmenitySelectionsProjectionParams { get; } = new P_PassengerAmenitySelectionsProjectionParams_Clauses();
	}

	/// <summary>Static class for (extension) methods for fetching and projecting instances of Charcillaries.Data.Views.DtoClasses.PassengerFlightListView from the entity model.</summary>
	public static partial class PassengerFlightListViewPersistence
	{
		private static readonly System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.PassengerEntity, Charcillaries.Data.Views.DtoClasses.PassengerFlightListView>> _projectorExpression = CreateProjectionFunc();
		private static readonly Func<Charcillaries.Data.EntityClasses.PassengerEntity, Charcillaries.Data.Views.DtoClasses.PassengerFlightListView> _compiledProjector = CreateProjectionFunc().Compile();
		/// <summary>Linq specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToPassengerFlightListView(System.Linq.IQueryable{Charcillaries.Data.EntityClasses.PassengerEntity})"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="CreateProjectionFunc"/></param>
		/// <remarks>Linq specific</remarks>
		static partial void GetAdjustmentsForProjectToPassengerFlightListView(ref System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.PassengerEntity, Charcillaries.Data.Views.DtoClasses.PassengerFlightListView>> projectionAdjustments);
		/// <summary>QuerySpec specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToPassengerFlightListView(EntityQuery{Charcillaries.Data.EntityClasses.PassengerEntity}, Charcillaries.Data.FactoryClasses.QueryFactory)"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="ProjectToPassengerFlightListView(EntityQuery{Charcillaries.Data.EntityClasses.PassengerEntity}, Charcillaries.Data.FactoryClasses.QueryFactory)"/></param>
		/// <remarks>QuerySpec specific</remarks>
		static partial void GetAdjustmentsForProjectToPassengerFlightListViewQs(ref System.Linq.Expressions.Expression<Func<Charcillaries.Data.Views.DtoClasses.PassengerFlightListView>> projectionAdjustments);
	
		/// <summary>Empty static ctor for triggering initialization of static members in a thread-safe manner</summary>
		static PassengerFlightListViewPersistence() { }
	
		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.PassengerFlightListView which instances are projected from the results of the specified baseQuery, which returns Charcillaries.Data.EntityClasses.PassengerEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <returns>IQueryable to retrieve Charcillaries.Data.Views.DtoClasses.PassengerFlightListView instances</returns>
		public static IQueryable<Charcillaries.Data.Views.DtoClasses.PassengerFlightListView> ProjectToPassengerFlightListView(this IQueryable<Charcillaries.Data.EntityClasses.PassengerEntity> baseQuery) => ProjectToPassengerFlightListView(baseQuery, null);
		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.PassengerFlightListView which instances are projected from the results of the specified baseQuery, which returns Charcillaries.Data.EntityClasses.PassengerEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="projectionParams">The optional projection parameters with optional where/orderby clauses for nested sets in the projection</param>
		/// <returns>IQueryable to retrieve Charcillaries.Data.Views.DtoClasses.PassengerFlightListView instances</returns>
		public static IQueryable<Charcillaries.Data.Views.DtoClasses.PassengerFlightListView> ProjectToPassengerFlightListView(this IQueryable<Charcillaries.Data.EntityClasses.PassengerEntity> baseQuery, PassengerFlightListViewProjectionParams projectionParams)
		{
			if(projectionParams == null)
			{
				return baseQuery.Select(_projectorExpression);
			}
			return baseQuery.Select(CreateProjectionFunc(projectionParams));
		}

		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.PassengerFlightListView which instances are projected from the results of the specified baseQuery using QuerySpec, which returns Charcillaries.Data.EntityClasses.PassengerEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="qf">The query factory used to create baseQuery.</param>
		/// <returns>DynamicQuery to retrieve Charcillaries.Data.Views.DtoClasses.PassengerFlightListView instances</returns>
		public static DynamicQuery<Charcillaries.Data.Views.DtoClasses.PassengerFlightListView> ProjectToPassengerFlightListView(this EntityQuery<Charcillaries.Data.EntityClasses.PassengerEntity> baseQuery, Charcillaries.Data.FactoryClasses.QueryFactory qf) => ProjectToPassengerFlightListView(baseQuery, qf, null);
		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.PassengerFlightListView which instances are projected from the results of the specified baseQuery using QuerySpec, which returns Charcillaries.Data.EntityClasses.PassengerEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="qf">The query factory used to create baseQuery.</param>
		/// <param name="projectionParams">The optional projection parameters with optional where/orderby clauses for nested sets in the projection</param>
		/// <returns>DynamicQuery to retrieve Charcillaries.Data.Views.DtoClasses.PassengerFlightListView instances</returns>
		public static DynamicQuery<Charcillaries.Data.Views.DtoClasses.PassengerFlightListView> ProjectToPassengerFlightListView(this EntityQuery<Charcillaries.Data.EntityClasses.PassengerEntity> baseQuery, Charcillaries.Data.FactoryClasses.QueryFactory qf, PassengerFlightListViewProjectionParams projectionParams=null)
		{
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.Views.DtoClasses.PassengerFlightListView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToPassengerFlightListViewQs(ref projectionAdjustments);
			return qf.Create()
				.From(baseQuery.Select(Projection.Full).As("__BQ")
					.InnerJoin(qf.Flight.As("__L0_0")).On(PassengerFields.FlightId.Source("__BQ").Equal(FlightFields.Id.Source("__L0_0")))
					.InnerJoin(qf.FlightRoute.As("__L0_1")).On(FlightFields.FlightRouteId.Source("__L0_0").Equal(FlightRouteFields.Id.Source("__L0_1")))
					.InnerJoin(qf.Airline.As("__L0_2")).On(FlightRouteFields.AirlineId.Source("__L0_1").Equal(AirlineFields.Id.Source("__L0_2")))
					.InnerJoin(qf.Person.As("__L0_3")).On(PassengerFields.PersonId.Source("__BQ").Equal(PersonFields.Id.Source("__L0_3"))))
				.Select(LinqUtils.MergeProjectionAdjustmentsIntoProjection(() => new Charcillaries.Data.Views.DtoClasses.PassengerFlightListView()
				{
					Flight = new Charcillaries.Data.Views.DtoClasses.PassengerFlightListViewTypes.Flight()
						{
							ArrivalDate = FlightFields.ArrivalDate.Source("__L0_0").ToValue<System.DateTime>(),
							DepartureDate = FlightFields.DepartureDate.Source("__L0_0").ToValue<System.DateTime>(),
							FlightNumber = FlightFields.FlightNumber.Source("__L0_0").ToValue<System.String>(),
							FlightRoute = new Charcillaries.Data.Views.DtoClasses.PassengerFlightListViewTypes.FlightTypes.FlightRoute()
								{
									Airline = new Charcillaries.Data.Views.DtoClasses.PassengerFlightListViewTypes.FlightTypes.FlightRouteTypes.Airline()
										{
											Name = AirlineFields.Name.Source("__L0_2").ToValue<System.String>(),
										},
									AirlineId = FlightRouteFields.AirlineId.Source("__L0_1").ToValue<System.Int32>(),
									ArrivalAirport = FlightRouteFields.ArrivalAirport.Source("__L0_1").ToValue<System.String>(),
									DepartureAirport = FlightRouteFields.DepartureAirport.Source("__L0_1").ToValue<System.String>(),
									Id = FlightRouteFields.Id.Source("__L0_1").ToValue<System.Int32>(),
									ObjectStatus = FlightRouteFields.ObjectStatus.Source("__L0_1").ToValue<System.Int32>(),
									RouteAmenities = (List<Charcillaries.Data.Views.DtoClasses.PassengerFlightListViewTypes.FlightTypes.FlightRouteTypes.RouteAmenity>)qf.RouteAmenity.TargetAs("__L1_0")
										.CorrelatedOver(FlightRouteFields.Id.Source("__L0_1").Equal(RouteAmenityFields.FlightRouteId.Source("__L1_0")))
										.Where(projectionParams==null ? null : GeneralUtils.SetAliasOnPredicate(projectionParams.FlightProjectionParams.FlightRouteProjectionParams.RouteAmenitiesProjectionParams.QSWhereClause, "__L1_0"))
										.OrderBy(projectionParams==null ? null : GeneralUtils.SetAliasOnSortClauses(projectionParams.FlightProjectionParams.FlightRouteProjectionParams.RouteAmenitiesProjectionParams.QSOrderByClauses, "__L1_0"))
										.Select(() => new Charcillaries.Data.Views.DtoClasses.PassengerFlightListViewTypes.FlightTypes.FlightRouteTypes.RouteAmenity()
										{
											AmenityId = RouteAmenityFields.AmenityId.Source("__L1_0").ToValue<System.Int32>(),
											FlightRouteId = RouteAmenityFields.FlightRouteId.Source("__L1_0").ToValue<System.Int32>(),
											Id = RouteAmenityFields.Id.Source("__L1_0").ToValue<System.Int32>(),
											ObjectStatus = RouteAmenityFields.ObjectStatus.Source("__L1_0").ToValue<System.Int32>(),
											Price = RouteAmenityFields.Price.Source("__L1_0").ToValue<System.Single>(),
											Quantity = RouteAmenityFields.Quantity.Source("__L1_0").ToValue<Nullable<System.Int32>>(),
										}).ToResultset(),
								},
							FlightRouteId = FlightFields.FlightRouteId.Source("__L0_0").ToValue<System.Int32>(),
							Id = FlightFields.Id.As("Id1").Source("__L0_0").ToValue<System.Int32>(),
							NumberOfSeats = FlightFields.NumberOfSeats.Source("__L0_0").ToValue<System.Int32>(),
							ObjectStatus = FlightFields.ObjectStatus.As("ObjectStatus1").Source("__L0_0").ToValue<System.Int32>(),
							TourOperatorId = FlightFields.TourOperatorId.Source("__L0_0").ToValue<System.Int32>(),
						},
					Id = PassengerFields.Id.As("Id2").Source("__BQ").ToValue<System.Int32>(),
					ObjectStatus = PassengerFields.ObjectStatus.As("ObjectStatus2").Source("__BQ").ToValue<System.Int32>(),
					PassengerAmenitySelections = (List<Charcillaries.Data.Views.DtoClasses.PassengerFlightListViewTypes.PassengerAmenitySelection>)qf.PassengerAmenitySelection.TargetAs("__L1_0")
						.CorrelatedOver(PassengerFields.Id.Source("__BQ").Equal(PassengerAmenitySelectionFields.PassengerId.Source("__L1_0")))
						.From(QueryTarget
							.InnerJoin(qf.RouteAmenity.As("__L1_1")).On(PassengerAmenitySelectionFields.RouteAmenityId.Source("__L1_0").Equal(RouteAmenityFields.Id.Source("__L1_1")))
							.InnerJoin(qf.Amenity.As("__L1_2")).On(RouteAmenityFields.AmenityId.Source("__L1_1").Equal(AmenityFields.Id.Source("__L1_2"))))
						.Where(projectionParams==null ? null : GeneralUtils.SetAliasOnPredicate(projectionParams.PassengerAmenitySelectionsProjectionParams.QSWhereClause, "__L1_0"))
						.OrderBy(projectionParams==null ? null : GeneralUtils.SetAliasOnSortClauses(projectionParams.PassengerAmenitySelectionsProjectionParams.QSOrderByClauses, "__L1_0"))
						.Select(() => new Charcillaries.Data.Views.DtoClasses.PassengerFlightListViewTypes.PassengerAmenitySelection()
						{
							AmenityId = PassengerAmenitySelectionFields.RouteAmenityId.Source("__L1_0").ToValue<System.Int32>(),
							Confirmed = PassengerAmenitySelectionFields.Confirmed.Source("__L1_0").ToValue<Nullable<System.Int32>>(),
							Customization = PassengerAmenitySelectionFields.Customization.Source("__L1_0").ToValue<System.String>(),
							Id = PassengerAmenitySelectionFields.Id.Source("__L1_0").ToValue<System.Int32>(),
							ObjectStatus = PassengerAmenitySelectionFields.ObjectStatus.Source("__L1_0").ToValue<System.Int32>(),
							PassengerId = PassengerAmenitySelectionFields.PassengerId.Source("__L1_0").ToValue<System.Int32>(),
							Quantity = PassengerAmenitySelectionFields.Quantity.Source("__L1_0").ToValue<Nullable<System.Int32>>(),
							RouteAmenity = new Charcillaries.Data.Views.DtoClasses.PassengerFlightListViewTypes.PassengerAmenitySelectionTypes.RouteAmenity()
								{
									Amenity = new Charcillaries.Data.Views.DtoClasses.PassengerFlightListViewTypes.PassengerAmenitySelectionTypes.RouteAmenityTypes.Amenity()
										{
											Name = AmenityFields.Name.Source("__L1_2").ToValue<System.String>(),
										},
									Price = RouteAmenityFields.Price.Source("__L1_1").ToValue<System.Single>(),
								},
						}).ToResultset(),
					PaymentAmount = PassengerFields.PaymentAmount.Source("__BQ").ToValue<Nullable<System.Single>>(),
					PaymentConfirmation = PassengerFields.PaymentConfirmation.Source("__BQ").ToValue<System.String>(),
					PaymentConfirmationDate = PassengerFields.PaymentConfirmationDate.Source("__BQ").ToValue<Nullable<System.DateTime>>(),
					Person = new Charcillaries.Data.Views.DtoClasses.PassengerFlightListViewTypes.Person()
						{
							Email = PersonFields.Email.Source("__L0_3").ToValue<System.String>(),
							FirstName = PersonFields.FirstName.Source("__L0_3").ToValue<System.String>(),
							Id = PersonFields.Id.As("Id3").Source("__L0_3").ToValue<System.Int32>(),
							LastName = PersonFields.LastName.Source("__L0_3").ToValue<System.String>(),
							ObjectStatus = PersonFields.ObjectStatus.As("ObjectStatus3").Source("__L0_3").ToValue<System.Int32>(),
							PassportNumber = PersonFields.PassportNumber.Source("__L0_3").ToValue<System.String>(),
							PhoneNumber = PersonFields.PhoneNumber.Source("__L0_3").ToValue<System.String>(),
						},
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegionQS_PassengerFlightListView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
				}, projectionAdjustments, false));
		}

		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.PassengerFlightListView which instances are projected from the Charcillaries.Data.EntityClasses.PassengerEntity entity instance specified, the root entity of the derived element returned by this method.</summary>
		/// <param name="entity">The entity to project from.</param>
		/// <returns>Charcillaries.Data.EntityClasses.PassengerEntity instance created from the specified entity instance</returns>
		public static Charcillaries.Data.Views.DtoClasses.PassengerFlightListView ProjectToPassengerFlightListView(this Charcillaries.Data.EntityClasses.PassengerEntity entity)
		{
			return _compiledProjector(entity);
		}

		private static System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.PassengerEntity, Charcillaries.Data.Views.DtoClasses.PassengerFlightListView>> CreateProjectionFunc(PassengerFlightListViewProjectionParams projectionParams=null)
		{
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.PassengerEntity, Charcillaries.Data.Views.DtoClasses.PassengerFlightListView>> mainProjection = p__0 => new Charcillaries.Data.Views.DtoClasses.PassengerFlightListView()
			{
				Flight = new Charcillaries.Data.Views.DtoClasses.PassengerFlightListViewTypes.Flight()
				{
					ArrivalDate = p__0.Flight.ArrivalDate,
					DepartureDate = p__0.Flight.DepartureDate,
					FlightNumber = p__0.Flight.FlightNumber,
					FlightRoute = new Charcillaries.Data.Views.DtoClasses.PassengerFlightListViewTypes.FlightTypes.FlightRoute()
					{
						Airline = new Charcillaries.Data.Views.DtoClasses.PassengerFlightListViewTypes.FlightTypes.FlightRouteTypes.Airline()
						{
							Name = p__0.Flight.FlightRoute.Airline.Name,
						},
						AirlineId = p__0.Flight.FlightRoute.AirlineId,
						ArrivalAirport = p__0.Flight.FlightRoute.ArrivalAirport,
						DepartureAirport = p__0.Flight.FlightRoute.DepartureAirport,
						Id = p__0.Flight.FlightRoute.Id,
						ObjectStatus = p__0.Flight.FlightRoute.ObjectStatus,
						RouteAmenities = p__0.Flight.FlightRoute.RouteAmenities.AsQueryable().OptionalWhere(projectionParams.FlightProjectionParams.FlightRouteProjectionParams.RouteAmenitiesProjectionParams.LinqWhereClause).OptionalOrderBy(projectionParams.FlightProjectionParams.FlightRouteProjectionParams.RouteAmenitiesProjectionParams.LinqOrderByClauses).Select(p__1 => new Charcillaries.Data.Views.DtoClasses.PassengerFlightListViewTypes.FlightTypes.FlightRouteTypes.RouteAmenity()
						{
							AmenityId = p__1.AmenityId,
							FlightRouteId = p__1.FlightRouteId,
							Id = p__1.Id,
							ObjectStatus = p__1.ObjectStatus,
							Price = p__1.Price,
							Quantity = p__1.Quantity,
						}).ToList(),
					},
					FlightRouteId = p__0.Flight.FlightRouteId,
					Id = p__0.Flight.Id,
					NumberOfSeats = p__0.Flight.NumberOfSeats,
					ObjectStatus = p__0.Flight.ObjectStatus,
					TourOperatorId = p__0.Flight.TourOperatorId,
				},
				Id = p__0.Id,
				ObjectStatus = p__0.ObjectStatus,
				PassengerAmenitySelections = p__0.PassengerAmenitySelections.AsQueryable().OptionalWhere(projectionParams.PassengerAmenitySelectionsProjectionParams.LinqWhereClause).OptionalOrderBy(projectionParams.PassengerAmenitySelectionsProjectionParams.LinqOrderByClauses).Select(p__1 => new Charcillaries.Data.Views.DtoClasses.PassengerFlightListViewTypes.PassengerAmenitySelection()
				{
					AmenityId = p__1.RouteAmenityId,
					Confirmed = p__1.Confirmed,
					Customization = p__1.Customization,
					Id = p__1.Id,
					ObjectStatus = p__1.ObjectStatus,
					PassengerId = p__1.PassengerId,
					Quantity = p__1.Quantity,
					RouteAmenity = new Charcillaries.Data.Views.DtoClasses.PassengerFlightListViewTypes.PassengerAmenitySelectionTypes.RouteAmenity()
					{
						Amenity = new Charcillaries.Data.Views.DtoClasses.PassengerFlightListViewTypes.PassengerAmenitySelectionTypes.RouteAmenityTypes.Amenity()
						{
							Name = p__1.RouteAmenity.Amenity.Name,
						},
						Price = p__1.RouteAmenity.Price,
					},
				}).ToList(),
				PaymentAmount = p__0.PaymentAmount,
				PaymentConfirmation = p__0.PaymentConfirmation,
				PaymentConfirmationDate = p__0.PaymentConfirmationDate,
				Person = new Charcillaries.Data.Views.DtoClasses.PassengerFlightListViewTypes.Person()
				{
					Email = p__0.Person.Email,
					FirstName = p__0.Person.FirstName,
					Id = p__0.Person.Id,
					LastName = p__0.Person.LastName,
					ObjectStatus = p__0.Person.ObjectStatus,
					PassportNumber = p__0.Person.PassportNumber,
					PhoneNumber = p__0.Person.PhoneNumber,
				},
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegion_PassengerFlightListView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
			};
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.PassengerEntity, Charcillaries.Data.Views.DtoClasses.PassengerFlightListView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToPassengerFlightListView(ref projectionAdjustments);
			return LinqUtils.MergeProjectionAdjustmentsIntoProjection(mainProjection, projectionAdjustments, true);
		}
	}
}


