//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.10.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Charcillaries.Data.HelperClasses;
using Charcillaries.Data.FactoryClasses;
using Charcillaries.Data.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Charcillaries.Data.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'TourOperatorAirline'.<br/><br/></summary>
	[Serializable]
	public partial class TourOperatorAirlineEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private AirlineEntity _airline;
		private TourOperatorEntity _tourOperator;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static TourOperatorAirlineEntityStaticMetaData _staticMetaData = new TourOperatorAirlineEntityStaticMetaData();
		private static TourOperatorAirlineRelations _relationsFactory = new TourOperatorAirlineRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Airline</summary>
			public static readonly string Airline = "Airline";
			/// <summary>Member name TourOperator</summary>
			public static readonly string TourOperator = "TourOperator";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class TourOperatorAirlineEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public TourOperatorAirlineEntityStaticMetaData()
			{
				SetEntityCoreInfo("TourOperatorAirlineEntity", InheritanceHierarchyType.None, false, (int)Charcillaries.Data.EntityType.TourOperatorAirlineEntity, typeof(TourOperatorAirlineEntity), typeof(TourOperatorAirlineEntityFactory), false);
				AddNavigatorMetaData<TourOperatorAirlineEntity, AirlineEntity>("Airline", "TourOperatorAirlines", (a, b) => a._airline = b, a => a._airline, (a, b) => a.Airline = b, Charcillaries.Data.RelationClasses.StaticTourOperatorAirlineRelations.AirlineEntityUsingAirlineIdStatic, ()=>new TourOperatorAirlineRelations().AirlineEntityUsingAirlineId, null, new int[] { (int)TourOperatorAirlineFieldIndex.AirlineId }, null, true, (int)Charcillaries.Data.EntityType.AirlineEntity);
				AddNavigatorMetaData<TourOperatorAirlineEntity, TourOperatorEntity>("TourOperator", "TourOperatorAirlines", (a, b) => a._tourOperator = b, a => a._tourOperator, (a, b) => a.TourOperator = b, Charcillaries.Data.RelationClasses.StaticTourOperatorAirlineRelations.TourOperatorEntityUsingTourOperatorIdStatic, ()=>new TourOperatorAirlineRelations().TourOperatorEntityUsingTourOperatorId, null, new int[] { (int)TourOperatorAirlineFieldIndex.TourOperatorId }, null, true, (int)Charcillaries.Data.EntityType.TourOperatorEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static TourOperatorAirlineEntity()
		{
		}

		/// <summary> CTor</summary>
		public TourOperatorAirlineEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public TourOperatorAirlineEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this TourOperatorAirlineEntity</param>
		public TourOperatorAirlineEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="airlineId">PK value for TourOperatorAirline which data should be fetched into this TourOperatorAirline object</param>
		/// <param name="tourOperatorId">PK value for TourOperatorAirline which data should be fetched into this TourOperatorAirline object</param>
		public TourOperatorAirlineEntity(System.Int32 airlineId, System.Int32 tourOperatorId) : this(airlineId, tourOperatorId, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="airlineId">PK value for TourOperatorAirline which data should be fetched into this TourOperatorAirline object</param>
		/// <param name="tourOperatorId">PK value for TourOperatorAirline which data should be fetched into this TourOperatorAirline object</param>
		/// <param name="validator">The custom validator object for this TourOperatorAirlineEntity</param>
		public TourOperatorAirlineEntity(System.Int32 airlineId, System.Int32 tourOperatorId, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.AirlineId = airlineId;
			this.TourOperatorId = tourOperatorId;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected TourOperatorAirlineEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Airline' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAirline() { return CreateRelationInfoForNavigator("Airline"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'TourOperator' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTourOperator() { return CreateRelationInfoForNavigator("TourOperator"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this TourOperatorAirlineEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static TourOperatorAirlineRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Airline' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAirline { get { return _staticMetaData.GetPrefetchPathElement("Airline", CommonEntityBase.CreateEntityCollection<AirlineEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'TourOperator' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTourOperator { get { return _staticMetaData.GetPrefetchPathElement("TourOperator", CommonEntityBase.CreateEntityCollection<TourOperatorEntity>()); } }

		/// <summary>The AirlineId property of the Entity TourOperatorAirline<br/><br/></summary>
		/// <remarks>Mapped on  table field: "tour_operator_airline"."airline_id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 AirlineId
		{
			get { return (System.Int32)GetValue((int)TourOperatorAirlineFieldIndex.AirlineId, true); }
			set	{ SetValue((int)TourOperatorAirlineFieldIndex.AirlineId, value); }
		}

		/// <summary>The ObjectStatus property of the Entity TourOperatorAirline<br/><br/></summary>
		/// <remarks>Mapped on  table field: "tour_operator_airline"."object_status".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ObjectStatus
		{
			get { return (System.Int32)GetValue((int)TourOperatorAirlineFieldIndex.ObjectStatus, true); }
			set	{ SetValue((int)TourOperatorAirlineFieldIndex.ObjectStatus, value); }
		}

		/// <summary>The TourOperatorId property of the Entity TourOperatorAirline<br/><br/></summary>
		/// <remarks>Mapped on  table field: "tour_operator_airline"."tour_operator_id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 TourOperatorId
		{
			get { return (System.Int32)GetValue((int)TourOperatorAirlineFieldIndex.TourOperatorId, true); }
			set	{ SetValue((int)TourOperatorAirlineFieldIndex.TourOperatorId, value); }
		}

		/// <summary>Gets / sets related entity of type 'AirlineEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual AirlineEntity Airline
		{
			get { return _airline; }
			set { SetSingleRelatedEntityNavigator(value, "Airline"); }
		}

		/// <summary>Gets / sets related entity of type 'TourOperatorEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual TourOperatorEntity TourOperator
		{
			get { return _tourOperator; }
			set { SetSingleRelatedEntityNavigator(value, "TourOperator"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Charcillaries.Data
{
	public enum TourOperatorAirlineFieldIndex
	{
		///<summary>AirlineId. </summary>
		AirlineId,
		///<summary>ObjectStatus. </summary>
		ObjectStatus,
		///<summary>TourOperatorId. </summary>
		TourOperatorId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Charcillaries.Data.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: TourOperatorAirline. </summary>
	public partial class TourOperatorAirlineRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between TourOperatorAirlineEntity and AirlineEntity over the m:1 relation they have, using the relation between the fields: TourOperatorAirline.AirlineId - Airline.Id</summary>
		public virtual IEntityRelation AirlineEntityUsingAirlineId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Airline", false, new[] { AirlineFields.Id, TourOperatorAirlineFields.AirlineId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between TourOperatorAirlineEntity and TourOperatorEntity over the m:1 relation they have, using the relation between the fields: TourOperatorAirline.TourOperatorId - TourOperator.Id</summary>
		public virtual IEntityRelation TourOperatorEntityUsingTourOperatorId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "TourOperator", false, new[] { TourOperatorFields.Id, TourOperatorAirlineFields.TourOperatorId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticTourOperatorAirlineRelations
	{
		internal static readonly IEntityRelation AirlineEntityUsingAirlineIdStatic = new TourOperatorAirlineRelations().AirlineEntityUsingAirlineId;
		internal static readonly IEntityRelation TourOperatorEntityUsingTourOperatorIdStatic = new TourOperatorAirlineRelations().TourOperatorEntityUsingTourOperatorId;

		/// <summary>CTor</summary>
		static StaticTourOperatorAirlineRelations() { }
	}
}
