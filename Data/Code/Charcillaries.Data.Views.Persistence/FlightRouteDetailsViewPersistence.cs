//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v5.10.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SD.LLBLGen.Pro.QuerySpec;
using Charcillaries.Data.HelperClasses;
using SD.LLBLGen.Pro.LinqSupportClasses;
using SD.LLBLGen.Pro.LinqSupportClasses.DTOProjectionHelpers;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Charcillaries.Data.Views.Persistence
{
	///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
	public partial class FlightRouteDetailsViewProjectionParams
	{
		///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
		public partial class F_FlightsProjectionParams_Clauses
		{
			/// <summary>QuerySpec specific. Appends a new OrderBy clause for the Flights embedded set.</summary>
			/// <param name="clauseToAdd">the clause to add</param>
			public void AppendQSOrderBy(ISortClause clauseToAdd) => this.QSOrderByClauses.Add(clauseToAdd);
			/// <summary>Linq specific. Appends a new OrderBy clause for the Flights embedded set.</summary>
			/// <param name="orderByClause">The order by clause to use</param>
			/// <param name="descending">if true, the order by will be descending, otherwise ascending (default)</param>
			/// <typeparam name="TField">The type of the field to sort by</typeparam>
			public void AppendLinqOrderBy<TField>(System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.FlightEntity, TField>> orderByClause, bool descending = false) => this.LinqOrderByClauses.Add(new SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>((System.Linq.Expressions.Expression)orderByClause, descending));
			internal List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>> LinqOrderByClauses { get; } = new List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>>();
			internal List<ISortClause> QSOrderByClauses { get; set; } = new List<ISortClause>();
			/// <summary>Linq specific. Custom where clause to be used for when the Flights embedded set is fetched</summary>
			public System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.FlightEntity, bool>> LinqWhereClause { get; set; }
			/// <summary>QuerySpec specific. Custom where clause to be used for when the Flights embedded set is fetched</summary>
			public IPredicate QSWhereClause { get; set; }
		}

		///<summary>class to define custom where/orderby clauses to be used in the linq / query spec query projection</summary>
		public partial class F_RouteAmenitiesProjectionParams_Clauses
		{
			/// <summary>QuerySpec specific. Appends a new OrderBy clause for the RouteAmenities embedded set.</summary>
			/// <param name="clauseToAdd">the clause to add</param>
			public void AppendQSOrderBy(ISortClause clauseToAdd) => this.QSOrderByClauses.Add(clauseToAdd);
			/// <summary>Linq specific. Appends a new OrderBy clause for the RouteAmenities embedded set.</summary>
			/// <param name="orderByClause">The order by clause to use</param>
			/// <param name="descending">if true, the order by will be descending, otherwise ascending (default)</param>
			/// <typeparam name="TField">The type of the field to sort by</typeparam>
			public void AppendLinqOrderBy<TField>(System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.RouteAmenityEntity, TField>> orderByClause, bool descending = false) => this.LinqOrderByClauses.Add(new SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>((System.Linq.Expressions.Expression)orderByClause, descending));
			internal List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>> LinqOrderByClauses { get; } = new List<SD.LLBLGen.Pro.ORMSupportClasses.ValuePair<System.Linq.Expressions.Expression, bool>>();
			internal List<ISortClause> QSOrderByClauses { get; set; } = new List<ISortClause>();
			/// <summary>Linq specific. Custom where clause to be used for when the RouteAmenities embedded set is fetched</summary>
			public System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.RouteAmenityEntity, bool>> LinqWhereClause { get; set; }
			/// <summary>QuerySpec specific. Custom where clause to be used for when the RouteAmenities embedded set is fetched</summary>
			public IPredicate QSWhereClause { get; set; }
		}

		/// <summary>Projection parameters to configure where / orderby clauses for the nested member 'Flights'</summary>
		public F_FlightsProjectionParams_Clauses FlightsProjectionParams { get; } = new F_FlightsProjectionParams_Clauses();
		/// <summary>Projection parameters to configure where / orderby clauses for the nested member 'RouteAmenities'</summary>
		public F_RouteAmenitiesProjectionParams_Clauses RouteAmenitiesProjectionParams { get; } = new F_RouteAmenitiesProjectionParams_Clauses();
	}

	/// <summary>Static class for (extension) methods for fetching and projecting instances of Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView from the entity model.</summary>
	public static partial class FlightRouteDetailsViewPersistence
	{
		private static readonly System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.FlightRouteEntity, Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView>> _projectorExpression = CreateProjectionFunc();
		private static readonly Func<Charcillaries.Data.EntityClasses.FlightRouteEntity, Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView> _compiledProjector = CreateProjectionFunc().Compile();
		/// <summary>Linq specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToFlightRouteDetailsView(System.Linq.IQueryable{Charcillaries.Data.EntityClasses.FlightRouteEntity})"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="CreateProjectionFunc"/></param>
		/// <remarks>Linq specific</remarks>
		static partial void GetAdjustmentsForProjectToFlightRouteDetailsView(ref System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.FlightRouteEntity, Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView>> projectionAdjustments);
		/// <summary>QuerySpec specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToFlightRouteDetailsView(EntityQuery{Charcillaries.Data.EntityClasses.FlightRouteEntity}, Charcillaries.Data.FactoryClasses.QueryFactory)"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="ProjectToFlightRouteDetailsView(EntityQuery{Charcillaries.Data.EntityClasses.FlightRouteEntity}, Charcillaries.Data.FactoryClasses.QueryFactory)"/></param>
		/// <remarks>QuerySpec specific</remarks>
		static partial void GetAdjustmentsForProjectToFlightRouteDetailsViewQs(ref System.Linq.Expressions.Expression<Func<Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView>> projectionAdjustments);
	
		/// <summary>Empty static ctor for triggering initialization of static members in a thread-safe manner</summary>
		static FlightRouteDetailsViewPersistence() { }
	
		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView which instances are projected from the results of the specified baseQuery, which returns Charcillaries.Data.EntityClasses.FlightRouteEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <returns>IQueryable to retrieve Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView instances</returns>
		public static IQueryable<Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView> ProjectToFlightRouteDetailsView(this IQueryable<Charcillaries.Data.EntityClasses.FlightRouteEntity> baseQuery) => ProjectToFlightRouteDetailsView(baseQuery, null);
		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView which instances are projected from the results of the specified baseQuery, which returns Charcillaries.Data.EntityClasses.FlightRouteEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="projectionParams">The optional projection parameters with optional where/orderby clauses for nested sets in the projection</param>
		/// <returns>IQueryable to retrieve Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView instances</returns>
		public static IQueryable<Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView> ProjectToFlightRouteDetailsView(this IQueryable<Charcillaries.Data.EntityClasses.FlightRouteEntity> baseQuery, FlightRouteDetailsViewProjectionParams projectionParams)
		{
			if(projectionParams == null)
			{
				return baseQuery.Select(_projectorExpression);
			}
			return baseQuery.Select(CreateProjectionFunc(projectionParams));
		}

		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView which instances are projected from the results of the specified baseQuery using QuerySpec, which returns Charcillaries.Data.EntityClasses.FlightRouteEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="qf">The query factory used to create baseQuery.</param>
		/// <returns>DynamicQuery to retrieve Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView instances</returns>
		public static DynamicQuery<Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView> ProjectToFlightRouteDetailsView(this EntityQuery<Charcillaries.Data.EntityClasses.FlightRouteEntity> baseQuery, Charcillaries.Data.FactoryClasses.QueryFactory qf) => ProjectToFlightRouteDetailsView(baseQuery, qf, null);
		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView which instances are projected from the results of the specified baseQuery using QuerySpec, which returns Charcillaries.Data.EntityClasses.FlightRouteEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="qf">The query factory used to create baseQuery.</param>
		/// <param name="projectionParams">The optional projection parameters with optional where/orderby clauses for nested sets in the projection</param>
		/// <returns>DynamicQuery to retrieve Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView instances</returns>
		public static DynamicQuery<Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView> ProjectToFlightRouteDetailsView(this EntityQuery<Charcillaries.Data.EntityClasses.FlightRouteEntity> baseQuery, Charcillaries.Data.FactoryClasses.QueryFactory qf, FlightRouteDetailsViewProjectionParams projectionParams=null)
		{
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToFlightRouteDetailsViewQs(ref projectionAdjustments);
			return qf.Create()
				.From(baseQuery.Select(Projection.Full).As("__BQ"))
				.Select(LinqUtils.MergeProjectionAdjustmentsIntoProjection(() => new Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView()
				{
					AirlineId = FlightRouteFields.AirlineId.Source("__BQ").ToValue<System.Int32>(),
					ArrivalAirport = FlightRouteFields.ArrivalAirport.Source("__BQ").ToValue<System.String>(),
					DepartureAirport = FlightRouteFields.DepartureAirport.Source("__BQ").ToValue<System.String>(),
					Flights = (List<Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsViewTypes.Flight>)qf.Flight.TargetAs("__L1_0")
						.CorrelatedOver(FlightRouteFields.Id.Source("__BQ").Equal(FlightFields.FlightRouteId.Source("__L1_0")))
						.From(QueryTarget
							.InnerJoin(qf.TourOperator.As("__L1_1")).On(FlightFields.TourOperatorId.Source("__L1_0").Equal(TourOperatorFields.Id.Source("__L1_1"))))
						.Where(projectionParams==null ? null : GeneralUtils.SetAliasOnPredicate(projectionParams.FlightsProjectionParams.QSWhereClause, "__L1_0"))
						.OrderBy(projectionParams==null ? null : GeneralUtils.SetAliasOnSortClauses(projectionParams.FlightsProjectionParams.QSOrderByClauses, "__L1_0"))
						.Select(() => new Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsViewTypes.Flight()
						{
							ArrivalDate = FlightFields.ArrivalDate.Source("__L1_0").ToValue<System.DateTime>(),
							DepartureDate = FlightFields.DepartureDate.Source("__L1_0").ToValue<System.DateTime>(),
							FlightNumber = FlightFields.FlightNumber.Source("__L1_0").ToValue<System.String>(),
							TourOperator = new Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsViewTypes.FlightTypes.TourOperator()
								{
									ContactInfo = TourOperatorFields.ContactInfo.Source("__L1_1").ToValue<System.String>(),
									Id = TourOperatorFields.Id.Source("__L1_1").ToValue<System.Int32>(),
									Name = TourOperatorFields.Name.Source("__L1_1").ToValue<System.String>(),
									ObjectStatus = TourOperatorFields.ObjectStatus.Source("__L1_1").ToValue<System.Int32>(),
								},
						}).ToResultset(),
					Id = FlightRouteFields.Id.Source("__BQ").ToValue<System.Int32>(),
					RouteAmenities = (List<Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsViewTypes.RouteAmenity>)qf.RouteAmenity.TargetAs("__L1_0")
						.CorrelatedOver(FlightRouteFields.Id.Source("__BQ").Equal(RouteAmenityFields.FlightRouteId.Source("__L1_0")))
						.From(QueryTarget
							.InnerJoin(qf.Amenity.As("__L1_1")).On(RouteAmenityFields.AmenityId.Source("__L1_0").Equal(AmenityFields.Id.Source("__L1_1"))))
						.Where(projectionParams==null ? null : GeneralUtils.SetAliasOnPredicate(projectionParams.RouteAmenitiesProjectionParams.QSWhereClause, "__L1_0"))
						.OrderBy(projectionParams==null ? null : GeneralUtils.SetAliasOnSortClauses(projectionParams.RouteAmenitiesProjectionParams.QSOrderByClauses, "__L1_0"))
						.Select(() => new Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsViewTypes.RouteAmenity()
						{
							Amenity = new Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsViewTypes.RouteAmenityTypes.Amenity()
								{
									Description = AmenityFields.Description.Source("__L1_1").ToValue<System.String>(),
									Icon = AmenityFields.Icon.Source("__L1_1").ToValue<Nullable<System.Guid>>(),
									Name = AmenityFields.Name.Source("__L1_1").ToValue<System.String>(),
									ObjectStatus = AmenityFields.ObjectStatus.Source("__L1_1").ToValue<System.Int32>(),
								},
							AmenityId = RouteAmenityFields.AmenityId.Source("__L1_0").ToValue<System.Int32>(),
							Id = RouteAmenityFields.Id.Source("__L1_0").ToValue<System.Int32>(),
							ObjectStatus = RouteAmenityFields.ObjectStatus.As("ObjectStatus1").Source("__L1_0").ToValue<System.Int32>(),
							Price = RouteAmenityFields.Price.Source("__L1_0").ToValue<System.Single>(),
						}).ToResultset(),
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegionQS_FlightRouteDetailsView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
				}, projectionAdjustments, false));
		}

		/// <summary>Extension method which produces a projection to Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView which instances are projected from the Charcillaries.Data.EntityClasses.FlightRouteEntity entity instance specified, the root entity of the derived element returned by this method.</summary>
		/// <param name="entity">The entity to project from.</param>
		/// <returns>Charcillaries.Data.EntityClasses.FlightRouteEntity instance created from the specified entity instance</returns>
		public static Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView ProjectToFlightRouteDetailsView(this Charcillaries.Data.EntityClasses.FlightRouteEntity entity)
		{
			return _compiledProjector(entity);
		}

		private static System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.FlightRouteEntity, Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView>> CreateProjectionFunc(FlightRouteDetailsViewProjectionParams projectionParams=null)
		{
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.FlightRouteEntity, Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView>> mainProjection = p__0 => new Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView()
			{
				AirlineId = p__0.AirlineId,
				ArrivalAirport = p__0.ArrivalAirport,
				DepartureAirport = p__0.DepartureAirport,
				Flights = p__0.Flights.AsQueryable().OptionalWhere(projectionParams.FlightsProjectionParams.LinqWhereClause).OptionalOrderBy(projectionParams.FlightsProjectionParams.LinqOrderByClauses).Select(p__1 => new Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsViewTypes.Flight()
				{
					ArrivalDate = p__1.ArrivalDate,
					DepartureDate = p__1.DepartureDate,
					FlightNumber = p__1.FlightNumber,
					TourOperator = new Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsViewTypes.FlightTypes.TourOperator()
					{
						ContactInfo = p__1.TourOperator.ContactInfo,
						Id = p__1.TourOperator.Id,
						Name = p__1.TourOperator.Name,
						ObjectStatus = p__1.TourOperator.ObjectStatus,
					},
				}).ToList(),
				Id = p__0.Id,
				RouteAmenities = p__0.RouteAmenities.AsQueryable().OptionalWhere(projectionParams.RouteAmenitiesProjectionParams.LinqWhereClause).OptionalOrderBy(projectionParams.RouteAmenitiesProjectionParams.LinqOrderByClauses).Select(p__1 => new Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsViewTypes.RouteAmenity()
				{
					Amenity = new Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsViewTypes.RouteAmenityTypes.Amenity()
					{
						Description = p__1.Amenity.Description,
						Icon = p__1.Amenity.Icon,
						Name = p__1.Amenity.Name,
						ObjectStatus = p__1.Amenity.ObjectStatus,
					},
					AmenityId = p__1.AmenityId,
					Id = p__1.Id,
					ObjectStatus = p__1.ObjectStatus,
					Price = p__1.Price,
				}).ToList(),
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegion_FlightRouteDetailsView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
			};
			System.Linq.Expressions.Expression<Func<Charcillaries.Data.EntityClasses.FlightRouteEntity, Charcillaries.Data.Views.DtoClasses.FlightRouteDetailsView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToFlightRouteDetailsView(ref projectionAdjustments);
			return LinqUtils.MergeProjectionAdjustmentsIntoProjection(mainProjection, projectionAdjustments, true);
		}
	}
}


