//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.10.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Charcillaries.Data.HelperClasses;
using Charcillaries.Data.FactoryClasses;
using Charcillaries.Data.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Charcillaries.Data.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'FlightRoute'.<br/><br/></summary>
	[Serializable]
	public partial class FlightRouteEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<FlightEntity> _flights;
		private EntityCollection<RouteAmenityEntity> _routeAmenities;
		private AirlineEntity _airline;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static FlightRouteEntityStaticMetaData _staticMetaData = new FlightRouteEntityStaticMetaData();
		private static FlightRouteRelations _relationsFactory = new FlightRouteRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Airline</summary>
			public static readonly string Airline = "Airline";
			/// <summary>Member name Flights</summary>
			public static readonly string Flights = "Flights";
			/// <summary>Member name RouteAmenities</summary>
			public static readonly string RouteAmenities = "RouteAmenities";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class FlightRouteEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public FlightRouteEntityStaticMetaData()
			{
				SetEntityCoreInfo("FlightRouteEntity", InheritanceHierarchyType.None, false, (int)Charcillaries.Data.EntityType.FlightRouteEntity, typeof(FlightRouteEntity), typeof(FlightRouteEntityFactory), false);
				AddNavigatorMetaData<FlightRouteEntity, EntityCollection<FlightEntity>>("Flights", a => a._flights, (a, b) => a._flights = b, a => a.Flights, () => new FlightRouteRelations().FlightEntityUsingFlightRouteId, typeof(FlightEntity), (int)Charcillaries.Data.EntityType.FlightEntity);
				AddNavigatorMetaData<FlightRouteEntity, EntityCollection<RouteAmenityEntity>>("RouteAmenities", a => a._routeAmenities, (a, b) => a._routeAmenities = b, a => a.RouteAmenities, () => new FlightRouteRelations().RouteAmenityEntityUsingFlightRouteId, typeof(RouteAmenityEntity), (int)Charcillaries.Data.EntityType.RouteAmenityEntity);
				AddNavigatorMetaData<FlightRouteEntity, AirlineEntity>("Airline", "FlightRoutes", (a, b) => a._airline = b, a => a._airline, (a, b) => a.Airline = b, Charcillaries.Data.RelationClasses.StaticFlightRouteRelations.AirlineEntityUsingAirlineIdStatic, ()=>new FlightRouteRelations().AirlineEntityUsingAirlineId, null, new int[] { (int)FlightRouteFieldIndex.AirlineId }, null, true, (int)Charcillaries.Data.EntityType.AirlineEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static FlightRouteEntity()
		{
		}

		/// <summary> CTor</summary>
		public FlightRouteEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public FlightRouteEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this FlightRouteEntity</param>
		public FlightRouteEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for FlightRoute which data should be fetched into this FlightRoute object</param>
		public FlightRouteEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for FlightRoute which data should be fetched into this FlightRoute object</param>
		/// <param name="validator">The custom validator object for this FlightRouteEntity</param>
		public FlightRouteEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected FlightRouteEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Method which will construct a filter (predicate expression) for the unique constraint defined on the fields: AirlineId , ArrivalAirport , DepartureAirport .</summary>
		/// <returns>true if succeeded and the contents is read, false otherwise</returns>
		public IPredicateExpression ConstructFilterForUCAirlineIdArrivalAirportDepartureAirport()
		{
			var filter = new PredicateExpression();
			filter.Add(Charcillaries.Data.HelperClasses.FlightRouteFields.AirlineId == this.Fields.GetCurrentValue((int)FlightRouteFieldIndex.AirlineId));
			filter.Add(Charcillaries.Data.HelperClasses.FlightRouteFields.ArrivalAirport == this.Fields.GetCurrentValue((int)FlightRouteFieldIndex.ArrivalAirport));
			filter.Add(Charcillaries.Data.HelperClasses.FlightRouteFields.DepartureAirport == this.Fields.GetCurrentValue((int)FlightRouteFieldIndex.DepartureAirport));
 			return filter;
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Flight' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoFlights() { return CreateRelationInfoForNavigator("Flights"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'RouteAmenity' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRouteAmenities() { return CreateRelationInfoForNavigator("RouteAmenities"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Airline' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAirline() { return CreateRelationInfoForNavigator("Airline"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this FlightRouteEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static FlightRouteRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Flight' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathFlights { get { return _staticMetaData.GetPrefetchPathElement("Flights", CommonEntityBase.CreateEntityCollection<FlightEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'RouteAmenity' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRouteAmenities { get { return _staticMetaData.GetPrefetchPathElement("RouteAmenities", CommonEntityBase.CreateEntityCollection<RouteAmenityEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Airline' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAirline { get { return _staticMetaData.GetPrefetchPathElement("Airline", CommonEntityBase.CreateEntityCollection<AirlineEntity>()); } }

		/// <summary>The AirlineId property of the Entity FlightRoute<br/><br/></summary>
		/// <remarks>Mapped on  table field: "flight_route"."airline_id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 AirlineId
		{
			get { return (System.Int32)GetValue((int)FlightRouteFieldIndex.AirlineId, true); }
			set	{ SetValue((int)FlightRouteFieldIndex.AirlineId, value); }
		}

		/// <summary>The ArrivalAirport property of the Entity FlightRoute<br/><br/></summary>
		/// <remarks>Mapped on  table field: "flight_route"."arrival_airport".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 3.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String ArrivalAirport
		{
			get { return (System.String)GetValue((int)FlightRouteFieldIndex.ArrivalAirport, true); }
			set	{ SetValue((int)FlightRouteFieldIndex.ArrivalAirport, value); }
		}

		/// <summary>The DepartureAirport property of the Entity FlightRoute<br/><br/></summary>
		/// <remarks>Mapped on  table field: "flight_route"."departure_airport".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 3.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String DepartureAirport
		{
			get { return (System.String)GetValue((int)FlightRouteFieldIndex.DepartureAirport, true); }
			set	{ SetValue((int)FlightRouteFieldIndex.DepartureAirport, value); }
		}

		/// <summary>The Id property of the Entity FlightRoute<br/><br/></summary>
		/// <remarks>Mapped on  table field: "flight_route"."id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)FlightRouteFieldIndex.Id, true); }
			set { SetValue((int)FlightRouteFieldIndex.Id, value); }		}

		/// <summary>The ObjectStatus property of the Entity FlightRoute<br/><br/></summary>
		/// <remarks>Mapped on  table field: "flight_route"."object_status".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ObjectStatus
		{
			get { return (System.Int32)GetValue((int)FlightRouteFieldIndex.ObjectStatus, true); }
			set	{ SetValue((int)FlightRouteFieldIndex.ObjectStatus, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'FlightEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(FlightEntity))]
		public virtual EntityCollection<FlightEntity> Flights { get { return GetOrCreateEntityCollection<FlightEntity, FlightEntityFactory>("FlightRoute", true, false, ref _flights); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'RouteAmenityEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(RouteAmenityEntity))]
		public virtual EntityCollection<RouteAmenityEntity> RouteAmenities { get { return GetOrCreateEntityCollection<RouteAmenityEntity, RouteAmenityEntityFactory>("FlightRoute", true, false, ref _routeAmenities); } }

		/// <summary>Gets / sets related entity of type 'AirlineEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual AirlineEntity Airline
		{
			get { return _airline; }
			set { SetSingleRelatedEntityNavigator(value, "Airline"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Charcillaries.Data
{
	public enum FlightRouteFieldIndex
	{
		///<summary>AirlineId. </summary>
		AirlineId,
		///<summary>ArrivalAirport. </summary>
		ArrivalAirport,
		///<summary>DepartureAirport. </summary>
		DepartureAirport,
		///<summary>Id. </summary>
		Id,
		///<summary>ObjectStatus. </summary>
		ObjectStatus,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Charcillaries.Data.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: FlightRoute. </summary>
	public partial class FlightRouteRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between FlightRouteEntity and FlightEntity over the 1:n relation they have, using the relation between the fields: FlightRoute.Id - Flight.FlightRouteId</summary>
		public virtual IEntityRelation FlightEntityUsingFlightRouteId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Flights", true, new[] { FlightRouteFields.Id, FlightFields.FlightRouteId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between FlightRouteEntity and RouteAmenityEntity over the 1:n relation they have, using the relation between the fields: FlightRoute.Id - RouteAmenity.FlightRouteId</summary>
		public virtual IEntityRelation RouteAmenityEntityUsingFlightRouteId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "RouteAmenities", true, new[] { FlightRouteFields.Id, RouteAmenityFields.FlightRouteId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between FlightRouteEntity and AirlineEntity over the m:1 relation they have, using the relation between the fields: FlightRoute.AirlineId - Airline.Id</summary>
		public virtual IEntityRelation AirlineEntityUsingAirlineId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Airline", false, new[] { AirlineFields.Id, FlightRouteFields.AirlineId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticFlightRouteRelations
	{
		internal static readonly IEntityRelation FlightEntityUsingFlightRouteIdStatic = new FlightRouteRelations().FlightEntityUsingFlightRouteId;
		internal static readonly IEntityRelation RouteAmenityEntityUsingFlightRouteIdStatic = new FlightRouteRelations().RouteAmenityEntityUsingFlightRouteId;
		internal static readonly IEntityRelation AirlineEntityUsingAirlineIdStatic = new FlightRouteRelations().AirlineEntityUsingAirlineId;

		/// <summary>CTor</summary>
		static StaticFlightRouteRelations() { }
	}
}
