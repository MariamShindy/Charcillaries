//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.10.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Charcillaries.Data.HelperClasses;
using Charcillaries.Data.FactoryClasses;
using Charcillaries.Data.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Charcillaries.Data.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Amenity'.<br/><br/></summary>
	[Serializable]
	public partial class AmenityEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<AmenityFeedbackEntity> _amenityFeedbacks;
		private EntityCollection<RouteAmenityEntity> _routeAmenities;
		private AirlineEntity _airline;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static AmenityEntityStaticMetaData _staticMetaData = new AmenityEntityStaticMetaData();
		private static AmenityRelations _relationsFactory = new AmenityRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Airline</summary>
			public static readonly string Airline = "Airline";
			/// <summary>Member name AmenityFeedbacks</summary>
			public static readonly string AmenityFeedbacks = "AmenityFeedbacks";
			/// <summary>Member name RouteAmenities</summary>
			public static readonly string RouteAmenities = "RouteAmenities";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class AmenityEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public AmenityEntityStaticMetaData()
			{
				SetEntityCoreInfo("AmenityEntity", InheritanceHierarchyType.None, false, (int)Charcillaries.Data.EntityType.AmenityEntity, typeof(AmenityEntity), typeof(AmenityEntityFactory), false);
				AddNavigatorMetaData<AmenityEntity, EntityCollection<AmenityFeedbackEntity>>("AmenityFeedbacks", a => a._amenityFeedbacks, (a, b) => a._amenityFeedbacks = b, a => a.AmenityFeedbacks, () => new AmenityRelations().AmenityFeedbackEntityUsingAmenityId, typeof(AmenityFeedbackEntity), (int)Charcillaries.Data.EntityType.AmenityFeedbackEntity);
				AddNavigatorMetaData<AmenityEntity, EntityCollection<RouteAmenityEntity>>("RouteAmenities", a => a._routeAmenities, (a, b) => a._routeAmenities = b, a => a.RouteAmenities, () => new AmenityRelations().RouteAmenityEntityUsingAmenityId, typeof(RouteAmenityEntity), (int)Charcillaries.Data.EntityType.RouteAmenityEntity);
				AddNavigatorMetaData<AmenityEntity, AirlineEntity>("Airline", "Amenities", (a, b) => a._airline = b, a => a._airline, (a, b) => a.Airline = b, Charcillaries.Data.RelationClasses.StaticAmenityRelations.AirlineEntityUsingAirlineIdStatic, ()=>new AmenityRelations().AirlineEntityUsingAirlineId, null, new int[] { (int)AmenityFieldIndex.AirlineId }, null, true, (int)Charcillaries.Data.EntityType.AirlineEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static AmenityEntity()
		{
		}

		/// <summary> CTor</summary>
		public AmenityEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public AmenityEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this AmenityEntity</param>
		public AmenityEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Amenity which data should be fetched into this Amenity object</param>
		public AmenityEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Amenity which data should be fetched into this Amenity object</param>
		/// <param name="validator">The custom validator object for this AmenityEntity</param>
		public AmenityEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected AmenityEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'AmenityFeedback' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAmenityFeedbacks() { return CreateRelationInfoForNavigator("AmenityFeedbacks"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'RouteAmenity' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRouteAmenities() { return CreateRelationInfoForNavigator("RouteAmenities"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Airline' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAirline() { return CreateRelationInfoForNavigator("Airline"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this AmenityEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static AmenityRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AmenityFeedback' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAmenityFeedbacks { get { return _staticMetaData.GetPrefetchPathElement("AmenityFeedbacks", CommonEntityBase.CreateEntityCollection<AmenityFeedbackEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'RouteAmenity' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRouteAmenities { get { return _staticMetaData.GetPrefetchPathElement("RouteAmenities", CommonEntityBase.CreateEntityCollection<RouteAmenityEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Airline' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAirline { get { return _staticMetaData.GetPrefetchPathElement("Airline", CommonEntityBase.CreateEntityCollection<AirlineEntity>()); } }

		/// <summary>The AirlineId property of the Entity Amenity<br/><br/></summary>
		/// <remarks>Mapped on  table field: "amenity"."airline_id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 AirlineId
		{
			get { return (System.Int32)GetValue((int)AmenityFieldIndex.AirlineId, true); }
			set	{ SetValue((int)AmenityFieldIndex.AirlineId, value); }
		}

		/// <summary>The Description property of the Entity Amenity<br/><br/></summary>
		/// <remarks>Mapped on  table field: "amenity"."description".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Description
		{
			get { return (System.String)GetValue((int)AmenityFieldIndex.Description, true); }
			set	{ SetValue((int)AmenityFieldIndex.Description, value); }
		}

		/// <summary>The Icon property of the Entity Amenity<br/><br/></summary>
		/// <remarks>Mapped on  table field: "amenity"."icon".<br/>Table field type characteristics (type, precision, scale, length): Uuid, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Guid> Icon
		{
			get { return (Nullable<System.Guid>)GetValue((int)AmenityFieldIndex.Icon, false); }
			set	{ SetValue((int)AmenityFieldIndex.Icon, value); }
		}

		/// <summary>The Id property of the Entity Amenity<br/><br/></summary>
		/// <remarks>Mapped on  table field: "amenity"."id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)AmenityFieldIndex.Id, true); }
			set { SetValue((int)AmenityFieldIndex.Id, value); }		}

		/// <summary>The Name property of the Entity Amenity<br/><br/></summary>
		/// <remarks>Mapped on  table field: "amenity"."name".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Name
		{
			get { return (System.String)GetValue((int)AmenityFieldIndex.Name, true); }
			set	{ SetValue((int)AmenityFieldIndex.Name, value); }
		}

		/// <summary>The ObjectStatus property of the Entity Amenity<br/><br/></summary>
		/// <remarks>Mapped on  table field: "amenity"."object_status".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ObjectStatus
		{
			get { return (System.Int32)GetValue((int)AmenityFieldIndex.ObjectStatus, true); }
			set	{ SetValue((int)AmenityFieldIndex.ObjectStatus, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'AmenityFeedbackEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(AmenityFeedbackEntity))]
		public virtual EntityCollection<AmenityFeedbackEntity> AmenityFeedbacks { get { return GetOrCreateEntityCollection<AmenityFeedbackEntity, AmenityFeedbackEntityFactory>("Amenity", true, false, ref _amenityFeedbacks); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'RouteAmenityEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(RouteAmenityEntity))]
		public virtual EntityCollection<RouteAmenityEntity> RouteAmenities { get { return GetOrCreateEntityCollection<RouteAmenityEntity, RouteAmenityEntityFactory>("Amenity", true, false, ref _routeAmenities); } }

		/// <summary>Gets / sets related entity of type 'AirlineEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual AirlineEntity Airline
		{
			get { return _airline; }
			set { SetSingleRelatedEntityNavigator(value, "Airline"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Charcillaries.Data
{
	public enum AmenityFieldIndex
	{
		///<summary>AirlineId. </summary>
		AirlineId,
		///<summary>Description. </summary>
		Description,
		///<summary>Icon. </summary>
		Icon,
		///<summary>Id. </summary>
		Id,
		///<summary>Name. </summary>
		Name,
		///<summary>ObjectStatus. </summary>
		ObjectStatus,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Charcillaries.Data.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Amenity. </summary>
	public partial class AmenityRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between AmenityEntity and AmenityFeedbackEntity over the 1:n relation they have, using the relation between the fields: Amenity.Id - AmenityFeedback.AmenityId</summary>
		public virtual IEntityRelation AmenityFeedbackEntityUsingAmenityId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "AmenityFeedbacks", true, new[] { AmenityFields.Id, AmenityFeedbackFields.AmenityId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AmenityEntity and RouteAmenityEntity over the 1:n relation they have, using the relation between the fields: Amenity.Id - RouteAmenity.AmenityId</summary>
		public virtual IEntityRelation RouteAmenityEntityUsingAmenityId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "RouteAmenities", true, new[] { AmenityFields.Id, RouteAmenityFields.AmenityId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AmenityEntity and AirlineEntity over the m:1 relation they have, using the relation between the fields: Amenity.AirlineId - Airline.Id</summary>
		public virtual IEntityRelation AirlineEntityUsingAirlineId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Airline", false, new[] { AirlineFields.Id, AmenityFields.AirlineId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticAmenityRelations
	{
		internal static readonly IEntityRelation AmenityFeedbackEntityUsingAmenityIdStatic = new AmenityRelations().AmenityFeedbackEntityUsingAmenityId;
		internal static readonly IEntityRelation RouteAmenityEntityUsingAmenityIdStatic = new AmenityRelations().RouteAmenityEntityUsingAmenityId;
		internal static readonly IEntityRelation AirlineEntityUsingAirlineIdStatic = new AmenityRelations().AirlineEntityUsingAirlineId;

		/// <summary>CTor</summary>
		static StaticAmenityRelations() { }
	}
}
